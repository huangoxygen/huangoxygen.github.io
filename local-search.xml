<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>机器学习-增量更新的流数据聚类</title>
    <link href="/2025/10/27/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%A2%9E%E9%87%8F%E6%9B%B4%E6%96%B0%E7%9A%84%E6%B5%81%E6%95%B0%E6%8D%AE%E8%81%9A%E7%B1%BB/"/>
    <url>/2025/10/27/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%A2%9E%E9%87%8F%E6%9B%B4%E6%96%B0%E7%9A%84%E6%B5%81%E6%95%B0%E6%8D%AE%E8%81%9A%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="增量更新的流数据聚类"><a href="#增量更新的流数据聚类" class="headerlink" title="增量更新的流数据聚类"></a>增量更新的流数据聚类</h1><ul><li><a href="#a">A. 通用 Density-Grid 流水线（对应典型网格法）</a></li><li><a href="#b">B. CEDGM（基于密度网格 + 核心微簇 + 宏簇相交）</a></li><li><a href="#c">C. DenStream（指数衰减 + 核心&#x2F;潜在&#x2F;离群 微簇）</a></li><li><a href="#d">D. HPStream（投影&#x2F;子空间聚类 + 衰减簇摘要）</a></li><li><a href="#e">E. EDSSC（高维演化数据流的动态稀疏子空间聚类）</a></li><li><a href="#f">F. 流数据聚类总结</a></li></ul><hr><h2 id="A-通用-Density-Grid-流水线（对应综述中的典型网格法）"><a href="#A-通用-Density-Grid-流水线（对应综述中的典型网格法）" class="headerlink" title="A) 通用 Density-Grid 流水线（对应综述中的典型网格法）"></a><a id="a"></a>A) 通用 Density-Grid 流水线（对应综述中的典型网格法）</h2><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><pre><code class=" mermaid">flowchart TD    S[&quot;新样本 x_t 到达&quot;] --&gt; N[&quot;归一化&quot;]    N --&gt; Q[&quot;量化到网格单元&quot;]    Q --&gt; U[&quot;更新格子密度（含时间衰减）&quot;]    U --&gt; T&#123;&quot;密度是否超过阈值？&quot;&#125;    T -- &quot;是&quot; --&gt; C1[&quot;标记为核心格&quot;]    T -- &quot;否&quot;  --&gt; C2[&quot;标记为稀疏/噪声候选&quot;]    C1 --&gt; A[&quot;连接相邻核心格&quot;]    C2 --&gt; A    A --&gt; CC[&quot;提取连通分量 → 聚类ID&quot;]    CC --&gt; O[&quot;输出 x_t 的聚类结果&quot;]</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict, deque<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GridStreamClustering</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    通用 Density-Grid 聚类（在线）：</span><br><span class="hljs-string">    - 等宽网格量化；</span><br><span class="hljs-string">    - 指数衰减密度；</span><br><span class="hljs-string">    - 核心格与邻接连通分量形成簇；</span><br><span class="hljs-string">    - 到达即刻返回该点的簇ID（若为噪声则返回 -1）。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, bounds, cell_size, lambda_decay=<span class="hljs-number">0.01</span>, core_threshold=<span class="hljs-number">3.0</span>,</span><br><span class="hljs-params">                 neighbor_conn=<span class="hljs-number">1</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        bounds: (d, 2) 每维(min,max)；cell_size: 每维网格边长(标量或向量)</span><br><span class="hljs-string">        lambda_decay: 衰减系数；core_threshold: 判定核心格的密度阈值</span><br><span class="hljs-string">        neighbor_conn: 邻接半径（曼哈顿距离&lt;=1 表示6/8邻接）</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.bounds = np.asarray(bounds)<br>        <span class="hljs-variable language_">self</span>.d = <span class="hljs-variable language_">self</span>.bounds.shape[<span class="hljs-number">0</span>]<br>        <span class="hljs-variable language_">self</span>.size = np.asarray(cell_size) <span class="hljs-keyword">if</span> np.ndim(cell_size) <span class="hljs-keyword">else</span> np.full(<span class="hljs-variable language_">self</span>.d, cell_size)<br>        <span class="hljs-variable language_">self</span>.decay = lambda_decay<br>        <span class="hljs-variable language_">self</span>.th = core_threshold<br>        <span class="hljs-variable language_">self</span>.conn = neighbor_conn<br>        <span class="hljs-comment"># 网格仓库：key=tuple(index), val=&#123;&quot;density&quot;:float, &quot;time&quot;:last_update&#125;</span><br>        <span class="hljs-variable language_">self</span>.cells = &#123;&#125;<br>        <span class="hljs-variable language_">self</span>.t = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_coord_to_cell</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-comment"># 将 x 量化为网格索引</span><br>        idx = np.floor((x - <span class="hljs-variable language_">self</span>.bounds[:, <span class="hljs-number">0</span>]) / <span class="hljs-variable language_">self</span>.size).astype(<span class="hljs-built_in">int</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">tuple</span>(idx)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decay_to_now</span>(<span class="hljs-params">self, cell</span>):<br>        <span class="hljs-comment"># 对指定格子做时间衰减</span><br>        last_t = cell.get(<span class="hljs-string">&quot;time&quot;</span>, <span class="hljs-variable language_">self</span>.t)<br>        dt = <span class="hljs-variable language_">self</span>.t - last_t<br>        <span class="hljs-keyword">if</span> dt &gt; <span class="hljs-number">0</span>:<br>            cell[<span class="hljs-string">&quot;density&quot;</span>] *= np.exp(-<span class="hljs-variable language_">self</span>.decay * dt)<br>            cell[<span class="hljs-string">&quot;time&quot;</span>] = <span class="hljs-variable language_">self</span>.t<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_neighbors</span>(<span class="hljs-params">self, g</span>):<br>        <span class="hljs-comment"># 生成邻接网格索引（曼哈顿&lt;=conn）</span><br>        d = <span class="hljs-variable language_">self</span>.d<br>        base = np.array(g)<br>        <span class="hljs-keyword">for</span> offset <span class="hljs-keyword">in</span> np.ndindex(*([<span class="hljs-number">2</span>*<span class="hljs-variable language_">self</span>.conn+<span class="hljs-number">1</span>]*d)):<br>            off = np.array(offset) - <span class="hljs-variable language_">self</span>.conn<br>            <span class="hljs-keyword">if</span> np.<span class="hljs-built_in">abs</span>(off).<span class="hljs-built_in">sum</span>() &lt;= <span class="hljs-variable language_">self</span>.conn:<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> np.<span class="hljs-built_in">all</span>(off == <span class="hljs-number">0</span>):<br>                    <span class="hljs-keyword">yield</span> <span class="hljs-built_in">tuple</span>(base + off)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_cell</span>(<span class="hljs-params">self, g</span>):<br>        c = <span class="hljs-variable language_">self</span>.cells.get(g)<br>        <span class="hljs-keyword">if</span> c <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            c = &#123;<span class="hljs-string">&quot;density&quot;</span>: <span class="hljs-number">0.0</span>, <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-variable language_">self</span>.t&#125;<br>            <span class="hljs-variable language_">self</span>.cells[g] = c<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-variable language_">self</span>._decay_to_now(c)<br>        <span class="hljs-keyword">return</span> c<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">partial_fit_predict</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;在线处理单点并返回聚类ID（-1 表示暂为噪声）。&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.t += <span class="hljs-number">1</span><br>        x = np.asarray(x)<br>        g = <span class="hljs-variable language_">self</span>._coord_to_cell(x)<br>        c = <span class="hljs-variable language_">self</span>._cell(g)<br>        c[<span class="hljs-string">&quot;density&quot;</span>] += <span class="hljs-number">1.0</span>  <span class="hljs-comment"># 简单计数 + 衰减视为密度</span><br><br>        <span class="hljs-comment"># 判定核心格集合</span><br>        core = <span class="hljs-built_in">set</span>()<br>        <span class="hljs-keyword">for</span> key, cell <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.cells.items():<br>            <span class="hljs-variable language_">self</span>._decay_to_now(cell)<br>            <span class="hljs-keyword">if</span> cell[<span class="hljs-string">&quot;density&quot;</span>] &gt;= <span class="hljs-variable language_">self</span>.th:<br>                core.add(key)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> core:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br>        <span class="hljs-comment"># 在核心格子子图上做连通分量；可缓存以提速（此处演示写法）</span><br>        <span class="hljs-comment"># BFS 连通</span><br>        visited = <span class="hljs-built_in">set</span>()<br>        comp_id = &#123;&#125;<br>        cid = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> core:<br>            <span class="hljs-keyword">if</span> node <span class="hljs-keyword">in</span> visited:<br>                <span class="hljs-keyword">continue</span><br>            cid += <span class="hljs-number">1</span><br>            q = deque([node])<br>            visited.add(node)<br>            comp_id[node] = cid<br>            <span class="hljs-keyword">while</span> q:<br>                u = q.popleft()<br>                <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>._neighbors(u):<br>                    <span class="hljs-keyword">if</span> v <span class="hljs-keyword">in</span> core <span class="hljs-keyword">and</span> v <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> visited:<br>                        visited.add(v)<br>                        comp_id[v] = cid<br>                        q.append(v)<br><br>        <span class="hljs-comment"># 将当前点所在格子的连通分量作为聚类ID</span><br>        <span class="hljs-keyword">return</span> comp_id.get(g, -<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 实现备注：</span><br><span class="hljs-comment"># 1) 生产中会对 core 图连通做缓存 + 增量更新；</span><br><span class="hljs-comment"># 2) density 可用“到达率/核密度估计/加权核”替代；</span><br><span class="hljs-comment"># 3) 也可加入空格修剪策略，周期性清理 density 很小的格。</span><br></code></pre></td></tr></table></figure><hr><h2 id="B-CEDGM（密度网格-核心微簇-宏簇相交）"><a href="#B-CEDGM（密度网格-核心微簇-宏簇相交）" class="headerlink" title="B) CEDGM（密度网格 + 核心微簇 + 宏簇相交）"></a><a id="b"></a>B) CEDGM（密度网格 + 核心微簇 + 宏簇相交）</h2><h3 id="流程图-1"><a href="#流程图-1" class="headerlink" title="流程图"></a>流程图</h3><pre><code class=" mermaid">flowchart TD    X[&quot;点 x_t 到达&quot;] --&gt; Q[&quot;量化到网格&quot;]    Q --&gt; G[&quot;更新网格密度 / 异常缓冲&quot;]    G --&gt; J&#123;&quot;是否落入某微簇的核区或壳层？&quot;&#125;    J -- &quot;核区&quot; --&gt; U1[&quot;更新该微簇中心/计数/半径&quot;]    J -- &quot;壳层&quot; --&gt; U2[&quot;吸纳并检查是否变核心&quot;]    J -- &quot;否&quot;   --&gt; O1[&quot;作为异常候选或新建微簇&quot;]    U1 --&gt; H[&quot;检查微簇之间相交&quot;]    U2 --&gt; H    O1 --&gt; H    H --&gt; M[&quot;构建微簇相交图&quot;]    M --&gt; C[&quot;连通分量 → 宏簇&quot;]    C --&gt; Y[&quot;输出所属宏簇ID&quot;]</code></pre><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict, deque<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CEDGM</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    CEDGM 轻量实现：</span><br><span class="hljs-string">    - 网格做粗粒度压缩 + 异常缓存；</span><br><span class="hljs-string">    - CMC (Core Micro-Cluster) 维护中心、半径 r0、计数；</span><br><span class="hljs-string">    - 核区 r&lt;=r0/2，壳层 r0/2&lt;r&lt;=r0；</span><br><span class="hljs-string">    - 两 CMC 若“核-壳相交”则连边，连通分量作为宏簇。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, bounds, cell_size, lambda_decay=<span class="hljs-number">0.01</span>, core_th=<span class="hljs-number">5</span>,</span><br><span class="hljs-params">                 init_radius=<span class="hljs-number">0.5</span>, max_outlier_age=<span class="hljs-number">200</span></span>):<br>        <span class="hljs-variable language_">self</span>.bounds = np.asarray(bounds)<br>        <span class="hljs-variable language_">self</span>.size = np.asarray(cell_size) <span class="hljs-keyword">if</span> np.ndim(cell_size) <span class="hljs-keyword">else</span> np.full(<span class="hljs-variable language_">self</span>.bounds.shape[<span class="hljs-number">0</span>], cell_size)<br>        <span class="hljs-variable language_">self</span>.decay = lambda_decay<br>        <span class="hljs-variable language_">self</span>.core_th = core_th<br>        <span class="hljs-variable language_">self</span>.init_r = init_radius<br>        <span class="hljs-variable language_">self</span>.max_age = max_outlier_age<br>        <span class="hljs-variable language_">self</span>.t = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 网格密度仓库</span><br>        <span class="hljs-variable language_">self</span>.grid = &#123;&#125;<br>        <span class="hljs-comment"># 微簇列表：每个元素 dict(center, r0, N, last)</span><br>        <span class="hljs-variable language_">self</span>.cmcs = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_cell_index</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">tuple</span>(np.floor((x - <span class="hljs-variable language_">self</span>.bounds[:,<span class="hljs-number">0</span>]) / <span class="hljs-variable language_">self</span>.size).astype(<span class="hljs-built_in">int</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_update_grid</span>(<span class="hljs-params">self, g</span>):<br>        c = <span class="hljs-variable language_">self</span>.grid.get(g)<br>        <span class="hljs-keyword">if</span> c <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-variable language_">self</span>.grid[g] = &#123;<span class="hljs-string">&quot;rho&quot;</span>:<span class="hljs-number">1.0</span>, <span class="hljs-string">&quot;t&quot;</span>:<span class="hljs-variable language_">self</span>.t&#125;<br>        <span class="hljs-keyword">else</span>:<br>            dt = <span class="hljs-variable language_">self</span>.t - c[<span class="hljs-string">&quot;t&quot;</span>]<br>            <span class="hljs-keyword">if</span> dt&gt;<span class="hljs-number">0</span>:<br>                c[<span class="hljs-string">&quot;rho&quot;</span>] *= np.exp(-<span class="hljs-variable language_">self</span>.decay*dt)<br>            c[<span class="hljs-string">&quot;rho&quot;</span>] += <span class="hljs-number">1.0</span><br>            c[<span class="hljs-string">&quot;t&quot;</span>] = <span class="hljs-variable language_">self</span>.t<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_assign_to_cmc</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.cmcs:<br>            <span class="hljs-comment"># 新建微簇</span><br>            <span class="hljs-variable language_">self</span>.cmcs.append(&#123;<span class="hljs-string">&quot;center&quot;</span>:x.copy(), <span class="hljs-string">&quot;r0&quot;</span>:<span class="hljs-variable language_">self</span>.init_r, <span class="hljs-string">&quot;N&quot;</span>:<span class="hljs-number">1.0</span>, <span class="hljs-string">&quot;last&quot;</span>:<span class="hljs-variable language_">self</span>.t&#125;)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-string">&quot;new&quot;</span><br>        dists = [np.linalg.norm(x - c[<span class="hljs-string">&quot;center&quot;</span>]) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.cmcs]<br>        j = <span class="hljs-built_in">int</span>(np.argmin(dists))<br>        c = <span class="hljs-variable language_">self</span>.cmcs[j]<br>        r = dists[j]<br>        <span class="hljs-comment"># 判定核/壳/外</span><br>        <span class="hljs-keyword">if</span> r &lt;= c[<span class="hljs-string">&quot;r0&quot;</span>]/<span class="hljs-number">2</span>:<br>            c[<span class="hljs-string">&quot;N&quot;</span>] += <span class="hljs-number">1.0</span><br>            eta = <span class="hljs-number">1.0</span> / c[<span class="hljs-string">&quot;N&quot;</span>]<br>            c[<span class="hljs-string">&quot;center&quot;</span>] = (<span class="hljs-number">1</span>-eta)*c[<span class="hljs-string">&quot;center&quot;</span>] + eta*x<br>            c[<span class="hljs-string">&quot;last&quot;</span>] = <span class="hljs-variable language_">self</span>.t<br>            <span class="hljs-keyword">return</span> j, <span class="hljs-string">&quot;core&quot;</span><br>        <span class="hljs-keyword">elif</span> r &lt;= c[<span class="hljs-string">&quot;r0&quot;</span>]:<br>            c[<span class="hljs-string">&quot;N&quot;</span>] += <span class="hljs-number">1.0</span><br>            eta = <span class="hljs-number">1.0</span> / c[<span class="hljs-string">&quot;N&quot;</span>]<br>            c[<span class="hljs-string">&quot;center&quot;</span>] = (<span class="hljs-number">1</span>-eta)*c[<span class="hljs-string">&quot;center&quot;</span>] + eta*x<br>            <span class="hljs-comment"># 轻微扩半径以兼容漂移</span><br>            c[<span class="hljs-string">&quot;r0&quot;</span>] = <span class="hljs-built_in">max</span>(c[<span class="hljs-string">&quot;r0&quot;</span>], r*<span class="hljs-number">1.05</span>)<br>            c[<span class="hljs-string">&quot;last&quot;</span>] = <span class="hljs-variable language_">self</span>.t<br>            <span class="hljs-keyword">return</span> j, <span class="hljs-string">&quot;shell&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 视为异常：新建微簇</span><br>            <span class="hljs-variable language_">self</span>.cmcs.append(&#123;<span class="hljs-string">&quot;center&quot;</span>:x.copy(), <span class="hljs-string">&quot;r0&quot;</span>:<span class="hljs-variable language_">self</span>.init_r, <span class="hljs-string">&quot;N&quot;</span>:<span class="hljs-number">1.0</span>, <span class="hljs-string">&quot;last&quot;</span>:<span class="hljs-variable language_">self</span>.t&#125;)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.cmcs)-<span class="hljs-number">1</span>, <span class="hljs-string">&quot;outlier&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_cmc_intersect</span>(<span class="hljs-params">self, i, j</span>):<br>        a, b = <span class="hljs-variable language_">self</span>.cmcs[i], <span class="hljs-variable language_">self</span>.cmcs[j]<br>        d = np.linalg.norm(a[<span class="hljs-string">&quot;center&quot;</span>] - b[<span class="hljs-string">&quot;center&quot;</span>])<br>        <span class="hljs-keyword">return</span> (d &lt;= a[<span class="hljs-string">&quot;r0&quot;</span>]) <span class="hljs-keyword">or</span> (d &lt;= b[<span class="hljs-string">&quot;r0&quot;</span>]) <span class="hljs-keyword">or</span> (d &lt;= (a[<span class="hljs-string">&quot;r0&quot;</span>]/<span class="hljs-number">2</span> + b[<span class="hljs-string">&quot;r0&quot;</span>]))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_macro_clusters</span>(<span class="hljs-params">self</span>):<br>        n = <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.cmcs)<br>        <span class="hljs-comment"># 构造交集图并取连通分量</span><br>        g = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>, n):<br>                <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>._cmc_intersect(i, j):<br>                    g[i].append(j)<br>                    g[j].append(i)<br>        comp = [-<span class="hljs-number">1</span>]*n<br>        cid = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">if</span> comp[i] != -<span class="hljs-number">1</span>: <span class="hljs-keyword">continue</span><br>            cid += <span class="hljs-number">1</span><br>            q = deque([i])<br>            comp[i] = cid<br>            <span class="hljs-keyword">while</span> q:<br>                u = q.popleft()<br>                <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> g[u]:<br>                    <span class="hljs-keyword">if</span> comp[v]==-<span class="hljs-number">1</span>:<br>                        comp[v]=cid<br>                        q.append(v)<br>        <span class="hljs-keyword">return</span> comp<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">partial_fit_predict</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-variable language_">self</span>.t += <span class="hljs-number">1</span><br>        x = np.asarray(x)<br>        g = <span class="hljs-variable language_">self</span>._cell_index(x)<br>        <span class="hljs-variable language_">self</span>._update_grid(g)<br>        idx, st = <span class="hljs-variable language_">self</span>._assign_to_cmc(x)<br>        comp = <span class="hljs-variable language_">self</span>._macro_clusters()<br>        <span class="hljs-comment"># 返回所属宏簇ID</span><br>        <span class="hljs-keyword">return</span> comp[idx]<br></code></pre></td></tr></table></figure><hr><h2 id="C-DenStream（指数衰减-核心-潜在-离群-微簇）"><a href="#C-DenStream（指数衰减-核心-潜在-离群-微簇）" class="headerlink" title="C) DenStream（指数衰减 + 核心&#x2F;潜在&#x2F;离群 微簇）"></a><a id="c"></a>C) DenStream（指数衰减 + 核心&#x2F;潜在&#x2F;离群 微簇）</h2><h3 id="流程图-2"><a href="#流程图-2" class="headerlink" title="流程图"></a>流程图</h3><pre><code class=" mermaid">flowchart TD    X[&quot;点 x_t 到达&quot;] --&gt; A[&quot;寻找最近微簇&quot;]    A --&gt; B&#123;&quot;距离是否 ≤ ε？&quot;&#125;    B -- &quot;是&quot; --&gt; U[&quot;吸纳并（带衰减）更新中心/权重/半径&quot;]    B -- &quot;否&quot; --&gt; O[&quot;新建离群微簇&quot;]    U --&gt; P&#123;&quot;权重 ≥ β 且 半径 ≤ ε？&quot;&#125;    P -- &quot;是&quot; --&gt; C[&quot;标记为核心/潜在微簇&quot;]    P -- &quot;否&quot; --&gt; R[&quot;保持为潜在/离群&quot;]    O --&gt; S[&quot;周期修剪低权重离群微簇&quot;]    C --&gt; Y[&quot;输出簇ID（可离线合并）&quot;]    R --&gt; Y    S --&gt; Y</code></pre><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DenStream</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    简化 DenStream：</span><br><span class="hljs-string">    - 指数衰减: w(t) = w(t-1)*exp(-lambda*dt) + 1</span><br><span class="hljs-string">    - 分类微簇: core / potential / outlier 依据权重阈值 β 与半径 ε</span><br><span class="hljs-string">    - 周期修剪: 对低权重的 outlier 删除</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, eps=<span class="hljs-number">0.5</span>, beta=<span class="hljs-number">10.0</span>, lambd=<span class="hljs-number">0.01</span>, cleanup_period=<span class="hljs-number">100</span></span>):<br>        <span class="hljs-variable language_">self</span>.eps = eps<br>        <span class="hljs-variable language_">self</span>.beta = beta<br>        <span class="hljs-variable language_">self</span>.lambd = lambd<br>        <span class="hljs-variable language_">self</span>.period = cleanup_period<br>        <span class="hljs-variable language_">self</span>.t = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.clusters = []  <span class="hljs-comment"># 每个: &#123;center, weight, radius, last, kind&#125;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decay</span>(<span class="hljs-params">self, c</span>):<br>        dt = <span class="hljs-variable language_">self</span>.t - c[<span class="hljs-string">&quot;last&quot;</span>]<br>        <span class="hljs-keyword">if</span> dt &gt; <span class="hljs-number">0</span>:<br>            c[<span class="hljs-string">&quot;weight&quot;</span>] *= np.exp(-<span class="hljs-variable language_">self</span>.lambd*dt)<br>            c[<span class="hljs-string">&quot;last&quot;</span>] = <span class="hljs-variable language_">self</span>.t<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_nearest</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.clusters:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, np.inf<br>        d = [np.linalg.norm(x - c[<span class="hljs-string">&quot;center&quot;</span>]) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.clusters]<br>        j = <span class="hljs-built_in">int</span>(np.argmin(d))<br>        <span class="hljs-keyword">return</span> j, d[j]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_cleanup</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 删除长期低权重的 outlier</span><br>        keep = []<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.clusters:<br>            <span class="hljs-variable language_">self</span>._decay(c)<br>            <span class="hljs-keyword">if</span> c[<span class="hljs-string">&quot;kind&quot;</span>] == <span class="hljs-string">&quot;outlier&quot;</span> <span class="hljs-keyword">and</span> c[<span class="hljs-string">&quot;weight&quot;</span>] &lt; <span class="hljs-number">1.0</span>:<br>                <span class="hljs-keyword">continue</span><br>            keep.append(c)<br>        <span class="hljs-variable language_">self</span>.clusters = keep<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">partial_fit_predict</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-variable language_">self</span>.t += <span class="hljs-number">1</span><br>        x = np.asarray(x)<br>        j, dist = <span class="hljs-variable language_">self</span>._nearest(x)<br>        <span class="hljs-keyword">if</span> j <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> dist &gt; <span class="hljs-variable language_">self</span>.eps:<br>            <span class="hljs-comment"># 新建 outlier 微簇</span><br>            <span class="hljs-variable language_">self</span>.clusters.append(&#123;<br>                <span class="hljs-string">&quot;center&quot;</span>: x.copy(),<br>                <span class="hljs-string">&quot;weight&quot;</span>: <span class="hljs-number">1.0</span>,<br>                <span class="hljs-string">&quot;radius&quot;</span>: <span class="hljs-number">0.0</span>,<br>                <span class="hljs-string">&quot;last&quot;</span>: <span class="hljs-variable language_">self</span>.t,<br>                <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;outlier&quot;</span><br>            &#125;)<br>            cid = <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.clusters) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 吸纳</span><br>            c = <span class="hljs-variable language_">self</span>.clusters[j]<br>            <span class="hljs-variable language_">self</span>._decay(c)<br>            c[<span class="hljs-string">&quot;weight&quot;</span>] += <span class="hljs-number">1.0</span><br>            eta = <span class="hljs-number">1.0</span> / c[<span class="hljs-string">&quot;weight&quot;</span>]<br>            c[<span class="hljs-string">&quot;center&quot;</span>] = (<span class="hljs-number">1</span>-eta)*c[<span class="hljs-string">&quot;center&quot;</span>] + eta*x<br>            c[<span class="hljs-string">&quot;radius&quot;</span>] = <span class="hljs-built_in">max</span>(c[<span class="hljs-string">&quot;radius&quot;</span>], dist)<br>            c[<span class="hljs-string">&quot;kind&quot;</span>] = <span class="hljs-string">&quot;core&quot;</span> <span class="hljs-keyword">if</span> (c[<span class="hljs-string">&quot;weight&quot;</span>] &gt;= <span class="hljs-variable language_">self</span>.beta <span class="hljs-keyword">and</span> c[<span class="hljs-string">&quot;radius&quot;</span>]&lt;=<span class="hljs-variable language_">self</span>.eps) <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;potential&quot;</span><br>            cid = j<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.t % <span class="hljs-variable language_">self</span>.period == <span class="hljs-number">0</span>:<br>            <span class="hljs-variable language_">self</span>._cleanup()<br>        <span class="hljs-comment"># 以微簇索引近似作为簇ID（生产中应对 core 微簇做连通/离线聚合）</span><br>        <span class="hljs-keyword">return</span> cid<br></code></pre></td></tr></table></figure><hr><h2 id="D-HPStream（Projected-Clustering-with-Fading）"><a href="#D-HPStream（Projected-Clustering-with-Fading）" class="headerlink" title="D) HPStream（Projected Clustering with Fading）"></a><a id="d"></a>D) HPStream（Projected Clustering with Fading）</h2><h3 id="流程图-3"><a href="#流程图-3" class="headerlink" title="流程图"></a>流程图</h3><pre><code class=" mermaid">flowchart TD    X[&quot;点 x_t 到达&quot;] --&gt; W[&quot;为各簇衰减更新均值/方差/权重&quot;]    W --&gt; D[&quot;计算各维重要性（1/方差）&quot;]    D --&gt; L[&quot;为每簇选择前 l 个相关维&quot;]    L --&gt; A[&quot;在所选子空间上计算与中心距离&quot;]    A --&gt; J&#123;&quot;是否在吸纳阈值内？&quot;&#125;    J -- &quot;是&quot; --&gt; U[&quot;吸纳并增量更新统计量&quot;]    J -- &quot;否&quot; --&gt; N[&quot;新建小簇或缓冲，定期合并&quot;]    U --&gt; O[&quot;输出当前簇ID&quot;]    N --&gt; O</code></pre><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HPStream</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    HPStream 风格实现：</span><br><span class="hljs-string">    - 维护每簇衰减统计: 重心、方差、权重；</span><br><span class="hljs-string">    - 以方差倒数为维重要性，选 top-l 维作为该簇的子空间；</span><br><span class="hljs-string">    - 在子空间上做距离/吸纳；</span><br><span class="hljs-string">    - 简化了离线阶段(只做小簇合并门槛)。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, l=<span class="hljs-number">5</span>, eps=<span class="hljs-number">1.0</span>, lambd=<span class="hljs-number">0.01</span>, min_weight=<span class="hljs-number">5.0</span></span>):<br>        <span class="hljs-variable language_">self</span>.l = l<br>        <span class="hljs-variable language_">self</span>.eps = eps<br>        <span class="hljs-variable language_">self</span>.lambd = lambd<br>        <span class="hljs-variable language_">self</span>.minw = min_weight<br>        <span class="hljs-variable language_">self</span>.t = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.clusters = []  <span class="hljs-comment"># &#123;mu, var, w, last&#125;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decay</span>(<span class="hljs-params">self, c</span>):<br>        dt = <span class="hljs-variable language_">self</span>.t - c[<span class="hljs-string">&quot;last&quot;</span>]<br>        <span class="hljs-keyword">if</span> dt &gt; <span class="hljs-number">0</span>:<br>            factor = np.exp(-<span class="hljs-variable language_">self</span>.lambd * dt)<br>            c[<span class="hljs-string">&quot;w&quot;</span>] *= factor<br>            <span class="hljs-comment"># 均值保持；方差向 0 平移（简化：按同因子衰减）</span><br>            c[<span class="hljs-string">&quot;var&quot;</span>] *= factor<br>            c[<span class="hljs-string">&quot;last&quot;</span>] = <span class="hljs-variable language_">self</span>.t<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_subspace_dims</span>(<span class="hljs-params">self, c</span>):<br>        <span class="hljs-comment"># 重要性 ~ 1 / (var + 1e-6)</span><br>        score = <span class="hljs-number">1.0</span> / (c[<span class="hljs-string">&quot;var&quot;</span>] + <span class="hljs-number">1e-6</span>)<br>        <span class="hljs-keyword">return</span> np.argsort(-score)[:<span class="hljs-variable language_">self</span>.l]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_dist_subspace</span>(<span class="hljs-params">self, x, c, dims</span>):<br>        d = x[dims] - c[<span class="hljs-string">&quot;mu&quot;</span>][dims]<br>        <span class="hljs-keyword">return</span> np.linalg.norm(d)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">partial_fit_predict</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-variable language_">self</span>.t += <span class="hljs-number">1</span><br>        x = np.asarray(x)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.clusters:<br>            <span class="hljs-variable language_">self</span>.clusters.append(&#123;<br>                <span class="hljs-string">&quot;mu&quot;</span>: x.copy(),<br>                <span class="hljs-string">&quot;var&quot;</span>: np.ones_like(x)*<span class="hljs-number">1e-2</span>,<br>                <span class="hljs-string">&quot;w&quot;</span>: <span class="hljs-number">1.0</span>,<br>                <span class="hljs-string">&quot;last&quot;</span>: <span class="hljs-variable language_">self</span>.t<br>            &#125;)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 尝试吸纳最近簇（在其子空间）</span><br>        best, bd = <span class="hljs-literal">None</span>, np.inf<br>        <span class="hljs-keyword">for</span> i, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-variable language_">self</span>.clusters):<br>            <span class="hljs-variable language_">self</span>._decay(c)<br>            dims = <span class="hljs-variable language_">self</span>._subspace_dims(c)<br>            d = <span class="hljs-variable language_">self</span>._dist_subspace(x, c, dims)<br>            <span class="hljs-keyword">if</span> d &lt; bd:<br>                bd, best = d, i<br>        <span class="hljs-keyword">if</span> bd &lt;= <span class="hljs-variable language_">self</span>.eps:<br>            c = <span class="hljs-variable language_">self</span>.clusters[best]<br>            c[<span class="hljs-string">&quot;w&quot;</span>] += <span class="hljs-number">1.0</span><br>            eta = <span class="hljs-number">1.0</span> / c[<span class="hljs-string">&quot;w&quot;</span>]<br>            delta = x - c[<span class="hljs-string">&quot;mu&quot;</span>]<br>            c[<span class="hljs-string">&quot;mu&quot;</span>] += eta * delta<br>            c[<span class="hljs-string">&quot;var&quot;</span>] = (<span class="hljs-number">1</span>-eta)*c[<span class="hljs-string">&quot;var&quot;</span>] + eta*(delta**<span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">return</span> best<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 新建小簇</span><br>            <span class="hljs-variable language_">self</span>.clusters.append(&#123;<br>                <span class="hljs-string">&quot;mu&quot;</span>: x.copy(),<br>                <span class="hljs-string">&quot;var&quot;</span>: np.ones_like(x)*<span class="hljs-number">1e-2</span>,<br>                <span class="hljs-string">&quot;w&quot;</span>: <span class="hljs-number">1.0</span>,<br>                <span class="hljs-string">&quot;last&quot;</span>: <span class="hljs-variable language_">self</span>.t<br>            &#125;)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.clusters)-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr><h2 id="E-EDSSC（动态稀疏子空间聚类-for-演化高维流）"><a href="#E-EDSSC（动态稀疏子空间聚类-for-演化高维流）" class="headerlink" title="E) EDSSC（动态稀疏子空间聚类 for 演化高维流）"></a><a id="e"></a>E) EDSSC（动态稀疏子空间聚类 for 演化高维流）</h2><h3 id="流程图-4"><a href="#流程图-4" class="headerlink" title="流程图"></a>流程图</h3><pre><code class=" mermaid">flowchart TD    S[&quot;静态缓冲数据 X0&quot;] --&gt; L[&quot;Lasso 自表达求 C&quot;]    L --&gt; W[&quot;构亲和矩阵（|C|+|C^T|）并谱聚类&quot;]    W --&gt; B[&quot;每簇做 PCA 得到子空间基 U_k&quot;]    B --&gt; R[&quot;进入在线阶段&quot;]    R --&gt; X[&quot;新样本 x_t&quot;]    X --&gt; E[&quot;到各子空间的残差 r_k&quot;]    E --&gt; D&#123;&quot;min(r_k) 是否 &lt; 阈值 τ？&quot;&#125;    D -- &quot;是&quot; --&gt; A[&quot;分配给子空间 k，并做增量 PCA 更新&quot;]    D -- &quot;否&quot; --&gt; N[&quot;创建新子空间 / 触发分裂&quot;]    A --&gt; O[&quot;输出子空间ID&quot;]    N --&gt; O</code></pre><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> Lasso<br><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> SpectralClustering<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EDSSC</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    EDSSC 风格实现：</span><br><span class="hljs-string">    - 预热窗口做 Lasso 自表达 + 谱聚类 -&gt; 初始子空间；</span><br><span class="hljs-string">    - 在线阶段用残差到子空间基的最小值进行分配；</span><br><span class="hljs-string">    - 子空间基用简易增量PCA更新（Oja风格）。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, alpha=<span class="hljs-number">0.01</span>, n_init_subspaces=<span class="hljs-number">5</span>, subspace_rank=<span class="hljs-number">5</span>, tau=<span class="hljs-number">0.5</span>, lr=<span class="hljs-number">0.05</span></span>):<br>        <span class="hljs-variable language_">self</span>.alpha = alpha<br>        <span class="hljs-variable language_">self</span>.K = n_init_subspaces<br>        <span class="hljs-variable language_">self</span>.r = subspace_rank<br>        <span class="hljs-variable language_">self</span>.tau = tau<br>        <span class="hljs-variable language_">self</span>.lr = lr<br>        <span class="hljs-variable language_">self</span>.bases = []  <span class="hljs-comment"># list of U_k (d x r)</span><br>        <span class="hljs-variable language_">self</span>.labels_ = <span class="hljs-literal">None</span><br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_normalize</span>(<span class="hljs-params">X</span>):<br>        n = np.linalg.norm(X, axis=<span class="hljs-number">0</span>) + <span class="hljs-number">1e-8</span><br>        <span class="hljs-keyword">return</span> X / n<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_self_expressive</span>(<span class="hljs-params">self, X</span>):<br>        <span class="hljs-comment"># 求解 X ≈ X C, 对每列做 Lasso（排除自身）</span><br>        n = X.shape[<span class="hljs-number">1</span>]<br>        C = np.zeros((n, n))<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            Xi = np.delete(X, i, axis=<span class="hljs-number">1</span>)<br>            yi = X[:, i]<br>            lasso = Lasso(alpha=<span class="hljs-variable language_">self</span>.alpha, fit_intercept=<span class="hljs-literal">False</span>, max_iter=<span class="hljs-number">2000</span>)<br>            lasso.fit(Xi, yi)<br>            coef = lasso.coef_<br>            C[:i, i] = coef[:i]<br>            C[i+<span class="hljs-number">1</span>:, i] = coef[i:]<br>        <span class="hljs-keyword">return</span> C<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_spectral_cluster</span>(<span class="hljs-params">self, C, K</span>):<br>        W = np.<span class="hljs-built_in">abs</span>(C) + np.<span class="hljs-built_in">abs</span>(C.T)<br>        sc = SpectralClustering(n_clusters=K, affinity=<span class="hljs-string">&#x27;precomputed&#x27;</span>, assign_labels=<span class="hljs-string">&#x27;kmeans&#x27;</span>)<br>        y = sc.fit_predict(W)<br>        <span class="hljs-keyword">return</span> y<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_init_bases</span>(<span class="hljs-params">self, X, y</span>):<br>        d = X.shape[<span class="hljs-number">0</span>]<br>        <span class="hljs-variable language_">self</span>.bases = []<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.K):<br>            Xk = X[:, y==k]<br>            <span class="hljs-keyword">if</span> Xk.shape[<span class="hljs-number">1</span>] &lt; <span class="hljs-variable language_">self</span>.r:<br>                <span class="hljs-comment"># 不足 r 列时，做零填充</span><br>                U = np.eye(d, <span class="hljs-variable language_">self</span>.r)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># PCA: top-r 左奇异向量</span><br>                U, _, _ = np.linalg.svd(Xk, full_matrices=<span class="hljs-literal">False</span>)<br>                U = U[:, :<span class="hljs-variable language_">self</span>.r]<br>            <span class="hljs-variable language_">self</span>.bases.append(U)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fit_init</span>(<span class="hljs-params">self, X0</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;静态预热阶段。</span><br><span class="hljs-string">        X0: d x n0&quot;&quot;&quot;</span><br>        X0 = <span class="hljs-variable language_">self</span>._normalize(X0)<br>        C = <span class="hljs-variable language_">self</span>._self_expressive(X0)<br>        y = <span class="hljs-variable language_">self</span>._spectral_cluster(C, <span class="hljs-variable language_">self</span>.K)<br>        <span class="hljs-variable language_">self</span>._init_bases(X0, y)<br>        <span class="hljs-variable language_">self</span>.labels_ = y<br>        <span class="hljs-keyword">return</span> y<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_residuals</span>(<span class="hljs-params">self, x</span>):<br>        rs = []<br>        <span class="hljs-keyword">for</span> U <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.bases:<br>            proj = U @ (U.T @ x)<br>            rs.append(np.linalg.norm(x - proj))<br>        <span class="hljs-keyword">return</span> np.array(rs)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_update_basis</span>(<span class="hljs-params">self, k, x</span>):<br>        <span class="hljs-comment"># Oja 风格增量PCA: 对 U 做一小步朝向 x 的投影子空间更新</span><br>        U = <span class="hljs-variable language_">self</span>.bases[k]<br>        proj = U @ (U.T @ x)<br>        err = x - proj<br>        U_new = U + <span class="hljs-variable language_">self</span>.lr * np.outer(err, (U.T @ x))<br>        <span class="hljs-comment"># 正交化</span><br>        q, _ = np.linalg.qr(U_new)<br>        <span class="hljs-variable language_">self</span>.bases[k] = q[:, :<span class="hljs-variable language_">self</span>.r]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">partial_fit_predict</span>(<span class="hljs-params">self, x</span>):<br>        x = x / (np.linalg.norm(x) + <span class="hljs-number">1e-8</span>)<br>        rs = <span class="hljs-variable language_">self</span>._residuals(x)<br>        k = <span class="hljs-built_in">int</span>(np.argmin(rs))<br>        <span class="hljs-keyword">if</span> rs[k] &lt; <span class="hljs-variable language_">self</span>.tau:<br>            <span class="hljs-variable language_">self</span>._update_basis(k, x)<br>            <span class="hljs-keyword">return</span> k<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 新子空间：以 x 为起点（若需要可设最大子空间数/合并策略）</span><br>            d = x.shape[<span class="hljs-number">0</span>]<br>            U = np.zeros((d, <span class="hljs-variable language_">self</span>.r))<br>            U[:, <span class="hljs-number">0</span>] = x / (np.linalg.norm(x) + <span class="hljs-number">1e-8</span>)<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-variable language_">self</span>.r):<br>                <span class="hljs-comment"># 随机正交补（简易）</span><br>                v = np.random.randn(d)<br>                v -= U[:, :j] @ (U[:, :j].T @ v)<br>                U[:, j] = v / (np.linalg.norm(v) + <span class="hljs-number">1e-8</span>)<br>            <span class="hljs-variable language_">self</span>.bases.append(U)<br>            <span class="hljs-variable language_">self</span>.K += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.K - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="F-流数据聚类总结"><a href="#F-流数据聚类总结" class="headerlink" title="F) 流数据聚类总结"></a><a id="f"></a>F) 流数据聚类总结</h2><p>事实上，这几个算法无非就是在线维护、动态插入并调整思路的几种不同的呈现形式，这种思路的确最受欢迎，在这种思路上逐渐改动确实是较为省力且讨巧的方法。自然，这些算法存在共性问题：</p><p><strong>稳定–敏捷两难（遗忘&#x2F;衰减的权衡）</strong><br> 衰减快：对新模式灵敏但簇抖动、遗忘历史；衰减慢：稳定但跟不上漂移，出现滞后与过时簇占内存。</p><p><strong>超参敏感且在线难调</strong><br> 半径&#x2F;密度阈值、网格粒度、衰减系数、子空间维数&#x2F;秩、残差阈值等对结果影响巨大，而在线场景缺少可靠的即时监督信号来调参。</p><p><strong>可扩展性与内存控制</strong></p><p>高频流 + 高维度 → 网格&#x2F;微簇数量暴涨；自表达&#x2F;谱分解在长时运行有累积成本。</p><p>每个算法也存在着不同的适应场景与独特优缺点：</p><p>DenStream&#x2F;网格法在早期样本少、密度不稳定；EDSSC 需要<strong>预热窗口</strong>做自表达与谱聚类；CEDGM&#x2F;网格法需要维护核心格或CMC的连通&#x2F;相交图；若簇数量大或频繁变化，增量更新可能成为瓶颈…</p><p>所以，我们能做些什么以求改进呢？我也不清楚（要是我知道就不在这敲这篇不知道有没有用处的blog了…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Rust-base-learning-5</title>
    <link href="/2025/10/12/Rust-base-learning-5/"/>
    <url>/2025/10/12/Rust-base-learning-5/</url>
    
    <content type="html"><![CDATA[<p>·</p><h1 id="Rust基础学习–（五）"><a href="#Rust基础学习–（五）" class="headerlink" title="Rust基础学习–（五）"></a>Rust基础学习–（五）</h1><h2 id="十一、动态数组-Vector"><a href="#十一、动态数组-Vector" class="headerlink" title="十一、动态数组 Vector"></a>十一、动态数组 Vector</h2><p>时隔三个月，rust base learning又被捡起来了嘻嘻（）实则舍友开始学rust，被卷到了所以捡起来了…回归正题。</p><p>vector实际上在cpp里经常见到了，这么好用的功能居然在这么<del>恶心</del>的语言里有，良心了。</p><h3 id="1、创建动态数组"><a href="#1、创建动态数组" class="headerlink" title="1、创建动态数组"></a>1、创建动态数组</h3><h4 id="vec-new"><a href="#vec-new" class="headerlink" title="vec::new"></a>vec::new</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">v</span>: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt; = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();<br></code></pre></td></tr></table></figure><p>最经典的创建方式，如果不显式标注数据类型，编译器并不能得知其中的数据类型，我们可以通过输入一共数据的方式【即v.push(1);】</p><p>（如果预先知道要存储的元素个数，可以使用 <code>Vec::with_capacity(capacity)</code> 创建动态数组，这样可以避免因为插入大量新数据导致频繁的内存分配和拷贝，提升性能）</p><h4 id="vec"><a href="#vec" class="headerlink" title="vec![]"></a>vec![]</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br></code></pre></td></tr></table></figure><h3 id="2、更新vector"><a href="#2、更新vector" class="headerlink" title="2、更新vector"></a>2、更新vector</h3><p>使用push方法即可，同样需要声明为mut</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();<br>v.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>注：作用域和结构体一样，超过{}即会自动删除</p><h3 id="3、读取元素"><a href="#3、读取元素" class="headerlink" title="3、读取元素"></a>3、读取元素</h3><h4 id="下标索引＆get方法"><a href="#下标索引＆get方法" class="headerlink" title="下标索引＆get方法"></a>下标索引＆get方法</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><br><span class="hljs-keyword">let</span> <span class="hljs-variable">third</span>: &amp;<span class="hljs-type">i32</span> = &amp;v[<span class="hljs-number">2</span>];<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;第三个元素是 &#123;&#125;&quot;</span>, third);<br><br><span class="hljs-keyword">match</span> v.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-title function_ invoke__">Some</span>(third) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;第三个元素是 &#123;third&#125;&quot;</span>),<br>    <span class="hljs-literal">None</span> =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;nop！&quot;</span>),<br>&#125;<br></code></pre></td></tr></table></figure><p>二者均可，下标越界即造成报错，而get()方法不会报错，会返回none</p><p>显然，get()更安全，对应下标更高效</p><h4 id="同时借用多个元素"><a href="#同时借用多个元素" class="headerlink" title="同时借用多个元素"></a>同时借用多个元素</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> <span class="hljs-variable">first</span> = &amp;v[<span class="hljs-number">0</span>];<br>v.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-number">6</span>);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The first element is: &#123;first&#125;&quot;</span>);<br></code></pre></td></tr></table></figure><p>因为let first &#x3D; &amp;v[0];是个不可变借用，而v.push(6);是个可变借用，所以可以编译，但是由于在使用了可变借用之后又调用了first，这是因为数组的大小是可变的，当旧数组的大小不够用时，Rust 会重新分配一块更大的内存空间，然后把旧数组拷贝过来。这种情况下，之前的引用显然会指向一块无效的内存</p><h4 id="迭代遍历元素"><a href="#迭代遍历元素" class="headerlink" title="迭代遍历元素"></a>迭代遍历元素</h4><p>允许这样迭代元素，同时也可以进行修改元素的操作</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> &amp;v &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;i&#125;&quot;</span>);<br>    *i += <span class="hljs-number">10</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、存储不同类型元素"><a href="#4、存储不同类型元素" class="headerlink" title="4、存储不同类型元素"></a>4、存储不同类型元素</h3><h4 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">IpAddr</span> &#123;<br>    <span class="hljs-title function_ invoke__">V4</span>(<span class="hljs-type">String</span>),<br>    <span class="hljs-title function_ invoke__">V6</span>(<span class="hljs-type">String</span>)<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<br>        IpAddr::<span class="hljs-title function_ invoke__">V4</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()),<br>        IpAddr::<span class="hljs-title function_ invoke__">V6</span>(<span class="hljs-string">&quot;::1&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>())<br>    ];<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">ip</span> <span class="hljs-keyword">in</span> v &#123;<br>        <span class="hljs-title function_ invoke__">show_addr</span>(ip)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">show_addr</span>(ip: IpAddr) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>,ip);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="特征对象"><a href="#特征对象" class="headerlink" title="特征对象"></a>特征对象</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">IpAddr</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">display</span>(&amp;<span class="hljs-keyword">self</span>);<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">V4</span>(<span class="hljs-type">String</span>);<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">IpAddr</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">V4</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">display</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;ipv4: &#123;:?&#125;&quot;</span>,<span class="hljs-keyword">self</span>.<span class="hljs-number">0</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">V6</span>(<span class="hljs-type">String</span>);<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">IpAddr</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">V6</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">display</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;ipv6: &#123;:?&#125;&quot;</span>,<span class="hljs-keyword">self</span>.<span class="hljs-number">0</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span>: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> IpAddr&gt;&gt; = <span class="hljs-built_in">vec!</span>[<br>        <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-title function_ invoke__">V4</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>())),<br>        <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-title function_ invoke__">V6</span>(<span class="hljs-string">&quot;::1&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>())),<br>    ];<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">ip</span> <span class="hljs-keyword">in</span> v &#123;<br>        ip.<span class="hljs-title function_ invoke__">display</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>特征对象数组远多于枚举数组，这是因为特征对象数组可以动态增加类型</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">with_capacity</span>(<span class="hljs-number">10</span>);<br>    v.<span class="hljs-title function_ invoke__">extend</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);    <span class="hljs-comment">// 附加数据到 v</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Vector 长度是: &#123;&#125;, 容量是: &#123;&#125;&quot;</span>, v.<span class="hljs-title function_ invoke__">len</span>(), v.<span class="hljs-title function_ invoke__">capacity</span>());<br><br>    v.<span class="hljs-title function_ invoke__">reserve</span>(<span class="hljs-number">100</span>);        <span class="hljs-comment">// 调整 v 的容量，至少要有 100 的容量</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Vector（reserve） 长度是: &#123;&#125;, 容量是: &#123;&#125;&quot;</span>, v.<span class="hljs-title function_ invoke__">len</span>(), v.<span class="hljs-title function_ invoke__">capacity</span>());<br><br>    v.<span class="hljs-title function_ invoke__">shrink_to_fit</span>();     <span class="hljs-comment">// 释放剩余的容量，一般情况下，不会主动去释放容量</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Vector（shrink_to_fit） 长度是: &#123;&#125;, 容量是: &#123;&#125;&quot;</span>, v.<span class="hljs-title function_ invoke__">len</span>(), v.<span class="hljs-title function_ invoke__">capacity</span>());<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v</span> =  <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><span class="hljs-built_in">assert!</span>(!v.<span class="hljs-title function_ invoke__">is_empty</span>());         <span class="hljs-comment">// 检查 v 是否为空</span><br><br>v.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);                 <span class="hljs-comment">// 在指定索引插入数据，索引值不能大于 v 的长度， v: [1, 2, 3] </span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">slice</span> = &amp;v[<span class="hljs-number">1</span>..=<span class="hljs-number">2</span>];<span class="hljs-comment">//可以以这种像数组切片的方式获取 vec 的部分元素</span><br><span class="hljs-built_in">assert_eq!</span>(slice, &amp;[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><span class="hljs-built_in">assert_eq!</span>(v.<span class="hljs-title function_ invoke__">remove</span>(<span class="hljs-number">1</span>), <span class="hljs-number">2</span>);     <span class="hljs-comment">// 移除指定位置的元素并返回, v: [1, 3]</span><br><span class="hljs-built_in">assert_eq!</span>(v.<span class="hljs-title function_ invoke__">pop</span>(), <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">3</span>));   <span class="hljs-comment">// 删除并返回 v 尾部的元素，v: [1]</span><br><span class="hljs-built_in">assert_eq!</span>(v.<span class="hljs-title function_ invoke__">pop</span>(), <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">1</span>));   <span class="hljs-comment">// v: []</span><br><span class="hljs-built_in">assert_eq!</span>(v.<span class="hljs-title function_ invoke__">pop</span>(), <span class="hljs-literal">None</span>);      <span class="hljs-comment">// 记得 pop 方法返回的是 Option 枚举值</span><br>v.<span class="hljs-title function_ invoke__">clear</span>();                      <span class="hljs-comment">// 清空 v, v: []</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v1</span> = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>].<span class="hljs-title function_ invoke__">to_vec</span>(); <span class="hljs-comment">// append 操作会导致 v1 清空数据，增加可变声明</span><br>v.<span class="hljs-title function_ invoke__">append</span>(&amp;<span class="hljs-keyword">mut</span> v1);              <span class="hljs-comment">// 将 v1 中的所有元素附加到 v 中, v1: []</span><br>v.<span class="hljs-title function_ invoke__">truncate</span>(<span class="hljs-number">1</span>);                  <span class="hljs-comment">// 截断到指定长度，多余的元素被删除, v: [11]</span><br>v.<span class="hljs-title function_ invoke__">retain</span>(|x| *x &gt; <span class="hljs-number">10</span>);          <span class="hljs-comment">// 保留满足条件的元素，即删除不满足条件的元素</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>];<br><span class="hljs-comment">// 删除指定范围的元素，同时获取被删除元素的迭代器, v: [11, 55], m: [22, 33, 44]</span><br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">m</span>: <span class="hljs-type">Vec</span>&lt;_&gt; = v.<span class="hljs-title function_ invoke__">drain</span>(<span class="hljs-number">1</span>..=<span class="hljs-number">3</span>).<span class="hljs-title function_ invoke__">collect</span>();    <br><br><span class="hljs-keyword">let</span> <span class="hljs-variable">v2</span> = m.<span class="hljs-title function_ invoke__">split_off</span>(<span class="hljs-number">1</span>);        <span class="hljs-comment">// 指定索引处切分成两个 vec, m: [22], v2: [33, 44]</span><br></code></pre></td></tr></table></figure><p>排序：</p><p>分为稳定的排序 <code>sort</code> 和 <code>sort_by</code>，以及非稳定排序 <code>sort_unstable</code> 和 <code>sort_unstable_by</code>。总体而言，非稳定排序的算法的速度会优于 稳定排序算法，同时，稳定排序还会额外分配原数组一半的空间。</p><p>但是，对于浮点数的排序并不一定可以实现，报错可能来自浮点数的nan值，无法与其他浮点数对比，浮点数的ord全序可比较性rust都没做到，只能做到PartialOrd偏序可比较性！</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">vec</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1.0</span>, <span class="hljs-number">5.6</span>, <span class="hljs-number">10.3</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">15f32</span>];    <br>    vec.<span class="hljs-title function_ invoke__">sort_unstable</span>();    <br>    <span class="hljs-built_in">assert_eq!</span>(vec, <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">5.6</span>, <span class="hljs-number">10.3</span>, <span class="hljs-number">15f32</span>]);<br>&#125;<span class="hljs-comment">//报错！</span><br></code></pre></td></tr></table></figure><p>【我查了一下，其他语言基本都有制定规则，像<strong>Java</strong>：<code>Double.compare</code>&#x2F;<code>Double::compareTo</code> 明确规定了<strong>全序</strong>：</p><ul><li>视 <code>NaN</code> 为等于自身，且<strong>大于</strong>所有其他 <code>double</code>（含 <code>+∞</code>）；</li><li>规定 <code>+0.0 &gt; -0.0</code>。</li></ul><p>其实，rust不规定全序反而更加安全合理，可以避免一些极端问题出现，当然，我们可以通过其他方式（见下代码）使其强制可比较</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">vec</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1.0</span>, <span class="hljs-number">5.6</span>, <span class="hljs-number">10.3</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">15f32</span>];    <br>    vec.<span class="hljs-title function_ invoke__">sort_unstable_by</span>(|a, b| a.<span class="hljs-title function_ invoke__">partial_cmp</span>(b).<span class="hljs-title function_ invoke__">unwrap</span>());    <br>    <span class="hljs-built_in">assert_eq!</span>(vec, <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">5.6</span>, <span class="hljs-number">10.3</span>, <span class="hljs-number">15f32</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>】</p><p>结构体同样可以使用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span> &#123;<br>    name: <span class="hljs-type">String</span>,<br>    age: <span class="hljs-type">u32</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(name: <span class="hljs-type">String</span>, age: <span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> Person &#123;<br>        Person &#123; name, age &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">people</span> = <span class="hljs-built_in">vec!</span>[<br>        Person::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;Zoe&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(), <span class="hljs-number">25</span>),<br>        Person::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;Al&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(), <span class="hljs-number">60</span>),<br>        Person::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;John&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(), <span class="hljs-number">1</span>),<br>    ];<br>    <span class="hljs-comment">// 定义一个按照年龄倒序排序的对比函数</span><br>    people.<span class="hljs-title function_ invoke__">sort_unstable_by</span>(|a, b| b.age.<span class="hljs-title function_ invoke__">cmp</span>(&amp;a.age));<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, people);<br>&#125;<br></code></pre></td></tr></table></figure><p>自然，我们可以drive <code>Ord</code>、<code>Eq</code>、<code>PartialEq</code>、<code>PartialOrd</code> 这些属性，使很多原本PartialOrd的数据类型实现ord。</p><p>这样我们就可以比较结构体，这时候需要确保你的结构体中所有的属性均实现了 <code>Ord</code> 相关特性</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug, Ord, Eq, PartialEq, PartialOrd)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span> &#123;<br>    name: <span class="hljs-type">String</span>,<br>    age: <span class="hljs-type">u32</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(name: <span class="hljs-type">String</span>, age: <span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> Person &#123;<br>        Person &#123; name, age &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">people</span> = <span class="hljs-built_in">vec!</span>[<br>        Person::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;Zoe&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(), <span class="hljs-number">25</span>),<br>        Person::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;Al&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(), <span class="hljs-number">60</span>),<br>        Person::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;Al&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(), <span class="hljs-number">30</span>),<br>        Person::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;John&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(), <span class="hljs-number">1</span>),<br>        Person::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;John&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(), <span class="hljs-number">25</span>),<br>    ];<br><br>    people.<span class="hljs-title function_ invoke__">sort_unstable</span>();<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, people);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>derive</code> 的默认实现会依据属性的顺序依次进行比较，如上述例子中，当 <code>Person</code> 的 <code>name</code> 值相同，则会使用 <code>age</code> 进行比较。</p><h2 id="十二、KV-存储-HashMap"><a href="#十二、KV-存储-HashMap" class="headerlink" title="十二、KV 存储 HashMap"></a>十二、KV 存储 HashMap</h2><p>与vector的区别在于：存储的是一一映射的KV键值对，并且提供了平均复杂度为 <code>O(1)</code> 的查询方法，也就是可以通过一个key去快速查询值。</p><h3 id="1、创建"><a href="#1、创建" class="headerlink" title="1、创建"></a>1、创建</h3><h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><p>同样可以使用new方法创建，通过insert方法插入</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><br><span class="hljs-comment">// 创建一个HashMap，用于存储宝石种类和对应的数量</span><br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">my_gems</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br><br><span class="hljs-comment">// 将宝石类型和对应的数量写入表中</span><br>my_gems.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-string">&quot;红宝石&quot;</span>, <span class="hljs-number">1</span>);<br>my_gems.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-string">&quot;蓝宝石&quot;</span>, <span class="hljs-number">2</span>);<br>my_gems.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-string">&quot;河边捡的误以为是宝石的破石头&quot;</span>, <span class="hljs-number">18</span>);<br></code></pre></td></tr></table></figure><p>熟悉的感觉，区别就是需要  <code>use std::collections::HashMap;</code>将其引入作用域，这是因为hashmap并没有和string和vector一样被自动引入到作用域。</p><h4 id="使用迭代器和collect创建"><a href="#使用迭代器和collect创建" class="headerlink" title="使用迭代器和collect创建"></a>使用迭代器和collect创建</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">use</span> std::collections::HashMap;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">teams_list</span> = <span class="hljs-built_in">vec!</span>[<br>        (<span class="hljs-string">&quot;中国队&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(), <span class="hljs-number">100</span>),<br>        (<span class="hljs-string">&quot;美国队&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(), <span class="hljs-number">10</span>),<br>        (<span class="hljs-string">&quot;日本队&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(), <span class="hljs-number">50</span>),<br>    ];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">teams_map</span>: HashMap&lt;_,_&gt; = teams_list.<span class="hljs-title function_ invoke__">into_iter</span>().<span class="hljs-title function_ invoke__">collect</span>();<br>    <br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>,teams_map)<br>&#125;<br></code></pre></td></tr></table></figure><p>从另一个数据结构中获取数据并且存储时，可以通过这种方式，极大简化过程</p><h3 id="所有权转移"><a href="#所有权转移" class="headerlink" title="所有权转移"></a>所有权转移</h3><p>所有权规则：</p><ul><li>若类型实现 <code>Copy</code> 特征，该类型会被复制进 <code>HashMap</code>，因此无所谓所有权</li><li>若没实现 <code>Copy</code> 特征，所有权将被转移给 <code>HashMap</code> 中</li></ul><p>另外，值得新人吐槽的是，使用引用类型放入hashmap时，需要保证该引用的生命周期和hashmap一样长，否则报错；同时又不能直接再次使用该引用类型，否则同样报错…</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">use</span> std::collections::HashMap;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">name</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;h2q&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">age</span> = <span class="hljs-number">18</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">handsome_boys</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    handsome_boys.<span class="hljs-title function_ invoke__">insert</span>(name, age);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;想什么呢，&#123;&#125;xnn怎么能是handsomeboy呢&quot;</span>, name);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;还有，他的真实年龄远远不止&#123;&#125;岁&quot;</span>, age);<br>    std::mem::<span class="hljs-title function_ invoke__">drop</span>(name);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;自然，&#123;:?&#125;已经被从handsomeboy中除名&quot;</span>, handsome_boys);<br>&#125;<br></code></pre></td></tr></table></figure><p>是的，这两个都会报错，悲</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>机器学习-可扩展流形学习方法SUDE</title>
    <link href="/2025/09/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%8F%AF%E6%89%A9%E5%B1%95%E6%B5%81%E5%BD%A2%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95SUDE/"/>
    <url>/2025/09/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%8F%AF%E6%89%A9%E5%B1%95%E6%B5%81%E5%BD%A2%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95SUDE/</url>
    
    <content type="html"><![CDATA[<p>·</p><h2 id="一、前置知识"><a href="#一、前置知识" class="headerlink" title="一、前置知识"></a>一、前置知识</h2><h3 id="1、-K-近邻集合（KNN）"><a href="#1、-K-近邻集合（KNN）" class="headerlink" title="1、 K 近邻集合（KNN）"></a>1、 K 近邻集合（KNN）</h3><p><strong>定义</strong>：给定一个点 xix_ixi 与正整数 KKK，它的 K 近邻集合<br>$$<br>\mathcal{N}<em>K(i) &#x3D; \operatorname*{arg,Kmin}</em>{j \neq i} ; d_{ij}<br>$$<br>即与 xix_ixi 距离最小的 KKK 个样本的索引集合（实现里通常包含自邻居）</p><h3 id="2、反近邻计数（RNN）"><a href="#2、反近邻计数（RNN）" class="headerlink" title="2、反近邻计数（RNN）"></a>2、反近邻计数（RNN）</h3><p><strong>定义</strong>：一个点 x_u 的 RNN 计数是<br>$$<br>\mathrm{RNN}(u)&#x3D;\left|\left{,i\in{1,\dots,N};\big|; u\in \mathcal{N}_{k_1}(i)\right}\right|<br>$$<br>也就是“有多少别人的 KNN 集合把它包含进去”。RNN 能反映<strong>枢纽点（hub）</strong>：在高维&#x2F;不均匀数据中，某些点会频繁出现在他人的近邻里，RNN 值大。</p><h3 id="3、共享近邻（SNN）"><a href="#3、共享近邻（SNN）" class="headerlink" title="3、共享近邻（SNN）"></a>3、共享近邻（SNN）</h3><p><strong>核心思想</strong>：如果两个点 i,ji,ji,j 的邻居集合高度重合，那么它们“相似”的证据更强。</p><p><strong>定义（加权版）</strong>：设<br>$$<br>N_i &#x3D; \mathcal{N}<em>{k_1}(i)、N_j &#x3D; \mathcal{N}</em>{k_1}(j)<br>$$<br>用 RNN 作为共享邻居的权重，则<br>$$<br>\mathrm{SNN}<em>{ij} &#x3D; \sum</em>{u \in N_i \cap N_j} w(u),<br>\quad w(u) &#x3D; \mathrm{RNN}(u)<br>$$<br>代码实现：对固定的 i，把每个候选 j 与 i 是否“共享近邻”转成 0&#x2F;1 指示（<code>np.isin(...).astype(int)</code>），再把被共享的邻居位置用 <code>rnn</code> 加权并对行求和，得到行向量 <code>snn[i,·]</code>。</p><h3 id="4、SNN-强度的归一化"><a href="#4、SNN-强度的归一化" class="headerlink" title="4、SNN 强度的归一化"></a>4、SNN 强度的归一化</h3><p><strong>为什么要归一化</strong>：不同 iii 的 SNN 数值尺度不同（取决于 Ni 的大小&#x2F;密度&#x2F;枢纽分布），直接拿来缩放距离不稳。</p><p>我们不妨做个测试来验证SNN归一化的必要性：</p><p>这是原本的散点图（测试数据集）</p><p><img src="/img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%8F%AF%E6%89%A9%E5%B1%95%E6%B5%81%E5%BD%A2%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95SUDE/%E6%95%A3%E7%82%B9%E5%9B%BE.png" alt="散点图"></p><p>这是未经过归一化处理后的SNN</p><p><img src="/img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%8F%AF%E6%89%A9%E5%B1%95%E6%B5%81%E5%BD%A2%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95SUDE/%E5%8E%9F%E5%A7%8B%E7%83%AD%E5%8A%9B%E5%9B%BE.png" alt="原始热力图"></p><p>这是经过归一化处理的SNN</p><p><img src="/img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%8F%AF%E6%89%A9%E5%B1%95%E6%B5%81%E5%BD%A2%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95SUDE/%E5%BD%92%E4%B8%80%E7%83%AD%E5%8A%9B%E5%9B%BE.png" alt="归一热力图"></p><p>显而易见，归一化处理后不同 i 的数值被压到相同尺度 [0,1]，便于后续用来“软缩放”距离。</p><h3 id="5、软缩放距离"><a href="#5、软缩放距离" class="headerlink" title="5、软缩放距离"></a>5、软缩放距离</h3><p><strong>目的</strong>：共享近邻越强（越像同类），就把它们的高维距离<strong>乘一个小因子</strong>缩短；共享弱的点对则缩放因子接近 1，几乎不变。</p><p><strong>定义</strong>：给定原始欧氏距离 与归一化后的SNN<br>$$<br>d_{ij} 、\tilde{\mathrm{SNN}}<em>{ij}<br>$$<br>定义<br>$$<br>\tilde{\mathrm{d}}</em>{ij}​&#x3D;(1−\tilde{\mathrm{SNN}}{ij}​)agg_coef⋅d_{ij}​,agg_coef&gt;0.<br>$$<br>性质：</p><p><img src="/img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%8F%AF%E6%89%A9%E5%B1%95%E6%B5%81%E5%BD%A2%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95SUDE/1.bmp" alt="1"></p><h3 id="6、自适应带宽"><a href="#6、自适应带宽" class="headerlink" title="6、自适应带宽"></a>6、自适应带宽</h3><p><strong>目的</strong>：在密度不均匀的数据上，让每个点有自己的“局部尺度”，避免用全局 σ造成稠密区过拟合&#x2F;稀疏区欠拟合。</p><p><strong>定义</strong>：对每个 i，用它<strong>经软缩放后的</strong>最近 k2个距离的<strong>均值</strong>当作局部尺度，再<strong>平方</strong>得到方差：<br>$$<br>\sigma_i^2 ;&#x3D;; \left( \frac{1}{k_2} \sum_{j \in \mathcal{N}<em>{k_2}^{(\mathrm{mod})}(i)} \tilde{d}</em>{ij} \right)^2<br>$$<br>在稠密区，σi 小，核变“窄”，只加强很近的点；在稀疏区，σi 大，核“宽”，避免把一切都判为极不相似。</p><h3 id="7、高斯核相似度"><a href="#7、高斯核相似度" class="headerlink" title="7、高斯核相似度"></a>7、高斯核相似度</h3><p>公式：<br>$$<br>P_{ij} ;\propto; \exp!\left(-\tfrac{1}{2}\tfrac{\tilde{d}<em>{ij}^2}{\sigma_i^2}\right),<br>\qquad j \in \mathcal{N}</em>{k_2}^{(\mathrm{mod})}(i)<br>$$<br>其他位置为 0（保持稀疏）。</p><p><img src="/img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%8F%AF%E6%89%A9%E5%B1%95%E6%B5%81%E5%BD%A2%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95SUDE/2.bmp" alt="2"></p><h3 id="8、稀疏矩阵的-CSR-表示"><a href="#8、稀疏矩阵的-CSR-表示" class="headerlink" title="8、稀疏矩阵的 CSR 表示"></a>8、稀疏矩阵的 CSR 表示</h3><p><strong>概念</strong>：CSR 用三组向量存矩阵的非零项：</p><ul><li><code>row</code>：每个非零的行索引（按行块存储）</li><li><code>col</code>：每个非零的列索引</li><li><code>data</code>：对应的非零值<br> 配合内部指针（<code>indptr</code>）就能重建稀疏矩阵，矩阵–向量乘法&#x2F;按行切片都很快。</li></ul><h2 id="二、算法分析"><a href="#二、算法分析" class="headerlink" title="二、算法分析"></a>二、算法分析</h2><h3 id="1、PCA算法："><a href="#1、PCA算法：" class="headerlink" title="1、PCA算法："></a>1、PCA算法：</h3><h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><p>PCA 用于大规模或高维数据的降维初始化，目标是：</p><p><strong>找方向（主成分）</strong>：在原始高维数据中，找到一组正交方向，使得数据在这些方向上的方差最大。</p><p><strong>投影降维</strong>：把原始数据投影到前几个主成分方向上，得到低维表示，同时尽可能保留原始数据的结构信息。</p><h4 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h4><p><strong>零均值化</strong>：<br> 对每个维度减去均值，让数据中心在原点。</p><p><strong>计算协方差矩阵</strong>：（ 协方差是两个变量的线性相关性强度）<br>$$<br>C&#x3D; \frac{1}{n} X^T X<br>$$<br>表示不同特征之间的相关性。</p><p><strong>特征分解</strong>：<br> 解出协方差矩阵的特征值和特征向量：</p><ul><li>特征值 λ 表示该方向上的方差大小。</li><li>特征向量 M 表示该方向的坐标轴（主成分方向）。</li></ul><p><strong>排序选取</strong>：<br> 将特征值按大小排序，取前 k 个最大特征值对应的特征向量，组成投影矩阵。</p><p><strong>投影得到低维表示</strong>：<br>$$<br>Y&#x3D;XMk<br>$$<br>其中<br>$$<br>M_k<br>$$<br> 是前 k 个主成分向量。</p><h3 id="2、PPS算法"><a href="#2、PPS算法" class="headerlink" title="2、PPS算法"></a>2、PPS算法</h3><h4 id="简介：-1"><a href="#简介：-1" class="headerlink" title="简介："></a>简介：</h4><p>选出一部分点（地标）参与嵌入学习，既能代表整体分布，又不会太密集。优先挑选 <strong>“重要点”</strong>（RNN 值高 &#x3D; 在很多人的近邻里出现过 &#x3D; 数据中心&#x2F;高密度点）。每选一个地标，就把它周围的点（它的近邻）从候选列表里删掉，避免采样过于拥挤。最终得到的地标，既分散又代表数据核心结构。</p><h4 id="流程：-1"><a href="#流程：-1" class="headerlink" title="流程："></a>流程：</h4><ol><li><strong>排序</strong>：按 <code>rnn</code> 从大到小排队，形成候选队列 <code>id_sort</code>。</li><li><strong>循环选点</strong>：<ul><li>取队首（当前 RNN 最大的点）作为一个地标，加入 <code>id_samp</code>。</li><li>将这个点的近邻（根据 <code>knn</code>）加入一个待删除集合 <code>rm_pts</code>。</li><li>如果 <code>order &gt; 1</code>，继续扩展，把近邻的近邻也删掉。</li><li>把这些点从候选队列 <code>id_sort</code> 中移除。</li></ul></li><li><strong>重复</strong>：直到没有候选点。</li><li><strong>输出</strong>：得到一组分散、密度敏感的地标索引 <code>id_samp</code>。</li></ol><h3 id="3、地标上学习低维表示算法"><a href="#3、地标上学习低维表示算法" class="headerlink" title="3、地标上学习低维表示算法"></a>3、地标上学习低维表示算法</h3><h4 id="低维：learning-s"><a href="#低维：learning-s" class="headerlink" title="低维：learning_s"></a>低维：learning_s</h4><p>流程：输入→建图→初始化→分块优化→输出</p><h4 id="高维：learning-l"><a href="#高维：learning-l" class="headerlink" title="高维：learning_l"></a>高维：learning_l</h4><p>流程：</p><h2 id="三、代码分析"><a href="#三、代码分析" class="headerlink" title="三、代码分析"></a>三、代码分析</h2><h3 id="1、PCA算法"><a href="#1、PCA算法" class="headerlink" title="1、PCA算法"></a>1、PCA算法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_pca</span>(<span class="hljs-params">X, no_dims, contri</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    对数据进行 PCA 预处理（用于大规模或高维数据的降维初始化）。</span><br><span class="hljs-string"></span><br><span class="hljs-string">    参数：</span><br><span class="hljs-string">    X        - N×D 的数据矩阵，每一行是一个样本，每一列是一个特征。</span><br><span class="hljs-string">    no_dims  - 目标降维维度（至少保证结果维度 &gt;= no_dims+1）。</span><br><span class="hljs-string">    contri   - 累积方差贡献率阈值（例如 0.8 表示保留 80% 的方差信息）。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    m = X.shape[<span class="hljs-number">1</span>]                  <span class="hljs-comment"># 原始特征维度数 D</span><br>    X = X - np.mean(X, axis=<span class="hljs-number">0</span>)      <span class="hljs-comment"># 1: 数据零均值化（减去每列的均值）</span><br><br>    <span class="hljs-comment"># 2: 计算协方差矩阵 (D×D)，用于衡量各特征间的相关性</span><br>    C = np.cov(X, rowvar=<span class="hljs-literal">False</span>)     <br><br>    <span class="hljs-comment"># 防止协方差矩阵中出现 NaN，替换为 0</span><br>    C[np.isnan(C)] = <span class="hljs-number">0</span><br>    C[np.isinf(C)] = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 3: 对协方差矩阵做特征分解，得到特征值 lamda 和特征向量 M</span><br>    <span class="hljs-comment"># 特征值表示该方向上的方差大小，特征向量表示主成分方向</span><br>    lamda, M = np.linalg.eig(C)<br>    lamda = np.real(lamda)          <span class="hljs-comment"># 取实部（理论上应为实数，但数值计算可能有虚部）</span><br><br>    <span class="hljs-comment"># 4: 确定最佳降维维度m</span><br>    <span class="hljs-keyword">if</span> m &lt; <span class="hljs-number">2001</span>:<br>        <span class="hljs-comment"># 如果维度不超过 2000，使用所有特征值计算累计方差贡献率</span><br>        ind = np.where(np.cumsum(lamda) / <span class="hljs-built_in">sum</span>(lamda) &gt; contri)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 如果维度超过 2000，只取前 2000 个特征值估计贡献率（避免计算开销过大）</span><br>        ind = np.where(np.cumsum(lamda) / <span class="hljs-built_in">sum</span>(lamda[:<span class="hljs-number">2000</span>]) &gt; contri)<br><br>    <span class="hljs-comment"># bestDim 至少为 no_dims+1，同时也要满足贡献率阈值</span><br>    bestDim = <span class="hljs-built_in">max</span>(no_dims + <span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(ind[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]))<br><br>    <span class="hljs-comment"># 5: 取前m个主成分方向（特征向量），并将数据投影到这些方向上</span><br>    mappedX = X @ np.real(M)[:, :bestDim]<br><br>    <span class="hljs-keyword">return</span> mappedX  <span class="hljs-comment"># 返回降维后的数据，形状 (N, m)</span><br><br></code></pre></td></tr></table></figure><h3 id="2、PPS算法-1"><a href="#2、PPS算法-1" class="headerlink" title="2、PPS算法"></a>2、PPS算法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pps</span>(<span class="hljs-params">knn, rnn, order</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Plum Pudding Sampling (PPS)</span><br><span class="hljs-string">    返回选出的地标点索引集合。</span><br><span class="hljs-string"></span><br><span class="hljs-string">    参数：</span><br><span class="hljs-string">    knn    - N*k 的矩阵，每一行存储该点的 k 个最近邻索引。</span><br><span class="hljs-string">    rnn    - 长度为 N 的数组，每个元素是该点作为别人近邻出现的次数（RNN值）。</span><br><span class="hljs-string">    order  - 正整数，表示要剔除的邻居阶数。order=1 表示直接邻居，order=2 表示邻居的邻居也要剔除。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    id_samp = []  <br>    <span class="hljs-comment"># 存储最终选出的地标点索引</span><br><br>    id_sort = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(rnn)), key=<span class="hljs-keyword">lambda</span> k: rnn[k], reverse=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 按 RNN 值从大到小对所有点排序，得到候选点队列</span><br>    <span class="hljs-comment"># RNN 值高的点更“重要”，优先被选为地标</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(id_sort) &gt; <span class="hljs-number">0</span>:  <br>        <span class="hljs-comment"># 当还有候选点时，不断选择新地标</span><br>        id_samp.append(id_sort[<span class="hljs-number">0</span>])  <br>        <span class="hljs-comment"># 选出当前 RNN 最大的点作为一个地标</span><br><br>        rm_pts = [id_sort[<span class="hljs-number">0</span>]]  <br>        <span class="hljs-comment"># 待移除点集合，初始只包含刚选的地标</span><br><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(order):  <br>            <span class="hljs-comment"># 根据指定阶数，扩展要删除的邻域</span><br>            <span class="hljs-comment"># knn[rm_pts]：取出 rm_pts 中点的近邻集合</span><br>            <span class="hljs-comment"># flatten(把 多维数组 → 一维数组的拷贝) + tolist(numpy 数组 → Python 原生 list)：转为一维列表</span><br>            rm_pts.extend(knn[rm_pts].flatten().tolist())<br><br>        rm_pts = <span class="hljs-built_in">set</span>(rm_pts)  <br>        <span class="hljs-comment"># 转为集合，避免重复</span><br><br>        rm_id = np.where(np.isin(id_sort, <span class="hljs-built_in">list</span>(rm_pts)))[<span class="hljs-number">0</span>]<br>        <span class="hljs-comment"># 找到候选队列 id_sort 中属于 rm_pts 的索引位置</span><br><br>        id_sort = [id_sort[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(id_sort)) <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> rm_id]<br>        <span class="hljs-comment"># 从候选队列里剔除这些点，避免它们在后续被再次选为地标</span><br><br>    <span class="hljs-keyword">return</span> id_samp  <br>    <span class="hljs-comment"># 返回所有选中的地标点索引</span><br><br></code></pre></td></tr></table></figure><h3 id="learning-l"><a href="#learning-l" class="headerlink" title="learning_l"></a>learning_l</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> NearestNeighbors<br><span class="hljs-keyword">from</span> scipy.sparse <span class="hljs-keyword">import</span> diags           <span class="hljs-comment"># 稀疏对角矩阵构造（用于度矩阵等）</span><br><span class="hljs-keyword">from</span> scipy.sparse <span class="hljs-keyword">import</span> csr_matrix      <span class="hljs-comment"># 压缩稀疏行矩阵（邻接/概率矩阵用这个省内存）</span><br><span class="hljs-keyword">from</span> scipy.spatial.distance <span class="hljs-keyword">import</span> cdist <span class="hljs-comment"># 成对距离（这里主要用欧氏距离）</span><br><span class="hljs-keyword">from</span> init_pca <span class="hljs-keyword">import</span> init_pca            <span class="hljs-comment"># 你自定义的 PCA 预降维（保留贡献率阈值）</span><br><span class="hljs-keyword">from</span> pca <span class="hljs-keyword">import</span> pca                      <span class="hljs-comment"># 线性 PCA 初始化</span><br><span class="hljs-keyword">from</span> mds <span class="hljs-keyword">import</span> mds                      <span class="hljs-comment"># 经典 MDS 初始化</span><br><span class="hljs-keyword">import</span> scipy.sparse.linalg <span class="hljs-keyword">as</span> sp_linalg  <span class="hljs-comment"># 稀疏矩阵特征分解</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> math<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">learning_l</span>(<span class="hljs-params">X_samp, k1, get_knn, rnn, id_samp, no_dims, initialize, agg_coef, T_epoch</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    作用（地标的 block 版学习）：</span><br><span class="hljs-string">      - 在地标子集 X_samp 上学习其低维嵌入 Y（维度 = no_dims）</span><br><span class="hljs-string">      - 自适应确定地标层的近邻数 k2（用于构造高维概率 P）</span><br><span class="hljs-string">      - 与 learning_s 的区别：这里对 P、Q 的梯度按“数据块”计算（降低峰值内存，适合更大 N）</span><br><span class="hljs-string"></span><br><span class="hljs-string">    参数：</span><br><span class="hljs-string">      X_samp     : (N, dim) 地标样本矩阵（从全体 X 中采样而来）</span><br><span class="hljs-string">      k1         : 采样阶段的 K（&gt;0 表示此时 get_knn / rnn / id_samp 可用；=0 表示无采样信息）</span><br><span class="hljs-string">      get_knn    : (n, k1+1) 全数据的 KNN 索引矩阵（含自邻居），仅当 k1&gt;0 时使用</span><br><span class="hljs-string">      rnn        : (n,)      全数据的 RNN 计数（点作为别人近邻被命中的次数），仅当 k1&gt;0 时使用</span><br><span class="hljs-string">      id_samp    : (N,)      地标在原数据中的索引（映射 get_knn / rnn 用），仅当 k1&gt;0 时使用</span><br><span class="hljs-string">      no_dims    : 目标嵌入维度（Y 的列数）</span><br><span class="hljs-string">      initialize : 初始嵌入方式：&#x27;le&#x27;（Laplacian Eigenmaps）、&#x27;pca&#x27;、&#x27;mds&#x27;</span><br><span class="hljs-string">      agg_coef   : SNN 聚合系数，控制 (1 - SNN)^agg_coef 对高维距离的“软缩放”强度</span><br><span class="hljs-string">      T_epoch    : 训练轮数</span><br><span class="hljs-string"></span><br><span class="hljs-string">    返回：</span><br><span class="hljs-string">      Y  : (N, no_dims) 地标的低维嵌入</span><br><span class="hljs-string">      k2 : 地标层使用的近邻数（用于构造 P 的局部自适应核）</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 基本尺寸</span><br>    N, dim = X_samp.shape<br><br>    <span class="hljs-comment"># 自适应确定 k2（邻域大小）</span><br>    <span class="hljs-comment">#   - 小样本直接取 N 或固定值</span><br>    <span class="hljs-comment">#   - 中等样本按比例（约 2%N + 常数）</span><br>    <span class="hljs-comment">#   - 超大样本对数增长 + 常数，避免 k2 过大</span><br> <br>    <span class="hljs-keyword">if</span> N &lt; <span class="hljs-number">9</span>:<br>        k2 = N<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> N &gt; <span class="hljs-number">1000</span>:<br>            k2 = <span class="hljs-built_in">int</span>(np.ceil(np.log2(N)) + <span class="hljs-number">18</span>)<br>        <span class="hljs-keyword">elif</span> N &gt; <span class="hljs-number">50</span>:<br>            k2 = <span class="hljs-built_in">int</span>(np.ceil(<span class="hljs-number">0.02</span> * N)) + <span class="hljs-number">8</span><br>        <span class="hljs-keyword">else</span>:<br>            k2 = <span class="hljs-number">9</span><br><br>    <span class="hljs-comment"># 构造高维概率矩阵 P（仅在每行的 k2 个近邻上赋值 -&gt; 稀疏）</span><br>    <span class="hljs-comment"># 两种路径：</span><br>    <span class="hljs-comment">#   1) k1&gt;0：使用采样阶段的 SNN（共享近邻）思想修正距离（增强类内凝聚、抑制跨类吸引）</span><br>    <span class="hljs-comment">#   2) k1=0：直接在 X_samp 上做 KNN，并用逐点带宽的高斯核</span><br>    <span class="hljs-keyword">if</span> k1 &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># 用列表累积稀疏矩阵的行/列/值，最后一次性构造 csr_matrix</span><br>        row = []  <span class="hljs-comment"># 行索引列表</span><br>        col = []  <span class="hljs-comment"># 列索引列表</span><br>        Pval = [] <span class="hljs-comment"># 非零值列表</span><br><br>        <span class="hljs-comment"># (N, k1+1)：第 i 个地标的邻居（含自邻居）的 RNN 值，用于度量“共享邻居强度”</span><br>        knn_rnn_mat = rnn[get_knn[id_samp]]<br><br>        <span class="hljs-comment"># 逐行构造：第 i 行仅在其前 k2 个“修正距离”最近的点上赋值</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>            <span class="hljs-comment"># snn_id[j, t] = 1 表示地标 j 的第 t 个邻居落在“地标 i 的邻居集合”内（有共享近邻）</span><br>            snn_id = np.isin(get_knn[id_samp], get_knn[id_samp[i]]).astype(<span class="hljs-built_in">int</span>)  <span class="hljs-comment"># (N, k1+1)</span><br>            <span class="hljs-comment"># 与 i 存在至少一个共享邻居的地标行索引</span><br>            nn_id = np.where(np.<span class="hljs-built_in">max</span>(snn_id, axis=<span class="hljs-number">1</span>) == <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br><br>            <span class="hljs-comment"># snn：与 i 共享近邻的“强度”向量（强调枢纽邻居：RNN 大的邻居占更大权重）</span><br>            snn = np.zeros((<span class="hljs-number">1</span>, N))<br>            snn[:, nn_id] = np.<span class="hljs-built_in">sum</span>(knn_rnn_mat[nn_id] * snn_id[nn_id], axis=<span class="hljs-number">1</span>)<br><br>            <span class="hljs-comment"># 归一化共享强度 -&gt; [0,1]；然后对原始欧氏距离乘以 (1 - snn)^agg_coef 做“软缩放”</span><br>            <span class="hljs-comment"># 共享越强（类内关系越强），(1 - snn) 越小，修正后的距离越短 -&gt; 更强的类内吸引</span><br>            mod_dis = (<span class="hljs-number">1</span> - snn / <span class="hljs-built_in">max</span>(np.<span class="hljs-built_in">max</span>(snn), np.finfo(<span class="hljs-built_in">float</span>).tiny)) ** agg_coef /<br>                      * cdist(X_samp[i:i + <span class="hljs-number">1</span>, :], X_samp)         <span class="hljs-comment"># (1, N)</span><br><br>            <span class="hljs-comment"># 取该行前 k2 个最小修正距离的索引与数值</span><br>            sort_dis = np.sort(mod_dis, axis=<span class="hljs-number">1</span>)                  <span class="hljs-comment"># (1, N)</span><br>            idx = np.argsort(mod_dis, axis=<span class="hljs-number">1</span>)                    <span class="hljs-comment"># (1, N)</span><br>            mean_samp_dis_squared = np.square(np.mean(sort_dis[<span class="hljs-number">0</span>, :k2]))  <span class="hljs-comment"># 局部带宽（均值距离平方）</span><br><br>            <span class="hljs-comment"># 高斯核：exp(-0.5 * d^2 / sigma^2)，仅对前 k2 个赋值</span><br>            Pval.extend(np.exp(<br>                -<span class="hljs-number">0.5</span> * np.square(sort_dis[<span class="hljs-number">0</span>, :k2]) /<br>                np.maximum(mean_samp_dis_squared, np.finfo(<span class="hljs-built_in">float</span>).tiny)<br>            ))<br>            <span class="hljs-comment"># 写入对应的 (row, col)</span><br>            row.extend((i * np.ones((k2, <span class="hljs-number">1</span>))).flatten().tolist())<br>            col.extend(idx[<span class="hljs-number">0</span>, :k2])<br><br>        <span class="hljs-comment"># 组装成 (N, N) 稀疏矩阵 P（未对称/未归一化）</span><br>        P = csr_matrix((Pval, (row, col)), shape=(N, N))<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 无采样信息：直接用 X_samp 做 KNN，再按逐点带宽的高斯核构造 P</span><br>        <span class="hljs-keyword">if</span> N &gt; <span class="hljs-number">5000</span> <span class="hljs-keyword">and</span> dim &gt; <span class="hljs-number">50</span>:<br>            <span class="hljs-comment"># 大规模高维：先 PCA 预降（保留 contri=0.8 方差），再做邻居搜索 -&gt; 更快/更稳</span><br>            xx = init_pca(X_samp, no_dims, <span class="hljs-number">0.8</span>)<br>            samp_dis, samp_knn = NearestNeighbors(n_neighbors=k2).fit(xx).kneighbors(xx)<br>        <span class="hljs-keyword">else</span>:<br>            samp_dis, samp_knn = NearestNeighbors(n_neighbors=k2).fit(X_samp).kneighbors(X_samp)<br><br>        <span class="hljs-comment"># (N,): 每个点的局部带宽（其 k2 个邻居距离的均值平方）</span><br>        mean_samp_dis_squared = np.square(np.mean(samp_dis, axis=<span class="hljs-number">1</span>))<br><br>        <span class="hljs-comment"># (N, k2)：每行对其 k2 个邻居赋高斯权重（逐点带宽）</span><br>        Pval = np.exp(<br>            -<span class="hljs-number">0.5</span> * np.square(samp_dis) /<br>            np.maximum(mean_samp_dis_squared[:, np.newaxis], np.finfo(<span class="hljs-built_in">float</span>).tiny)<br>        )<br><br>        <span class="hljs-comment"># 直接用稀疏构造：行索引展开为 [0..N-1] 各重复 k2 次，列索引为 samp_knn.flatten()</span><br>        P = csr_matrix(<br>            (Pval.flatten(), ([i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k2)], samp_knn.flatten())),<br>            shape=(N, N)<br>        )<br><br>    <span class="hljs-comment"># 对称化（P &lt;- (P + P^T)/2），稳定相似度，兼顾 i-&gt;j 与 j-&gt;i</span><br>    <span class="hljs-comment"># 仍保持稀疏格式</span><br>    P = (P + P.transpose()) / <span class="hljs-number">2</span><br><br>    <span class="hljs-comment"># 初始化低维嵌入 Y</span><br>    <span class="hljs-comment">#   &#x27;le&#x27;  ：对称归一化拉普拉斯的最小特征向量（去掉平凡解） -&gt; Laplacian Eigenmaps</span><br>    <span class="hljs-comment">#   &#x27;pca&#x27; ：线性 PCA 投影</span><br>    <span class="hljs-comment">#   &#x27;mds&#x27; ：经典 MDS</span><br>    <span class="hljs-keyword">if</span> initialize == <span class="hljs-string">&#x27;le&#x27;</span>:<br>        <span class="hljs-comment"># 度矩阵（稀疏对角），注意 P.sum(axis=0) 返回 (1, N) 稀疏矩阵，先 flatten 成 1D</span><br>        Dg = diags(np.array(P.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">0</span>)).flatten())<br>        <span class="hljs-comment"># 对称归一化拉普拉斯： L = D^&#123;1/2&#125; (D - P) D^&#123;1/2&#125;</span><br>        L = np.sqrt(Dg) @ (Dg - P) @ np.sqrt(Dg)<br>        <span class="hljs-comment"># 取最小的 no_dims+1 个特征对（SM=Smallest Magnitude），去掉第一个（常量向量）</span><br>        eigenvalues, eigenvectors = sp_linalg.eigs(L, k=no_dims + <span class="hljs-number">1</span>, which=<span class="hljs-string">&#x27;SM&#x27;</span>)<br>        smallest_indices = np.argsort(np.<span class="hljs-built_in">abs</span>(eigenvalues))<br>        Y = np.real(eigenvectors[:, smallest_indices[<span class="hljs-number">1</span>:]])  <span class="hljs-comment"># (N, no_dims)</span><br>        <span class="hljs-keyword">del</span> Dg, L<br><br>    <span class="hljs-keyword">elif</span> initialize == <span class="hljs-string">&#x27;pca&#x27;</span>:<br>        Y = pca(X_samp, no_dims)<br><br>    <span class="hljs-keyword">elif</span> initialize == <span class="hljs-string">&#x27;mds&#x27;</span>:<br>        Y = mds(X_samp, no_dims)<br><br>    <span class="hljs-comment"># 概率归一化：P 视作“联合概率矩阵”，对总和（减去 N 个对角自项）做归一化</span><br>    <span class="hljs-comment"># 注意：此处 P 为 csr_matrix，np.sum(P) 返回标量</span><br>    P = P / (np.<span class="hljs-built_in">sum</span>(P) - N)<br><br>    <span class="hljs-comment"># Block 设定：把 N 行按块切分（每块 ~3000 行），分块计算梯度，降低内存峰值</span><br>    no_blocks = math.ceil(N / <span class="hljs-number">3000</span>)         <span class="hljs-comment"># 需要的块数</span><br>    mark = np.zeros((no_blocks, <span class="hljs-number">2</span>))         <span class="hljs-comment"># 每块的起止行号 [start, end]（闭区间）</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(no_blocks):<br>        start = i * math.ceil(N / no_blocks)<br>        end   = <span class="hljs-built_in">min</span>((i + <span class="hljs-number">1</span>) * math.ceil(N / no_blocks) - <span class="hljs-number">1</span>, N - <span class="hljs-number">1</span>)<br>        mark[i, :] = [start, end]<br><br>    <span class="hljs-comment"># 训练超参与动量变量</span><br>    <span class="hljs-comment">#   - 学习率调度：warmup 后做余弦退火（max_alpha -&gt; min_alpha）</span><br>    <span class="hljs-comment">#   - preGrad：上一轮的梯度（动量）</span><br>    max_alpha = <span class="hljs-number">2.5</span> * N  <span class="hljs-comment"># 预热阶段较大的步长（按 N 放缩）</span><br>    min_alpha = <span class="hljs-number">2</span> * N    <span class="hljs-comment"># 退火最低步长</span><br>    warm_step = <span class="hljs-number">10</span>       <span class="hljs-comment"># 预热轮数</span><br>    preGrad = np.zeros((N, no_dims))  <span class="hljs-comment"># 动量缓存</span><br>    epoch = <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># 迭代优化（KLD 损失的近似梯度；log 内核：Q_ij = 1/(1 + log(1 + d^2)))</span><br>    <span class="hljs-comment"># 与 learning_s 的区别：这里按块累计 Pgrad/Qgrad 和 sumQ</span><br>    <span class="hljs-keyword">while</span> epoch &lt;= T_epoch:<br>        <span class="hljs-comment"># 学习率调度</span><br>        <span class="hljs-keyword">if</span> epoch &lt;= warm_step:<br>            alpha = max_alpha<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 余弦退火：从 max_alpha 平滑衰减到 min_alpha</span><br>            alpha = min_alpha + <span class="hljs-number">0.5</span> * (max_alpha - min_alpha) * (<br>                <span class="hljs-number">1</span> + np.cos(np.pi * ((epoch - warm_step) / (T_epoch - warm_step)))<br>            )<br><br>        <span class="hljs-comment"># 分块累计梯度</span><br>        Pgrad = np.zeros((N, no_dims))  <span class="hljs-comment"># 来源于 P（真实分布）的梯度部分</span><br>        Qgrad = np.zeros((N, no_dims))  <span class="hljs-comment"># 来源于 Q（模型分布）的梯度部分</span><br>        sumQ = <span class="hljs-number">0</span>                        <span class="hljs-comment"># 所有块的 Q1 总和（用于归一化 Q）</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(no_blocks):<br>            <span class="hljs-comment"># 当前块的行索引（连续区间）</span><br>            idx = [j <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(mark[i, <span class="hljs-number">0</span>]), <span class="hljs-built_in">int</span>(mark[i, <span class="hljs-number">1</span>]) + <span class="hljs-number">1</span>)]<br><br>            <span class="hljs-comment"># 计算当前块与全体的低维平方距离 D</span><br>            D = cdist(Y[idx], Y) ** <span class="hljs-number">2</span>             <span class="hljs-comment"># (len_blk, N)</span><br><br>            <span class="hljs-comment"># 低维相似度核与其导数辅助项</span><br>            Q1  = <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.log(<span class="hljs-number">1</span> + D))         <span class="hljs-comment"># log-kernel，相比 t 分布更重尾，利于类内紧凑/收敛</span><br>            QQ1 = <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + D)                     <span class="hljs-comment"># 辅助项：对 (1 + log(1 + D)) 的链式导数中会出现</span><br>            <span class="hljs-keyword">del</span> D<br><br>            <span class="hljs-comment"># P 部分的梯度“权重矩阵”（注意这里对 P 是稀疏乘法，再 toarray 进入 dense 计算）</span><br>            <span class="hljs-comment"># -4 * P[idx,:] ⊙ Q1 ⊙ QQ1</span><br>            <span class="hljs-comment"># 负号是因为后续采用 (diag(row_sums) - Mat) @ Y 的拉普拉斯形式</span><br>            Pmat = -<span class="hljs-number">4</span> * P[idx, :].multiply(Q1).multiply(QQ1).toarray()<br><br>            <span class="hljs-comment"># Q 部分的梯度“权重矩阵”：</span><br>            <span class="hljs-comment"># -4 * (Q1^2) * QQ1   （Q 的归一化在块外通过 sumQ 统一处理）</span><br>            Qmat = -<span class="hljs-number">4</span> * Q1 ** <span class="hljs-number">2</span> * QQ1<br>            <span class="hljs-keyword">del</span> QQ1<br><br>            len_blk = <span class="hljs-built_in">len</span>(idx)<br><br>            <span class="hljs-comment"># 把每行的“对角位”减去行和：实现 (diag(row_sums) - Mat)</span><br>            <span class="hljs-comment"># 这里 idPQ[:,1] = 块起始行 + [0..len_blk-1]，恰好对应全局行号的对角位置</span><br>            idPQ = np.column_stack((np.array(<span class="hljs-built_in">range</span>(len_blk)), idx[<span class="hljs-number">0</span>] + np.array(<span class="hljs-built_in">range</span>(len_blk))))<br>            Pmat[idPQ[:, <span class="hljs-number">0</span>], idPQ[:, <span class="hljs-number">1</span>]] = Pmat[idPQ[:, <span class="hljs-number">0</span>], idPQ[:, <span class="hljs-number">1</span>]] - np.<span class="hljs-built_in">sum</span>(Pmat, axis=<span class="hljs-number">1</span>)<br>            Qmat[idPQ[:, <span class="hljs-number">0</span>], idPQ[:, <span class="hljs-number">1</span>]] = Qmat[idPQ[:, <span class="hljs-number">0</span>], idPQ[:, <span class="hljs-number">1</span>]] - np.<span class="hljs-built_in">sum</span>(Qmat, axis=<span class="hljs-number">1</span>)<br><br>            <span class="hljs-comment"># 乘以 Y 得到梯度贡献： (diag(row_sums) - Mat) @ Y</span><br>            Pgrad[idx] = Pmat @ Y<br>            Qgrad[idx] = Qmat @ Y<br>            <span class="hljs-keyword">del</span> Pmat, Qmat<br><br>            <span class="hljs-comment"># 统计 Q 的归一化分母（全体 Q1 的总和，减去 N 的自项在块外统一处理）</span><br>            sumQ = sumQ + np.<span class="hljs-built_in">sum</span>(Q1)<br><br>        <span class="hljs-comment"># 组合总梯度并更新 Y：</span><br>        <span class="hljs-comment">#   grad_total = Pgrad - Qgrad / (sumQ - N)</span><br>        <span class="hljs-comment">#   动量项：((epoch-1)/(epoch+2)) * preGrad    （随轮数递增的动量系数）</span><br>        Y = Y - alpha * (Pgrad - Qgrad / (sumQ - N) + (epoch - <span class="hljs-number">1</span>) / (epoch + <span class="hljs-number">2</span>) * preGrad)<br>        preGrad = Pgrad - Qgrad / (sumQ - N)<br><br>        epoch = epoch + <span class="hljs-number">1</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(epoch - <span class="hljs-number">1</span>) + <span class="hljs-string">&#x27; epochs have been computed!&#x27;</span>)<br>    <span class="hljs-keyword">return</span> Y, k2<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>机器学习-CDC聚类算法</title>
    <link href="/2025/09/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-CDC%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/"/>
    <url>/2025/09/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-CDC%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>·</p><h2 id="前置知识准备："><a href="#前置知识准备：" class="headerlink" title="前置知识准备："></a>前置知识准备：</h2><h3 id="1、Gram矩阵："><a href="#1、Gram矩阵：" class="headerlink" title="1、Gram矩阵："></a>1、Gram矩阵：</h3><p>定义：<br>$$<br>G &#x3D; \left[ \langle v_i, v_j \rangle \right]_{i,j&#x3D;1}^k<br>$$<br>G 是一个 k*k 的对称矩阵；</p><p>第 (i,j)(i,j)(i,j) 元素就是向量 vi 和 vj 的内积。</p><p>意义：用于刻画向量之间的角度与长度关系，Gram矩阵就是向量组的内积表</p><h3 id="2、聚类算法："><a href="#2、聚类算法：" class="headerlink" title="2、聚类算法："></a>2、聚类算法：</h3><p>传统聚类方法包括：</p><p>**（1）K均值聚类和K中心点聚类：**用质心划分数据。需要预先指定簇数 k，并且假设簇是“球形+均匀密度”，遇到非凸形簇会失败；另外它们对噪声点&#x2F;离群点敏感。</p><p>**（2）层次聚类：**自底向上或自顶向下逐步合并&#x2F;划分。时间复杂度高（通常 O(n²)），且一旦合并&#x2F;分裂，不能回退，容易出错，所以不适合大数据集。</p><p>**（3）密度峰值的聚类（CDP）：**选择高密度且据其他高密度点远的点作为中心点，然后将其他点归属到离自己最近的高密度点所属的簇。这种算法不需要预设簇数，同时结果可视化性强；但是无法解决弱联通问题，同时参数复杂。</p><p>**（4）基于密度的聚类（DBSCAN）：**将密度超过阈值的连通点邻域进行聚类。能保留聚类形态的局部细节，但容易将稀疏聚类误判为噪声点，甚至在点分布不均匀时导致整个聚类被分割，也就是不能解决稀疏簇问题。</p><p>**（5）基于网格的聚类算法（WaveCluster）：**把数据空间转化为不同分辨率的网格表示，再在变换后的空间里识别高密度区域。弱连接的聚类难以有效分离，低密度聚类边界也常被误判为噪声点。</p><p>**（6）基于子空间的聚类算法（CLIQUE）：**和（5）一样使用网格映射技术，在低维空间里找到稠密单元，再逐层组合扩展到高维子空间。缺点也相似。</p><p>**（7）局部引力聚类（LGC）：**类比物理中的“引力”概念，提出基于均值漂移的两种度量指标——中心性（CE）和协调性（CO），用于衡量邻近点的局部吸引力与均值漂移方向的一致性，直观性强，且抗噪作用强，但是稀疏聚类中的内部点检测存在困难，另外，算法是模拟迭代的方式，可能需要多次更新才能收敛，自身的计算复杂度很高（O(n²)）。</p><p>**（8）基于密度的度量方法（RKNN，逆向K近邻）：**通过统计K近邻中将某点视为成员的对象数量来实现，如果 p 出现在很多点的 KNN 集合里，说明它处在一个“高密度区”；反之就说明它处于“低密度区”。但可能无法有效识别低密度区域的边界（k值过大，k值即考虑k个最近邻居）或结果过于局部，受噪声干扰大（k值过小）。</p><h2 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a>算法分析：</h2><p>核心思路是先检测聚类的边界点，再将由外围边界点生成的封闭笼状结构内的内部点进行连接。具体而言，聚类内部点通常会被其K近邻点全方位包围，而边界点仅包含特定方向范围内的邻近点。我们利用这一差异，通过计算K近邻点的方向一致性来衡量局部中心性，从而区分内部点与边界点。因此，CDC算法能有效避免跨聚类连接，并分离出弱连接的聚类。同时，由于采用K近邻搜索不涉及点密度的邻近点，该方法还能保持稀疏聚类的完整性。</p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>1、能处理异质密度数据</p><p>2、弱连通簇分离能力强，在面对弱连通簇与异质密度数据时鲁棒性好</p><p>3、簇形状灵活</p><p>4、边界点处理自然</p><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><p>1、<strong>计算复杂度高：</strong></p><p>需要计算 KNN + 邻居角度分布（或高维凸包 + 单形体积），高维情况下凸包计算复杂度非常高，O(n^d) 最坏情况不可用。实际复杂度常为 O(n·k²)，比 DBSCAN（近似 O(n log n)）要慢。</p><p>2、<strong>参数敏感：需要设定：</strong></p><ul><li>k（邻居数）：太小 → 噪声影响大；太大 → 稀疏簇被淹没。</li><li>ratio（内部点比例）：过大 → 边界点太少；过小 → 核心簇不稳定。</li></ul><p>没有普适默认值，需要调参。</p><p>3、<strong>高维噪声问题:</strong></p><ul><li>在高维空间，点都稀疏，“方向均匀性”度量容易失效。</li><li>凸包计算容易数值不稳定，代码里不得在失败时直接判边界点，结果可能偏差。</li></ul><h2 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> NearestNeighbors<br><span class="hljs-keyword">from</span> scipy.special <span class="hljs-keyword">import</span> gamma<br><span class="hljs-keyword">from</span> scipy.spatial <span class="hljs-keyword">import</span> ConvexHull<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CDC</span>(<span class="hljs-params">k_num, ratio, X</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    CDC 聚类算法实现</span><br><span class="hljs-string">    输入:</span><br><span class="hljs-string">        k_num : int, 最近邻数量 k</span><br><span class="hljs-string">        ratio : float, 内部点比例阈值 (0~1之间)</span><br><span class="hljs-string">        X     : ndarray, (num, d)，样本数据</span><br><span class="hljs-string">    输出:</span><br><span class="hljs-string">        cluster : ndarray, 每个点所属的簇标签 (1..C)</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    [num, d] = X.shape   <span class="hljs-comment"># num: 样本数, d: 维度</span><br>    <br>    <span class="hljs-comment"># KNN 搜索，得到每个点的 k 个最近邻下标</span><br>    nbrs = NearestNeighbors(n_neighbors=k_num+<span class="hljs-number">1</span>, algorithm=<span class="hljs-string">&#x27;ball_tree&#x27;</span>).fit(X)<br>    indices = nbrs.kneighbors(X, return_distance=<span class="hljs-literal">False</span>)<br>    <span class="hljs-comment"># indices是kneighbors默认会返回的两个矩阵之一（分别是distances和indices，distance存储的是距离，这里将其禁用了），存储的是最邻近的邻居（包括本身）</span><br>    get_knn = indices[:, <span class="hljs-number">1</span>:k_num+<span class="hljs-number">1</span>]  <span class="hljs-comment"># 去掉自身（第0个邻居）</span><br><br>    angle_var = np.zeros(num)  <span class="hljs-comment"># 存储每个点的方向方差指标</span><br><br>    <span class="hljs-comment"># 计算方向中心性</span><br>    <span class="hljs-keyword">if</span> (d == <span class="hljs-number">2</span>):  <span class="hljs-comment"># 二维情况</span><br>        angle = np.zeros((num, k_num))<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):   <span class="hljs-comment"># 遍历每个点</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k_num):  <span class="hljs-comment"># 遍历每个邻居</span><br>                delta_x = X[get_knn[i, j], <span class="hljs-number">0</span>] - X[i, <span class="hljs-number">0</span>]<br>                delta_y = X[get_knn[i, j], <span class="hljs-number">1</span>] - X[i, <span class="hljs-number">1</span>]<br>                <span class="hljs-comment"># 计算极角，分情况避免除零</span><br>                <span class="hljs-keyword">if</span> delta_x == <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">if</span> delta_y == <span class="hljs-number">0</span>:<br>                        angle[i, j] = <span class="hljs-number">0</span><br>                    <span class="hljs-keyword">elif</span> delta_y &gt; <span class="hljs-number">0</span>:<br>                        angle[i, j] = math.pi / <span class="hljs-number">2</span><br>                    <span class="hljs-keyword">else</span>:<br>                        angle[i, j] = <span class="hljs-number">3</span> * math.pi / <span class="hljs-number">2</span><br>                <span class="hljs-keyword">elif</span> delta_x &gt; <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">if</span> math.atan(delta_y / delta_x) &gt;= <span class="hljs-number">0</span>:<br>                        angle[i, j] = math.atan(delta_y / delta_x)<br>                    <span class="hljs-keyword">else</span>:<br>                        angle[i, j] = <span class="hljs-number">2</span> * math.pi + math.atan(delta_y / delta_x)<br>                <span class="hljs-keyword">else</span>:<br>                    angle[i, j] = math.pi + math.atan(delta_y / delta_x)<br><br>        <span class="hljs-comment"># 计算角度间隔方差，越均匀则越像内部点</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>            angle_order = <span class="hljs-built_in">sorted</span>(angle[i, :])  <span class="hljs-comment"># 邻居角度排序</span><br><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k_num - <span class="hljs-number">1</span>):<br>                point_angle = angle_order[j + <span class="hljs-number">1</span>] - angle_order[j]<br>                angle_var[i] += <span class="hljs-built_in">pow</span>(point_angle - <span class="hljs-number">2</span> * math.pi / k_num, <span class="hljs-number">2</span>)<br><br>            <span class="hljs-comment"># 首尾回绕的夹角</span><br>            point_angle = angle_order[<span class="hljs-number">0</span>] - angle_order[k_num - <span class="hljs-number">1</span>] + <span class="hljs-number">2</span> * math.pi<br>            angle_var[i] += <span class="hljs-built_in">pow</span>(point_angle - <span class="hljs-number">2</span> * math.pi / k_num, <span class="hljs-number">2</span>)<br><br>            angle_var[i] /= k_num<br><br>        <span class="hljs-comment"># 归一化</span><br>        angle_var = angle_var / ((k_num - <span class="hljs-number">1</span>) * <span class="hljs-number">4</span> * <span class="hljs-built_in">pow</span>(math.pi, <span class="hljs-number">2</span>) / <span class="hljs-built_in">pow</span>(k_num, <span class="hljs-number">2</span>))<br><br>    <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 高维情况</span><br>        <span class="hljs-comment">#在高维里，圆周被替换成球面（d 维空间的单位球面），于是要检查的内容变成了：邻居点在球面上的覆盖是否均匀。</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment"># 取邻居相对向量</span><br>                dif_x = X[get_knn[i], :] - X[i, :]<br>                <span class="hljs-comment"># 标准化映射</span><br>                map_x = np.linalg.inv(np.diag(np.sqrt(np.diag(np.dot(dif_x, dif_x.T))))) @ dif_x<br>                <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                具体步骤：</span><br><span class="hljs-string">                    1、先算 dif_x @ dif_x.T → 得到 k*k 的 Gram 矩阵（前置知识1）</span><br><span class="hljs-string">                    2、取其对角线 → 相当于每个向量的平方长度</span><br><span class="hljs-string">                    3、开根号 → 得到长度</span><br><span class="hljs-string">                    4、取对角矩阵的逆 → 相当于对每个向量除以自己的模长</span><br><span class="hljs-string">                    5、右乘 dif_x → 得到一组归一化后的向量</span><br><span class="hljs-string">                换句话说：把邻居点投射到近似单位球面上</span><br><span class="hljs-string">                &#x27;&#x27;&#x27;</span><br>                <span class="hljs-comment"># 计算凸包</span><br>                hull = ConvexHull(map_x)<br>                <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                hull 这个对象里存有很多属性：</span><br><span class="hljs-string">                hull.vertices ：凸包的顶点索引</span><br><span class="hljs-string">                hull.simplices ：凸包的“面片”（由哪些点组成的 (d-1)-单形）</span><br><span class="hljs-string">                (d-单形：d 维空间里，由 (d+1) 个点构成的最小凸集)</span><br><span class="hljs-string">                &#x27;&#x27;&#x27;</span><br>                simplex_num = <span class="hljs-built_in">len</span>(hull.simplices) <span class="hljs-comment"># 统计凸包的面片数量（也就是多少个单形）</span><br>                simplex_vol = np.zeros(simplex_num)<span class="hljs-comment"># 准备存放每个单形体积</span><br><br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(simplex_num):<br>                    simplex_coord = map_x[hull.simplices[j], :]<br>                    <span class="hljs-comment"># 单形体积近似</span><br>                    simplex_vol[j] = np.sqrt(<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, np.linalg.det(np.dot(simplex_coord, simplex_coord.T)))) / gamma(d-<span class="hljs-number">1</span>)<br>                <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                np.dot(simplex_coord, simplex_coord.T) = 单形顶点的 Gram 矩阵，它的行列式（det）代表这些顶点向量张成的平行体的体积平方</span><br><span class="hljs-string">                max(0,x)是防止浮点误差变为负数</span><br><span class="hljs-string">                在几何体积公式里，单形体积通常要除以阶乘，这里用了 gamma(gamma函数是阶乘的推广，gamma(n)=(n-1)!) 来通用化</span><br><span class="hljs-string">                &#x27;&#x27;&#x27;</span><br>                <span class="hljs-comment"># 方差作为指标</span><br>                angle_var[i] = np.var(simplex_vol)<br><br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-comment"># 出错时设为边界点倾向</span><br>                angle_var[i] = <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># 内部点/边界点划分</span><br>    sort_dcm = <span class="hljs-built_in">sorted</span>(angle_var)<br>    T_DCM = sort_dcm[math.ceil(num*ratio)]  <span class="hljs-comment"># 阈值</span><br>    ind = np.zeros(num)  <span class="hljs-comment"># 标记数组：1=内部点，0=边界点</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        <span class="hljs-keyword">if</span> angle_var[i] &lt; T_DCM:<br>            ind[i] = <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># 计算最近的跨类距离或索引</span><br>    near_dis = np.zeros(num)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        knn_ind = ind[get_knn[i, :]]  <span class="hljs-comment"># KNN 的点类型</span><br>        <span class="hljs-keyword">if</span> ind[i] == <span class="hljs-number">1</span>:  <span class="hljs-comment"># 内部点</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> <span class="hljs-keyword">in</span> knn_ind:  <span class="hljs-comment"># 邻居有边界点</span><br>                bdpts_ind = np.where(knn_ind == <span class="hljs-number">0</span>)<br>                bd_id = get_knn[i, bdpts_ind[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]]<br>                near_dis[i] = math.sqrt(<span class="hljs-built_in">sum</span>(<span class="hljs-built_in">pow</span>((X[i, :] - X[bd_id, :]), <span class="hljs-number">2</span>)))<br>            <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 全局找最近边界点</span><br>                near_dis[i] = <span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;inf&quot;</span>)<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>                    <span class="hljs-keyword">if</span> ind[j] == <span class="hljs-number">0</span>:<br>                        temp_dis = math.sqrt(<span class="hljs-built_in">sum</span>(<span class="hljs-built_in">pow</span>((X[i, :] - X[j, :]), <span class="hljs-number">2</span>)))<br>                        <span class="hljs-keyword">if</span> temp_dis &lt; near_dis[i]:<br>                            near_dis[i] = temp_dis<br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 边界点</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-number">1</span> <span class="hljs-keyword">in</span> knn_ind:  <span class="hljs-comment"># 邻居有内部点</span><br>                bdpts_ind = np.where(knn_ind == <span class="hljs-number">1</span>)<br>                bd_id = get_knn[i, bdpts_ind[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]]<br>                near_dis[i] = bd_id  <span class="hljs-comment"># 存索引</span><br>            <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 全局找最近内部点</span><br>                mark_dis = <span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;inf&quot;</span>)<span class="hljs-comment">#先赋值为无穷大，方便查找替换</span><br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>                    <span class="hljs-keyword">if</span> ind[j] == <span class="hljs-number">1</span>:<br>                        temp_dis = math.sqrt(<span class="hljs-built_in">sum</span>(<span class="hljs-built_in">pow</span>((X[i, :] - X[j, :]), <span class="hljs-number">2</span>)))<br>                        <span class="hljs-keyword">if</span> temp_dis &lt; mark_dis:<br>                            mark_dis = temp_dis<br>                            near_dis[i] = j<br><br>    <span class="hljs-comment"># 内部点聚类 (基于连通性)</span><br>    cluster = np.zeros(num)  <span class="hljs-comment"># 簇标签</span><br>    mark = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        <span class="hljs-keyword">if</span> ind[i] == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> cluster[i] == <span class="hljs-number">0</span>:<br>            cluster[i] = mark<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>                <span class="hljs-keyword">if</span> ind[j] == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> math.sqrt(<span class="hljs-built_in">sum</span>(<span class="hljs-built_in">pow</span>((X[i, :] - X[j, :]), <span class="hljs-number">2</span>))) &lt;= near_dis[i] + near_dis[j]:<br>                    <span class="hljs-keyword">if</span> cluster[j] == <span class="hljs-number">0</span>:<br>                        cluster[j] = cluster[i]<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-comment"># 如果 j 已经在别的簇，则把那个簇并入当前簇</span><br>                        temp_cluster = cluster[j]<br>                        temp_ind = np.where(cluster == temp_cluster)<br>                        cluster[temp_ind] = cluster[i]<br>            mark += <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># 边界点挂到最近内部点的簇</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        <span class="hljs-keyword">if</span> ind[i] == <span class="hljs-number">0</span>:<br>            cluster[i] = cluster[<span class="hljs-built_in">int</span>(near_dis[i])]<br><br>    <span class="hljs-comment"># 簇标签重新压缩为 1..C</span><br>    mark = <span class="hljs-number">1</span><br>    storage = np.zeros(num)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        <span class="hljs-keyword">if</span> cluster[i] <span class="hljs-keyword">in</span> storage:<br>            temp_ind = np.where(storage == cluster[i])<br>            cluster[i] = cluster[temp_ind[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]]<br>        <span class="hljs-keyword">else</span>:<br>            storage[i] = cluster[i]<br>            cluster[i] = mark<br>            mark += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> cluster<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>24獬豸杯复现</title>
    <link href="/2025/09/04/24%E7%8D%AC%E8%B1%B8%E6%9D%AF%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/09/04/24%E7%8D%AC%E8%B1%B8%E6%9D%AF%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>·</p><h1 id="apk取证"><a href="#apk取证" class="headerlink" title="apk取证"></a>apk取证</h1><h3 id="1、APK包名是多少。（标准格式：com-xxx-xxx）"><a href="#1、APK包名是多少。（标准格式：com-xxx-xxx）" class="headerlink" title="1、APK包名是多少。（标准格式：com.xxx.xxx）"></a>1、APK包名是多少。（标准格式：com.xxx.xxx）</h3><p>FLAG：com.example.readeveryday</p><p><img src="/img/24%E7%8D%AC%E8%B1%B8%E6%9D%AF%E5%A4%8D%E7%8E%B0/1.png" alt="新建 BMP 图像 (2)"></p><h3 id="2、APK的主函数名是多少。（标准格式：comlongxin）"><a href="#2、APK的主函数名是多少。（标准格式：comlongxin）" class="headerlink" title="2、APK的主函数名是多少。（标准格式：comlongxin）"></a>2、APK的主函数名是多少。（标准格式：comlongxin）</h3><p>FLAG：StartShow</p><p>见1</p><h3 id="3、APK的签名算法是什么。（标准格式：xxx）"><a href="#3、APK的签名算法是什么。（标准格式：xxx）" class="headerlink" title="3、APK的签名算法是什么。（标准格式：xxx）"></a>3、APK的签名算法是什么。（标准格式：xxx）</h3><p>FLAG：SHA1withRSA</p><p><img src="/img/24%E7%8D%AC%E8%B1%B8%E6%9D%AF%E5%A4%8D%E7%8E%B0/2.bmp" alt="新建 BMP 图像 (3)"></p><h3 id="4、APK的应用版本是多少。（标准格式：1-2）"><a href="#4、APK的应用版本是多少。（标准格式：1-2）" class="headerlink" title="4、APK的应用版本是多少。（标准格式：1.2）"></a>4、APK的应用版本是多少。（标准格式：1.2）</h3><p>FLAG：1.0</p><p>见1</p><h3 id="5、请判断该APK是否需要联网。（标准格式：是-否）"><a href="#5、请判断该APK是否需要联网。（标准格式：是-否）" class="headerlink" title="5、请判断该APK是否需要联网。（标准格式：是&#x2F;否）"></a>5、请判断该APK是否需要联网。（标准格式：是&#x2F;否）</h3><p>用雷电模拟器打开就能看到权限申请</p><p><img src="/img/24%E7%8D%AC%E8%B1%B8%E6%9D%AF%E5%A4%8D%E7%8E%B0/3.bmp" alt="新建 BMP 图像 (4)"></p><p>FLAG：是</p><h3 id="6、APK回传地址？（标准格式：127-0-0-1-12345）"><a href="#6、APK回传地址？（标准格式：127-0-0-1-12345）" class="headerlink" title="6、APK回传地址？（标准格式：127.0.0.1:12345）"></a>6、APK回传地址？（标准格式：127.0.0.1:12345）</h3><p>看到地址直接搜索http，第一个就是了</p><p>FLAG：10.0.102.135:8888</p><p><img src="/img/24%E7%8D%AC%E8%B1%B8%E6%9D%AF%E5%A4%8D%E7%8E%B0/4.bmp" alt="新建 BMP 图像"></p><h3 id="7、APK回传数据文件名称是什么。（标准格式：1-txt）"><a href="#7、APK回传数据文件名称是什么。（标准格式：1-txt）" class="headerlink" title="7、APK回传数据文件名称是什么。（标准格式：1.txt）"></a>7、APK回传数据文件名称是什么。（标准格式：1.txt）</h3><p>看到**<code>checkAndUpload</code>**函数，里面逻辑很清晰了，回传数据文件就是这个</p><p>FLAG：Readdata.zip</p><p><img src="/img/24%E7%8D%AC%E8%B1%B8%E6%9D%AF%E5%A4%8D%E7%8E%B0/5.bmp" alt="新建 BMP 图像 (5)"></p><h3 id="8、APK回传数据加密密码是多少。（标准格式：admin）"><a href="#8、APK回传数据加密密码是多少。（标准格式：admin）" class="headerlink" title="8、APK回传数据加密密码是多少。（标准格式：admin）"></a>8、APK回传数据加密密码是多少。（标准格式：admin）</h3><p>搜索encry发现encryfile函数</p><p>FLAG：19_08.05r</p><p><img src="/img/24%E7%8D%AC%E8%B1%B8%E6%9D%AF%E5%A4%8D%E7%8E%B0/6.bmp" alt="新建 BMP 图像 (6)"></p><h3 id="9、APK发送回后台服务器的数据包含以下哪些内容？（多选）"><a href="#9、APK发送回后台服务器的数据包含以下哪些内容？（多选）" class="headerlink" title="9、APK发送回后台服务器的数据包含以下哪些内容？（多选）"></a>9、APK发送回后台服务器的数据包含以下哪些内容？（多选）</h3><p>A.手机通讯录<br>B.手机短信<br>C.相册<br>D.GPS定位信息<br>E.手机应用列表</p><p>解法一：分析源码</p><p>把这四个函数内容丢给ai，即可分析出flag</p><p><img src="/img/24%E7%8D%AC%E8%B1%B8%E6%9D%AF%E5%A4%8D%E7%8E%B0/7.bmp" alt="新建 BMP 图像 (7)"></p><p>解法二：bp抓包，导出pk文件</p><p><img src="/img/24%E7%8D%AC%E8%B1%B8%E6%9D%AF%E5%A4%8D%E7%8E%B0/8.bmp" alt="新建 BMP 图像 (8)"></p><p>然后用上述密码打开查看即可</p><p>【妙妙取证小工具：burpsuite</p><p>使用前需要先导入bp证书并修改wifi的代理ip端口使其与bp内设置的相同，然后即可直接抓包，可以通过访问 <a href="http://burp/">http://burp</a> 来测试是否成功连通】</p><p>FLAG：ABE</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MCCTF-re-取证复现</title>
    <link href="/2025/08/18/MCCTF-re-%E5%8F%96%E8%AF%81%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/08/18/MCCTF-re-%E5%8F%96%E8%AF%81%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>·</p><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h4 id="Ezhard-launcher"><a href="#Ezhard-launcher" class="headerlink" title="Ezhard_launcher"></a>Ezhard_launcher</h4><p>直接给源文件的re题一般没有难的…直接看逻辑，异或0不用管，直接拼接就行</p><p>（re就出一题还这么简单…有点难绷）</p><h2 id="取证"><a href="#取证" class="headerlink" title="取证"></a>取证</h2><h4 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h4><p>【妙妙取证小工具   MemProcFS：</p><p>作用：<strong>把物理内存（RAM）映射为一个虚拟文件系统</strong>，用户可以像浏览普通文件夹一样，直接访问内存中的进程、模块、句柄、网络连接等信息。</p><p>用法：</p><p>（1）取证模式启动指令:</p><p><code>.\memprocfs.exe -device &quot;&lt;内存镜像文件（mem文件）&gt;&quot; -forensic 1</code></p><p>（2）分析进程信息:</p><p><code>mem</code>：进程内存空间</p><p><code>modules</code>：加载的 DLL 列表</p><p><code>handles</code>：句柄信息</p><p><code>threads</code>：线程堆栈】</p><p>【妙妙取证小工具 Volatility：</p><p>使用教程<a href="https://volatility3.readthedocs.io/en/latest/index.html?utm_source=chatgpt.com">Volatility 3 — Volatility 3 2.26.2 文档</a></p><p>本题使用的插件：</p><p>1.windows.netscan（1.1、2.1使用）</p><p>主要功能：</p><ul><li>枚举 <strong>TCP IPv4&#x2F;IPv6 连接</strong></li><li>枚举 <strong>UDP IPv4&#x2F;IPv6 端点</strong></li><li>列出 <strong>本地&#x2F;远程 IP 与端口</strong></li><li>显示 <strong>TCP 状态</strong>（LISTENING、ESTABLISHED、CLOSE_WAIT 等）</li><li>显示 <strong>所属进程</strong>（PID&#x2F;进程名）</li><li>提取 <strong>时间戳</strong>（对象创建时间）</li></ul><p>指令：</p><p><code>vol -f &lt;内存镜像文件（mem文件）&gt; windows.netscan [选项]</code></p><p><strong>常用参数</strong></p><ul><li><p><code>-p PID</code><br> 仅显示某个进程相关的网络对象。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">vol -f mem<span class="hljs-selector-class">.img</span> windows<span class="hljs-selector-class">.netscan</span> <span class="hljs-attr">--pid</span> <span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure></li><li><p><code>--dump</code><br> 部分版本支持将扫描到的对象导出（例如 PCAP、原始结构体），但标准版主要是显示表格。</p></li><li><p><code>-r json</code> &#x2F; <code>-r csv</code><br> 指定输出格式（renderer），方便后续处理：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">vol -f mem<span class="hljs-selector-class">.img</span> -<span class="hljs-attribute">r</span> json windows<span class="hljs-selector-class">.netscan</span> &gt; netscan<span class="hljs-selector-class">.json</span><br>vol -f mem<span class="hljs-selector-class">.img</span> -<span class="hljs-attribute">r</span> csv windows<span class="hljs-selector-class">.netscan</span> &gt; netscan<span class="hljs-selector-class">.csv</span><br></code></pre></td></tr></table></figure></li><li><p><code>-o &lt;目录&gt;</code><br> 指定输出目录（有的 renderer 或插件 dump 文件时需要）。</p></li><li><p><code>-vv</code><br> 打印更详细的调试信息。</p></li></ul><p>2.windows.pslist（3.1、4.1、5.1使用）</p><p>主要功能：</p><ul><li><strong>列举 Windows 内存镜像中的所有进程 (processes)</strong>。</li><li>信息来源是 <strong>EPROCESS 链表</strong>（内核里维护的进程列表）。</li><li>输出表格包含进程的 PID、父进程、进程名、创建&#x2F;退出时间、线程数、句柄数等。</li></ul><p><strong>常用用法</strong></p><ol><li><p><strong>查看所有进程</strong></p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">vol</span> -f mem.img windows.pslist<br></code></pre></td></tr></table></figure></li><li><p><strong>过滤特定进程（Windows）</strong></p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">vol</span> -f mem.img windows.pslist | <span class="hljs-built_in">findstr</span> notepad<br></code></pre></td></tr></table></figure></li><li><p><strong>输出为 JSON 或 CSV</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">vol -f mem<span class="hljs-selector-class">.img</span> -<span class="hljs-attribute">r</span> json windows<span class="hljs-selector-class">.pslist</span> &gt; pslist<span class="hljs-selector-class">.json</span><br>vol -f mem<span class="hljs-selector-class">.img</span> -<span class="hljs-attribute">r</span> csv windows<span class="hljs-selector-class">.pslist</span> &gt; pslist<span class="hljs-selector-class">.csv</span><br></code></pre></td></tr></table></figure></li><li><p><strong>结合其他插件</strong></p><ul><li>找到可疑进程 PID → 再用 <code>windows.dlllist</code> 查看加载的模块</li><li>再用 <code>windows.memdump</code> 或 <code>windows.memmap --dump</code> dump 内存</li></ul></li></ol><p>3.windows.memmap（3.1使用）</p><p><strong>插件作用</strong>：<strong>枚举并展示某个进程的虚拟内存空间映射情况</strong>。</p><p><strong>用法示例</strong></p><ol><li><p><strong>查看进程的内存映射</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">vol -f mem<span class="hljs-selector-class">.img</span> windows<span class="hljs-selector-class">.memmap</span> <span class="hljs-attr">--pid</span> <span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p>输出类似：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Virtual</span>            Physical        Size     File     Protection   Type<br><span class="hljs-attribute">0x0000000140000000</span> <span class="hljs-number">0</span>x0000000012345 <span class="hljs-number">0</span>x1000   notepad.exe  r-x      Image<br><span class="hljs-attribute">0x0000000140010000</span> <span class="hljs-number">0</span>x0000000012350 <span class="hljs-number">0</span>x2000   ntdll.dll    r--      Mapped<br><span class="hljs-attribute">0x0000000140030000</span> <span class="hljs-number">0</span>x0000000012360 <span class="hljs-number">0</span>x1000   -            rw-      Private<br></code></pre></td></tr></table></figure></li><li><p><strong>dump 进程的内存</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">vol -f mem<span class="hljs-selector-class">.img</span> windows<span class="hljs-selector-class">.memmap</span> <span class="hljs-attr">--pid</span> <span class="hljs-number">1234</span> <span class="hljs-attr">--dump</span> -o dumps/<br></code></pre></td></tr></table></figure><ul><li>会把进程的虚拟内存区域导出到 <code>dumps/</code> 目录</li><li>文件名中会包含虚拟地址，方便后续逆向分析</li></ul></li><li><p><strong>结合 strings&#x2F;分析工具使用</strong><br> dump 出的内存块可直接用 <code>strings</code> 搜索敏感数据，或丢进 IDA&#x2F;Ghidra 分析。</p></li></ol><p>】</p><p>用Volatility跑出来windows.netscan</p><p>在 netscan.txt 里能看到多条对 10.10.0.133:80 的入站连接，来源就是 10.10.0.1（网关&#x2F;反代的内侧地址），因此10.10.0.1就是攻击者ip地址。</p><h4 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h4><p>同一份netscan.txt，有一条已建立过的对外会话：</p><p>0x3fc827a0  TCPv4  10.10.0.133  64999    66.240.205.34    9002    CLOSE_WAIT -   -    N&#x2F;A</p><p>再加上word.exe 的字符串里也包含 66.240.205.34。所以推断攻击者外联 IP 和端口就是66.240.205.34:9002</p><h4 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h4><p>在内存镜像里先定位进程：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">vol</span> -f D:\BaiduNetdiskDownload\memdump\memdump.mem windows.pslist | <span class="hljs-built_in">findstr</span> /i notepad  <br></code></pre></td></tr></table></figure><p>dump 进程内存：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">vol -o D:\case\dump_notepad -f D:\BaiduNetdiskDownload\memdump\memdump<span class="hljs-selector-class">.mem</span> windows<span class="hljs-selector-class">.memmap</span> <span class="hljs-attr">--pid</span> <span class="hljs-number">1632</span> <span class="hljs-attr">--dump</span><br></code></pre></td></tr></table></figure><p>在 <code>dumps/</code> 目录里会生成一个 <code>.dmp</code> 文件，对应 notepad 的进程内存。</p><p>对 dump 出的进程镜像做字符串提取：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">string</span>s.exe -a -n <span class="hljs-number">6</span> D:\<span class="hljs-keyword">case</span>\dump_notepad\*.dmp &gt; D:\<span class="hljs-keyword">case</span>\notepad_strings_ascii.txt<br></code></pre></td></tr></table></figure><p>再搜索关键字，比如路径、后缀名、上传动作，这样就能找到上传路径：C:&#x2F;phpstudy_pro&#x2F;WWW&#x2F;uploads&#x2F;shell.php</p><h4 id="4-1"><a href="#4-1" class="headerlink" title="4.1"></a>4.1</h4><p>根据notepad的进程内存中找到的勒索信内容，复制后上网检索，得知勒索病毒为LockBit 3.0</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts">&gt;&gt;&gt;&gt; Your data are stolen and encrypted<br>The data will be published on TOR website if you do not pay the ransom<br>Links for Tor Browser:<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">http:</span><span class="hljs-comment">//lockbitapt2yfbt7lchxejuq47kmqvgqxvvipqkmevv4l3az13gy6pyd.onion</span><br><span class="hljs-symbol">http:</span><span class="hljs-comment">//lockbitapt5x4zkjbcqmz6fdhrdeqqgaadevviwgxukksspn1idyd7gd.onion</span><br><span class="hljs-symbol">http:</span><span class="hljs-comment">//lockbitapt6vx57t3eeqjofwgcplmutr3a35nygvokia5uucip4ykyd.onion</span><br><span class="hljs-symbol">http:</span><span class="hljs-comment">//lockbitapt34kvrip6xoiyl0hxhrwsvpzdfgfss5z4bbsyvnzsbdquqd.onion</span><br><span class="hljs-symbol">http:</span><span class="hljs-comment">//lockbitaptci2q4atewz2ise62q63wfktryl4qtuw5qax262gktzigd.onion</span><br><span class="hljs-symbol">http:</span><span class="hljs-comment">//lockbitaptipkdqjvnvoqzhc6bgetgucdk5xjacozeawihmoio6yd.onion</span><br><span class="hljs-symbol">http:</span><span class="hljs-comment">//lockbitapt7ephv2oigdncfthwhpgwmqojnxqdyh.onion</span><br></code></pre></td></tr></table></figure><h4 id="5-1"><a href="#5-1" class="headerlink" title="5.1"></a>5.1</h4><p>同上，可以看到域名：.onion</p><h4 id="6-1"><a href="#6-1" class="headerlink" title="6.1"></a>6.1</h4><p>经过构建攻击路线，猜测黑客通过皮肤上传站上传shell.php，拿到shell后上传勒索病毒，所以加密器在C:&#x2F;phpstudy_pro&#x2F;WWW&#x2F;uploads&#x2F;LB3Decryptor.exe，且经过前几题排查确定为LockBit3.0勒索病毒，到github拉下来分析build脚本，调用 keygen 以生成公钥和私钥加密密钥。</p><p>由于猜测是利用webshell上传的勒索病毒，所以在内存中搜索shell.php,找到了上传文件的包。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">volatility <span class="hljs-punctuation">-</span>f &lt;内存镜像文件&gt; windows.strings <span class="hljs-string">| grep &quot;</span>shell.php<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/MCCTF-re-%E5%8F%96%E8%AF%81%E5%A4%8D%E7%8E%B0/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250818185723.png" alt="如图"></p><p>然后找到公钥和私钥，用生成脚本生成出解密器，找到其解密日志文件即可</p><p>但是没有成功复现，回头复现好再补充吧()</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>whuctf新生练习赛-re-wp</title>
    <link href="/2025/08/08/whuctf%E6%96%B0%E7%94%9F%E7%BB%83%E4%B9%A0%E8%B5%9B-re-wp/"/>
    <url>/2025/08/08/whuctf%E6%96%B0%E7%94%9F%E7%BB%83%E4%B9%A0%E8%B5%9B-re-wp/</url>
    
    <content type="html"><![CDATA[<p>·</p><h2 id="guess-number"><a href="#guess-number" class="headerlink" title="guess number"></a>guess number</h2><p>在Linux系统里面运行即可，注意这个程序是32位的，而我们直接下载的Linux虚拟机&#x2F;wsl多数是64位的，需要再安装32位的支持包（直接问ai即可）</p><h2 id="ezbase"><a href="#ezbase" class="headerlink" title="ezbase"></a>ezbase</h2><p>这道题作为ida的入门，其实本意是在考察汇编语言（这题由于用的并不自己写的加密函数而是直接调用扩展的库函数，IDA反汇编结果有点过于难看了），关于汇编语言，这里推荐去看b站视频即可简单入门，看懂就行，刚开始没必要和c语言要求相同，还是主要学c语言先。</p><p>当然，由于用的函数不是自己写的，也就没有魔改，其实直接丢给ai（把反汇编的代码导出或者直接用截图问即可）也就能告诉你加密方式，这也就是传说中的“deepseek一把梭”（）</p><h2 id="asm-and-rc4"><a href="#asm-and-rc4" class="headerlink" title="asm_and_rc4"></a>asm_and_rc4</h2><p><del>（这题和上一题都出自同一人之手，不得不吐槽一下：h2q是真的喜欢汇编语言）</del></p><p>同样是汇编语言阅读，感觉比上一题还简单点，rc4也是很经典的加密方式了，可以去了解一下加密方式</p><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><p>直接看得到函数名为main_main的函数，打开，丢给ai分析，发现加密逻辑是密文&#x3D;（明文+114514）%65537，在ida里面看到的是被优化为了位运算的版本，直接用zi即可复原（当然也可以直接用ida弄出来的那个位运算，其实是一样的）</p><p>然后就是去找密文位置，在<code>unk_4FBCA0</code>位置处，注意，ida里面默认是小端存储（eg.0x1234存储为34 12），需要注意这一点</p><p>附上go源代码，方便对照</p><p><img src="/img/whuctf%E6%96%B0%E7%94%9F%E7%BB%83%E4%B9%A0%E8%B5%9B-re-wp/00F861B22DEE3AD71EF7A54F44237065.png"></p><h2 id="原神，启动？"><a href="#原神，启动？" class="headerlink" title="原神，启动？"></a>原神，启动？</h2><p>apk题目，直接放进JEB，能看到加密逻辑</p><p><img src="/img/whuctf%E6%96%B0%E7%94%9F%E7%BB%83%E4%B9%A0%E8%B5%9B-re-wp/D7F24C1E1921967893786C62B537D004.png" alt="主函数"></p><p>其实里面直接就有解密函数，如下，我们可以直接复制下来，没有java编译器的可以放在线编译器里面跑</p><p><img src="/img/whuctf%E6%96%B0%E7%94%9F%E7%BB%83%E4%B9%A0%E8%B5%9B-re-wp/7AB03163CE0A838CE959CF0EABCB36F0.png"></p><p>得到flag</p><h2 id="ez-rust"><a href="#ez-rust" class="headerlink" title="ez_rust"></a>ez_rust</h2><p>rust也是re不得不品的一环，当然新生赛自然有新生的解法：猜（）</p><p>直接shift+f12发现一个很明显的flag：</p><p><img src="/img/whuctf%E6%96%B0%E7%94%9F%E7%BB%83%E4%B9%A0%E8%B5%9B-re-wp/319CA3DA8DB223E21B4A4F62D743D059.png"></p><p>这个样子绝对是凯撒密码了，结束</p><p>当然我不希望这么解，下面是正常的解法：</p><p>搜索一下<code>unk_14001F700</code>，发现使用这个变量的函数：</p><p><img src="/img/whuctf%E6%96%B0%E7%94%9F%E7%BB%83%E4%B9%A0%E8%B5%9B-re-wp/A5F7A8973C3A38F51BF16B1FB5E90462.png"></p><p>在这里分析逻辑，建议还是用汇编语言来看，感觉反编译太不适合rust了</p><p><img src="/img/whuctf%E6%96%B0%E7%94%9F%E7%BB%83%E4%B9%A0%E8%B5%9B-re-wp/D1554FF35756B001043065727E1DA307.png" alt="核心逻辑"></p><p><img src="/img/whuctf%E6%96%B0%E7%94%9F%E7%BB%83%E4%B9%A0%E8%B5%9B-re-wp/6F43FA05FC925B4B2BAB6180B21D2E0F.png" alt="关键函数"></p><p>所以是凯撒加密</p><h2 id="喝杯花茶"><a href="#喝杯花茶" class="headerlink" title="喝杯花茶"></a>喝杯花茶</h2><p>茶–tea加密算法（因为是新生赛所以也是没有魔改，实际上可以直接不去除花指令猜出来）</p><p>花–tea_encrypt_block加入了花指令</p><p><img src="/img/whuctf%E6%96%B0%E7%94%9F%E7%BB%83%E4%B9%A0%E8%B5%9B-re-wp/6EFD6C3CA9F3CF0A1CE57BB03E720E01.png"></p><p>花指令：jz和jnz以及后面的那个立即数，直接nop掉就可以进行反汇编了</p><h2 id="BOSS"><a href="#BOSS" class="headerlink" title="BOSS"></a>BOSS</h2><p>（见前一篇博客）</p><h2 id="wave1-总结"><a href="#wave1-总结" class="headerlink" title="wave1 总结"></a>wave1 总结</h2><p>推荐各位再深入研究的知识点：汇编语言阅读，各种加密算法，花指令…</p><p>作为新生练习赛的第一波，基本都是没有魔改的经典加密算法（除了boss），所以蛮多都是可以直接猜出来的，整体上起一个帮助各位熟悉各个知识点的作用（我们也属实没想到这届新生大佬们这么强，简直不给劳登们活路呜呜呜）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>whuctf新生练习赛-re-boss-wp</title>
    <link href="/2025/08/06/whuctf%E6%96%B0%E7%94%9F%E7%BB%83%E4%B9%A0%E8%B5%9B-re-boss-wp/"/>
    <url>/2025/08/06/whuctf%E6%96%B0%E7%94%9F%E7%BB%83%E4%B9%A0%E8%B5%9B-re-boss-wp/</url>
    
    <content type="html"><![CDATA[<p>·</p><h3 id="1、修复DOS头"><a href="#1、修复DOS头" class="headerlink" title="1、修复DOS头"></a>1、修复DOS头</h3><p>打开DIE发现不能识别出文件类型，是DOS头受损，需要手动修复。打开010 Editor，果然文件头是错的。</p><p>DOS格式是什么呢？</p><p><strong>DOS头（IMAGE_DOS_HEADER）的大小为40H（64字节）</strong></p><p><strong>DOS头的基本结构如下：</strong></p><p>struct _IMAGE_DOS_HEADER {</p><p>0x00 WORD e_magic; * &#x2F;&#x2F;5A 4D MZ标记，用来判断是否为可执行文件</p><p>0x02 WORD e_cblp; &#x2F;&#x2F;00 90</p><p>0x04 WORD e_cp; &#x2F;&#x2F;00 03</p><p>0x06 WORD e_crlc; &#x2F;&#x2F;00 00</p><p>0x08 WORD e_cparhdr; &#x2F;&#x2F;00 04</p><p>0x0a WORD e_minalloc; &#x2F;&#x2F;00 00</p><p>0x0c WORD e_maxalloc; &#x2F;&#x2F;FF FF</p><p>0x0e WORD e_ss; &#x2F;&#x2F;00 00</p><p>0x10 WORD e_sp; &#x2F;&#x2F;00 B8</p><p>0x12 WORD e_csum; &#x2F;&#x2F;00 00</p><p>0x14 WORD e_ip; &#x2F;&#x2F;00 00</p><p>0x16 WORD e_cs; &#x2F;&#x2F;00 00</p><p>0x18 WORD e_lfarlc; &#x2F;&#x2F;00 40</p><p>0x1a WORD e_ovno; &#x2F;&#x2F;00 00</p><p>0x1c WORD e_res[4]; &#x2F;&#x2F;00 00 00 00</p><p>0x24 WORD e_oemid; &#x2F;&#x2F;00 00</p><p>0x26 WORD e_oeminfo; &#x2F;&#x2F;00 00</p><p>0x28 WORD e_res2[10]; &#x2F;&#x2F;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</p><p>0x3c DWORD e_lfanew; * &#x2F;&#x2F;00 00 00 E8 PE头相对于文件的偏移，用于定位PE文件</p><p>};</p><p>比较重要的两个地方：</p><p><code>e_magic</code>：在DOS头开始的位置，大小为2字节，存储的内容一般为<code>5A 4D</code>，也就是’MZ’的十六进制，’MZ’是MS-DOS的创建者之一Mark Zbikowski名字的缩写，通常用来判断文件是否为可执行文件。</p><p><code>e_lfanew</code>：在DOS头结束的位置，大小为4字节，是PE头相对于文件的偏移，用于定位PE文件头的位置。</p><p>故把mz改为大写，再把0x3c处00改为E8。</p><p><img src="/img/whuctf-boss/36322ECA74C24FC8D3E7AF73A1B487F0.png" alt="修改之后的结果"></p><p>修改之后就可以看到文件类型了，是upx加壳后的程序。</p><p><img src="/img/whuctf-boss/A10A90AB4C374F2980DEA98CA95D4730.png"></p><h3 id="2、UPX脱壳"><a href="#2、UPX脱壳" class="headerlink" title="2、UPX脱壳"></a>2、UPX脱壳</h3><p>用自动脱壳工具发现upx的头也被篡改，不能直接脱壳，所以我们有两种方式来完成脱壳：修复upx标志以自动脱壳，或者手动脱壳。</p><h4 id="（1）自动脱壳"><a href="#（1）自动脱壳" class="headerlink" title="（1）自动脱壳"></a>（1）自动脱壳</h4><p>在PE头后面的data段之后，我们就找到了section table，这部分每隔40字节就有一个upx，然后最后面版本号也需要一个upx，全部补齐后，我们就可以使用自动脱壳的脚本来做了。</p><h4 id="（2）手动脱壳（用x64dbg）"><a href="#（2）手动脱壳（用x64dbg）" class="headerlink" title="（2）手动脱壳（用x64dbg）"></a>（2）手动脱壳（用x64dbg）</h4><p>注意，目前新版的upx都已经不是以pushad和popad作为标志了，网上找到的大部分手动脱壳的教程有些过时了已经。</p><p>所以，我们能找到的依据是什么呢？</p><p>虽然pushad和popad已经没了，但是原理还是不变的，也就是在解压缩开始时压栈，在解压缩结束时弹出这部分栈。</p><p><img src="/img/whuctf-boss/F9620C4A6E4432EED1022A954DE6F2EE.png" alt="这是入口"></p><p>在入口处设置硬件断点，寻找到出口。</p><p><img src="/img/whuctf-boss/1A7C512D7D0C7A8024BEFCCF88AD3B1A.png" alt="这是出口"></p><p>在jmp后dump下来，就是脱壳后的程序了。</p><h3 id="3、IDA分析–tls回传函数"><a href="#3、IDA分析–tls回传函数" class="headerlink" title="3、IDA分析–tls回传函数"></a>3、IDA分析–tls回传函数</h3><p>TLS回调函数常用于反调试，主要是利用了<strong>TLS回调函数的调用要先于EP代码的执行</strong>。</p><p>翻阅函数列表，发现有一个函数名为TlsCallback_0</p><p><img src="/img/whuctf-boss/3576F0F83CF1AFC4DA77F2C86ECA24FE.png"></p><p>这就是那个tls回调函数，因此密钥实际上不是显示的那个’Reverse engineering is very hard and interesting’，而是经过处理后的</p><p>‘Reverse engineering is very easy and interesting’。</p><p>另外就是分析加密函数逻辑了，ai分析发现是魔改版的blowfish加密</p><h3 id="4、解密脚本–blowfish解密"><a href="#4、解密脚本–blowfish解密" class="headerlink" title="4、解密脚本–blowfish解密"></a>4、解密脚本–blowfish解密</h3><p>正常的ECB模式，没有数据填充（因为直接就是8的倍数，不需要填充）</p><p>魔改点：1、P盒初始化的时候多异或了一个0x12；</p><p>2、存储的时候是小段序，但blowfish加密是大端序的。</p><p>所以，我们可以将标准解密脚本修改如下</p><p>blowfish.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">使用BlowFish进行加解密</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//定义全局旧的pbox sbox 都是根据小数来的。</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N               16</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> ORIG_P[<span class="hljs-number">16</span> + <span class="hljs-number">2</span>] = &#123;<br>        <span class="hljs-number">0x243F6A88L</span>, <span class="hljs-number">0x85A308D3L</span>, <span class="hljs-number">0x13198A2EL</span>, <span class="hljs-number">0x03707344L</span>,<br>        <span class="hljs-number">0xA4093822L</span>, <span class="hljs-number">0x299F31D0L</span>, <span class="hljs-number">0x082EFA98L</span>, <span class="hljs-number">0xEC4E6C89L</span>,<br>        <span class="hljs-number">0x452821E6L</span>, <span class="hljs-number">0x38D01377L</span>, <span class="hljs-number">0xBE5466CFL</span>, <span class="hljs-number">0x34E90C6CL</span>,<br>        <span class="hljs-number">0xC0AC29B7L</span>, <span class="hljs-number">0xC97C50DDL</span>, <span class="hljs-number">0x3F84D5B5L</span>, <span class="hljs-number">0xB5470917L</span>,<br>        <span class="hljs-number">0x9216D5D9L</span>, <span class="hljs-number">0x8979FB1BL</span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> ORIG_S[<span class="hljs-number">4</span>][<span class="hljs-number">256</span>] = &#123;<br>    &#123;   <span class="hljs-number">0xD1310BA6L</span>, <span class="hljs-number">0x98DFB5ACL</span>, <span class="hljs-number">0x2FFD72DBL</span>, <span class="hljs-number">0xD01ADFB7L</span>,<br>        <span class="hljs-number">0xB8E1AFEDL</span>, <span class="hljs-number">0x6A267E96L</span>, <span class="hljs-number">0xBA7C9045L</span>, <span class="hljs-number">0xF12C7F99L</span>,<br>        <span class="hljs-number">0x24A19947L</span>, <span class="hljs-number">0xB3916CF7L</span>, <span class="hljs-number">0x0801F2E2L</span>, <span class="hljs-number">0x858EFC16L</span>,<br>        <span class="hljs-number">0x636920D8L</span>, <span class="hljs-number">0x71574E69L</span>, <span class="hljs-number">0xA458FEA3L</span>, <span class="hljs-number">0xF4933D7EL</span>,<br>        <span class="hljs-number">0x0D95748FL</span>, <span class="hljs-number">0x728EB658L</span>, <span class="hljs-number">0x718BCD58L</span>, <span class="hljs-number">0x82154AEEL</span>,<br>        <span class="hljs-number">0x7B54A41DL</span>, <span class="hljs-number">0xC25A59B5L</span>, <span class="hljs-number">0x9C30D539L</span>, <span class="hljs-number">0x2AF26013L</span>,<br>        <span class="hljs-number">0xC5D1B023L</span>, <span class="hljs-number">0x286085F0L</span>, <span class="hljs-number">0xCA417918L</span>, <span class="hljs-number">0xB8DB38EFL</span>,<br>        <span class="hljs-number">0x8E79DCB0L</span>, <span class="hljs-number">0x603A180EL</span>, <span class="hljs-number">0x6C9E0E8BL</span>, <span class="hljs-number">0xB01E8A3EL</span>,<br>        <span class="hljs-number">0xD71577C1L</span>, <span class="hljs-number">0xBD314B27L</span>, <span class="hljs-number">0x78AF2FDAL</span>, <span class="hljs-number">0x55605C60L</span>,<br>        <span class="hljs-number">0xE65525F3L</span>, <span class="hljs-number">0xAA55AB94L</span>, <span class="hljs-number">0x57489862L</span>, <span class="hljs-number">0x63E81440L</span>,<br>        <span class="hljs-number">0x55CA396AL</span>, <span class="hljs-number">0x2AAB10B6L</span>, <span class="hljs-number">0xB4CC5C34L</span>, <span class="hljs-number">0x1141E8CEL</span>,<br>        <span class="hljs-number">0xA15486AFL</span>, <span class="hljs-number">0x7C72E993L</span>, <span class="hljs-number">0xB3EE1411L</span>, <span class="hljs-number">0x636FBC2AL</span>,<br>        <span class="hljs-number">0x2BA9C55DL</span>, <span class="hljs-number">0x741831F6L</span>, <span class="hljs-number">0xCE5C3E16L</span>, <span class="hljs-number">0x9B87931EL</span>,<br>        <span class="hljs-number">0xAFD6BA33L</span>, <span class="hljs-number">0x6C24CF5CL</span>, <span class="hljs-number">0x7A325381L</span>, <span class="hljs-number">0x28958677L</span>,<br>        <span class="hljs-number">0x3B8F4898L</span>, <span class="hljs-number">0x6B4BB9AFL</span>, <span class="hljs-number">0xC4BFE81BL</span>, <span class="hljs-number">0x66282193L</span>,<br>        <span class="hljs-number">0x61D809CCL</span>, <span class="hljs-number">0xFB21A991L</span>, <span class="hljs-number">0x487CAC60L</span>, <span class="hljs-number">0x5DEC8032L</span>,<br>        <span class="hljs-number">0xEF845D5DL</span>, <span class="hljs-number">0xE98575B1L</span>, <span class="hljs-number">0xDC262302L</span>, <span class="hljs-number">0xEB651B88L</span>,<br>        <span class="hljs-number">0x23893E81L</span>, <span class="hljs-number">0xD396ACC5L</span>, <span class="hljs-number">0x0F6D6FF3L</span>, <span class="hljs-number">0x83F44239L</span>,<br>        <span class="hljs-number">0x2E0B4482L</span>, <span class="hljs-number">0xA4842004L</span>, <span class="hljs-number">0x69C8F04AL</span>, <span class="hljs-number">0x9E1F9B5EL</span>,<br>        <span class="hljs-number">0x21C66842L</span>, <span class="hljs-number">0xF6E96C9AL</span>, <span class="hljs-number">0x670C9C61L</span>, <span class="hljs-number">0xABD388F0L</span>,<br>        <span class="hljs-number">0x6A51A0D2L</span>, <span class="hljs-number">0xD8542F68L</span>, <span class="hljs-number">0x960FA728L</span>, <span class="hljs-number">0xAB5133A3L</span>,<br>        <span class="hljs-number">0x6EEF0B6CL</span>, <span class="hljs-number">0x137A3BE4L</span>, <span class="hljs-number">0xBA3BF050L</span>, <span class="hljs-number">0x7EFB2A98L</span>,<br>        <span class="hljs-number">0xA1F1651DL</span>, <span class="hljs-number">0x39AF0176L</span>, <span class="hljs-number">0x66CA593EL</span>, <span class="hljs-number">0x82430E88L</span>,<br>        <span class="hljs-number">0x8CEE8619L</span>, <span class="hljs-number">0x456F9FB4L</span>, <span class="hljs-number">0x7D84A5C3L</span>, <span class="hljs-number">0x3B8B5EBEL</span>,<br>        <span class="hljs-number">0xE06F75D8L</span>, <span class="hljs-number">0x85C12073L</span>, <span class="hljs-number">0x401A449FL</span>, <span class="hljs-number">0x56C16AA6L</span>,<br>        <span class="hljs-number">0x4ED3AA62L</span>, <span class="hljs-number">0x363F7706L</span>, <span class="hljs-number">0x1BFEDF72L</span>, <span class="hljs-number">0x429B023DL</span>,<br>        <span class="hljs-number">0x37D0D724L</span>, <span class="hljs-number">0xD00A1248L</span>, <span class="hljs-number">0xDB0FEAD3L</span>, <span class="hljs-number">0x49F1C09BL</span>,<br>        <span class="hljs-number">0x075372C9L</span>, <span class="hljs-number">0x80991B7BL</span>, <span class="hljs-number">0x25D479D8L</span>, <span class="hljs-number">0xF6E8DEF7L</span>,<br>        <span class="hljs-number">0xE3FE501AL</span>, <span class="hljs-number">0xB6794C3BL</span>, <span class="hljs-number">0x976CE0BDL</span>, <span class="hljs-number">0x04C006BAL</span>,<br>        <span class="hljs-number">0xC1A94FB6L</span>, <span class="hljs-number">0x409F60C4L</span>, <span class="hljs-number">0x5E5C9EC2L</span>, <span class="hljs-number">0x196A2463L</span>,<br>        <span class="hljs-number">0x68FB6FAFL</span>, <span class="hljs-number">0x3E6C53B5L</span>, <span class="hljs-number">0x1339B2EBL</span>, <span class="hljs-number">0x3B52EC6FL</span>,<br>        <span class="hljs-number">0x6DFC511FL</span>, <span class="hljs-number">0x9B30952CL</span>, <span class="hljs-number">0xCC814544L</span>, <span class="hljs-number">0xAF5EBD09L</span>,<br>        <span class="hljs-number">0xBEE3D004L</span>, <span class="hljs-number">0xDE334AFDL</span>, <span class="hljs-number">0x660F2807L</span>, <span class="hljs-number">0x192E4BB3L</span>,<br>        <span class="hljs-number">0xC0CBA857L</span>, <span class="hljs-number">0x45C8740FL</span>, <span class="hljs-number">0xD20B5F39L</span>, <span class="hljs-number">0xB9D3FBDBL</span>,<br>        <span class="hljs-number">0x5579C0BDL</span>, <span class="hljs-number">0x1A60320AL</span>, <span class="hljs-number">0xD6A100C6L</span>, <span class="hljs-number">0x402C7279L</span>,<br>        <span class="hljs-number">0x679F25FEL</span>, <span class="hljs-number">0xFB1FA3CCL</span>, <span class="hljs-number">0x8EA5E9F8L</span>, <span class="hljs-number">0xDB3222F8L</span>,<br>        <span class="hljs-number">0x3C7516DFL</span>, <span class="hljs-number">0xFD616B15L</span>, <span class="hljs-number">0x2F501EC8L</span>, <span class="hljs-number">0xAD0552ABL</span>,<br>        <span class="hljs-number">0x323DB5FAL</span>, <span class="hljs-number">0xFD238760L</span>, <span class="hljs-number">0x53317B48L</span>, <span class="hljs-number">0x3E00DF82L</span>,<br>        <span class="hljs-number">0x9E5C57BBL</span>, <span class="hljs-number">0xCA6F8CA0L</span>, <span class="hljs-number">0x1A87562EL</span>, <span class="hljs-number">0xDF1769DBL</span>,<br>        <span class="hljs-number">0xD542A8F6L</span>, <span class="hljs-number">0x287EFFC3L</span>, <span class="hljs-number">0xAC6732C6L</span>, <span class="hljs-number">0x8C4F5573L</span>,<br>        <span class="hljs-number">0x695B27B0L</span>, <span class="hljs-number">0xBBCA58C8L</span>, <span class="hljs-number">0xE1FFA35DL</span>, <span class="hljs-number">0xB8F011A0L</span>,<br>        <span class="hljs-number">0x10FA3D98L</span>, <span class="hljs-number">0xFD2183B8L</span>, <span class="hljs-number">0x4AFCB56CL</span>, <span class="hljs-number">0x2DD1D35BL</span>,<br>        <span class="hljs-number">0x9A53E479L</span>, <span class="hljs-number">0xB6F84565L</span>, <span class="hljs-number">0xD28E49BCL</span>, <span class="hljs-number">0x4BFB9790L</span>,<br>        <span class="hljs-number">0xE1DDF2DAL</span>, <span class="hljs-number">0xA4CB7E33L</span>, <span class="hljs-number">0x62FB1341L</span>, <span class="hljs-number">0xCEE4C6E8L</span>,<br>        <span class="hljs-number">0xEF20CADAL</span>, <span class="hljs-number">0x36774C01L</span>, <span class="hljs-number">0xD07E9EFEL</span>, <span class="hljs-number">0x2BF11FB4L</span>,<br>        <span class="hljs-number">0x95DBDA4DL</span>, <span class="hljs-number">0xAE909198L</span>, <span class="hljs-number">0xEAAD8E71L</span>, <span class="hljs-number">0x6B93D5A0L</span>,<br>        <span class="hljs-number">0xD08ED1D0L</span>, <span class="hljs-number">0xAFC725E0L</span>, <span class="hljs-number">0x8E3C5B2FL</span>, <span class="hljs-number">0x8E7594B7L</span>,<br>        <span class="hljs-number">0x8FF6E2FBL</span>, <span class="hljs-number">0xF2122B64L</span>, <span class="hljs-number">0x8888B812L</span>, <span class="hljs-number">0x900DF01CL</span>,<br>        <span class="hljs-number">0x4FAD5EA0L</span>, <span class="hljs-number">0x688FC31CL</span>, <span class="hljs-number">0xD1CFF191L</span>, <span class="hljs-number">0xB3A8C1ADL</span>,<br>        <span class="hljs-number">0x2F2F2218L</span>, <span class="hljs-number">0xBE0E1777L</span>, <span class="hljs-number">0xEA752DFEL</span>, <span class="hljs-number">0x8B021FA1L</span>,<br>        <span class="hljs-number">0xE5A0CC0FL</span>, <span class="hljs-number">0xB56F74E8L</span>, <span class="hljs-number">0x18ACF3D6L</span>, <span class="hljs-number">0xCE89E299L</span>,<br>        <span class="hljs-number">0xB4A84FE0L</span>, <span class="hljs-number">0xFD13E0B7L</span>, <span class="hljs-number">0x7CC43B81L</span>, <span class="hljs-number">0xD2ADA8D9L</span>,<br>        <span class="hljs-number">0x165FA266L</span>, <span class="hljs-number">0x80957705L</span>, <span class="hljs-number">0x93CC7314L</span>, <span class="hljs-number">0x211A1477L</span>,<br>        <span class="hljs-number">0xE6AD2065L</span>, <span class="hljs-number">0x77B5FA86L</span>, <span class="hljs-number">0xC75442F5L</span>, <span class="hljs-number">0xFB9D35CFL</span>,<br>        <span class="hljs-number">0xEBCDAF0CL</span>, <span class="hljs-number">0x7B3E89A0L</span>, <span class="hljs-number">0xD6411BD3L</span>, <span class="hljs-number">0xAE1E7E49L</span>,<br>        <span class="hljs-number">0x00250E2DL</span>, <span class="hljs-number">0x2071B35EL</span>, <span class="hljs-number">0x226800BBL</span>, <span class="hljs-number">0x57B8E0AFL</span>,<br>        <span class="hljs-number">0x2464369BL</span>, <span class="hljs-number">0xF009B91EL</span>, <span class="hljs-number">0x5563911DL</span>, <span class="hljs-number">0x59DFA6AAL</span>,<br>        <span class="hljs-number">0x78C14389L</span>, <span class="hljs-number">0xD95A537FL</span>, <span class="hljs-number">0x207D5BA2L</span>, <span class="hljs-number">0x02E5B9C5L</span>,<br>        <span class="hljs-number">0x83260376L</span>, <span class="hljs-number">0x6295CFA9L</span>, <span class="hljs-number">0x11C81968L</span>, <span class="hljs-number">0x4E734A41L</span>,<br>        <span class="hljs-number">0xB3472DCAL</span>, <span class="hljs-number">0x7B14A94AL</span>, <span class="hljs-number">0x1B510052L</span>, <span class="hljs-number">0x9A532915L</span>,<br>        <span class="hljs-number">0xD60F573FL</span>, <span class="hljs-number">0xBC9BC6E4L</span>, <span class="hljs-number">0x2B60A476L</span>, <span class="hljs-number">0x81E67400L</span>,<br>        <span class="hljs-number">0x08BA6FB5L</span>, <span class="hljs-number">0x571BE91FL</span>, <span class="hljs-number">0xF296EC6BL</span>, <span class="hljs-number">0x2A0DD915L</span>,<br>        <span class="hljs-number">0xB6636521L</span>, <span class="hljs-number">0xE7B9F9B6L</span>, <span class="hljs-number">0xFF34052EL</span>, <span class="hljs-number">0xC5855664L</span>,<br>        <span class="hljs-number">0x53B02D5DL</span>, <span class="hljs-number">0xA99F8FA1L</span>, <span class="hljs-number">0x08BA4799L</span>, <span class="hljs-number">0x6E85076AL</span>   &#125;,<br>    &#123;   <span class="hljs-number">0x4B7A70E9L</span>, <span class="hljs-number">0xB5B32944L</span>, <span class="hljs-number">0xDB75092EL</span>, <span class="hljs-number">0xC4192623L</span>,<br>        <span class="hljs-number">0xAD6EA6B0L</span>, <span class="hljs-number">0x49A7DF7DL</span>, <span class="hljs-number">0x9CEE60B8L</span>, <span class="hljs-number">0x8FEDB266L</span>,<br>        <span class="hljs-number">0xECAA8C71L</span>, <span class="hljs-number">0x699A17FFL</span>, <span class="hljs-number">0x5664526CL</span>, <span class="hljs-number">0xC2B19EE1L</span>,<br>        <span class="hljs-number">0x193602A5L</span>, <span class="hljs-number">0x75094C29L</span>, <span class="hljs-number">0xA0591340L</span>, <span class="hljs-number">0xE4183A3EL</span>,<br>        <span class="hljs-number">0x3F54989AL</span>, <span class="hljs-number">0x5B429D65L</span>, <span class="hljs-number">0x6B8FE4D6L</span>, <span class="hljs-number">0x99F73FD6L</span>,<br>        <span class="hljs-number">0xA1D29C07L</span>, <span class="hljs-number">0xEFE830F5L</span>, <span class="hljs-number">0x4D2D38E6L</span>, <span class="hljs-number">0xF0255DC1L</span>,<br>        <span class="hljs-number">0x4CDD2086L</span>, <span class="hljs-number">0x8470EB26L</span>, <span class="hljs-number">0x6382E9C6L</span>, <span class="hljs-number">0x021ECC5EL</span>,<br>        <span class="hljs-number">0x09686B3FL</span>, <span class="hljs-number">0x3EBAEFC9L</span>, <span class="hljs-number">0x3C971814L</span>, <span class="hljs-number">0x6B6A70A1L</span>,<br>        <span class="hljs-number">0x687F3584L</span>, <span class="hljs-number">0x52A0E286L</span>, <span class="hljs-number">0xB79C5305L</span>, <span class="hljs-number">0xAA500737L</span>,<br>        <span class="hljs-number">0x3E07841CL</span>, <span class="hljs-number">0x7FDEAE5CL</span>, <span class="hljs-number">0x8E7D44ECL</span>, <span class="hljs-number">0x5716F2B8L</span>,<br>        <span class="hljs-number">0xB03ADA37L</span>, <span class="hljs-number">0xF0500C0DL</span>, <span class="hljs-number">0xF01C1F04L</span>, <span class="hljs-number">0x0200B3FFL</span>,<br>        <span class="hljs-number">0xAE0CF51AL</span>, <span class="hljs-number">0x3CB574B2L</span>, <span class="hljs-number">0x25837A58L</span>, <span class="hljs-number">0xDC0921BDL</span>,<br>        <span class="hljs-number">0xD19113F9L</span>, <span class="hljs-number">0x7CA92FF6L</span>, <span class="hljs-number">0x94324773L</span>, <span class="hljs-number">0x22F54701L</span>,<br>        <span class="hljs-number">0x3AE5E581L</span>, <span class="hljs-number">0x37C2DADCL</span>, <span class="hljs-number">0xC8B57634L</span>, <span class="hljs-number">0x9AF3DDA7L</span>,<br>        <span class="hljs-number">0xA9446146L</span>, <span class="hljs-number">0x0FD0030EL</span>, <span class="hljs-number">0xECC8C73EL</span>, <span class="hljs-number">0xA4751E41L</span>,<br>        <span class="hljs-number">0xE238CD99L</span>, <span class="hljs-number">0x3BEA0E2FL</span>, <span class="hljs-number">0x3280BBA1L</span>, <span class="hljs-number">0x183EB331L</span>,<br>        <span class="hljs-number">0x4E548B38L</span>, <span class="hljs-number">0x4F6DB908L</span>, <span class="hljs-number">0x6F420D03L</span>, <span class="hljs-number">0xF60A04BFL</span>,<br>        <span class="hljs-number">0x2CB81290L</span>, <span class="hljs-number">0x24977C79L</span>, <span class="hljs-number">0x5679B072L</span>, <span class="hljs-number">0xBCAF89AFL</span>,<br>        <span class="hljs-number">0xDE9A771FL</span>, <span class="hljs-number">0xD9930810L</span>, <span class="hljs-number">0xB38BAE12L</span>, <span class="hljs-number">0xDCCF3F2EL</span>,<br>        <span class="hljs-number">0x5512721FL</span>, <span class="hljs-number">0x2E6B7124L</span>, <span class="hljs-number">0x501ADDE6L</span>, <span class="hljs-number">0x9F84CD87L</span>,<br>        <span class="hljs-number">0x7A584718L</span>, <span class="hljs-number">0x7408DA17L</span>, <span class="hljs-number">0xBC9F9ABCL</span>, <span class="hljs-number">0xE94B7D8CL</span>,<br>        <span class="hljs-number">0xEC7AEC3AL</span>, <span class="hljs-number">0xDB851DFAL</span>, <span class="hljs-number">0x63094366L</span>, <span class="hljs-number">0xC464C3D2L</span>,<br>        <span class="hljs-number">0xEF1C1847L</span>, <span class="hljs-number">0x3215D908L</span>, <span class="hljs-number">0xDD433B37L</span>, <span class="hljs-number">0x24C2BA16L</span>,<br>        <span class="hljs-number">0x12A14D43L</span>, <span class="hljs-number">0x2A65C451L</span>, <span class="hljs-number">0x50940002L</span>, <span class="hljs-number">0x133AE4DDL</span>,<br>        <span class="hljs-number">0x71DFF89EL</span>, <span class="hljs-number">0x10314E55L</span>, <span class="hljs-number">0x81AC77D6L</span>, <span class="hljs-number">0x5F11199BL</span>,<br>        <span class="hljs-number">0x043556F1L</span>, <span class="hljs-number">0xD7A3C76BL</span>, <span class="hljs-number">0x3C11183BL</span>, <span class="hljs-number">0x5924A509L</span>,<br>        <span class="hljs-number">0xF28FE6EDL</span>, <span class="hljs-number">0x97F1FBFAL</span>, <span class="hljs-number">0x9EBABF2CL</span>, <span class="hljs-number">0x1E153C6EL</span>,<br>        <span class="hljs-number">0x86E34570L</span>, <span class="hljs-number">0xEAE96FB1L</span>, <span class="hljs-number">0x860E5E0AL</span>, <span class="hljs-number">0x5A3E2AB3L</span>,<br>        <span class="hljs-number">0x771FE71CL</span>, <span class="hljs-number">0x4E3D06FAL</span>, <span class="hljs-number">0x2965DCB9L</span>, <span class="hljs-number">0x99E71D0FL</span>,<br>        <span class="hljs-number">0x803E89D6L</span>, <span class="hljs-number">0x5266C825L</span>, <span class="hljs-number">0x2E4CC978L</span>, <span class="hljs-number">0x9C10B36AL</span>,<br>        <span class="hljs-number">0xC6150EBAL</span>, <span class="hljs-number">0x94E2EA78L</span>, <span class="hljs-number">0xA5FC3C53L</span>, <span class="hljs-number">0x1E0A2DF4L</span>,<br>        <span class="hljs-number">0xF2F74EA7L</span>, <span class="hljs-number">0x361D2B3DL</span>, <span class="hljs-number">0x1939260FL</span>, <span class="hljs-number">0x19C27960L</span>,<br>        <span class="hljs-number">0x5223A708L</span>, <span class="hljs-number">0xF71312B6L</span>, <span class="hljs-number">0xEBADFE6EL</span>, <span class="hljs-number">0xEAC31F66L</span>,<br>        <span class="hljs-number">0xE3BC4595L</span>, <span class="hljs-number">0xA67BC883L</span>, <span class="hljs-number">0xB17F37D1L</span>, <span class="hljs-number">0x018CFF28L</span>,<br>        <span class="hljs-number">0xC332DDEFL</span>, <span class="hljs-number">0xBE6C5AA5L</span>, <span class="hljs-number">0x65582185L</span>, <span class="hljs-number">0x68AB9802L</span>,<br>        <span class="hljs-number">0xEECEA50FL</span>, <span class="hljs-number">0xDB2F953BL</span>, <span class="hljs-number">0x2AEF7DADL</span>, <span class="hljs-number">0x5B6E2F84L</span>,<br>        <span class="hljs-number">0x1521B628L</span>, <span class="hljs-number">0x29076170L</span>, <span class="hljs-number">0xECDD4775L</span>, <span class="hljs-number">0x619F1510L</span>,<br>        <span class="hljs-number">0x13CCA830L</span>, <span class="hljs-number">0xEB61BD96L</span>, <span class="hljs-number">0x0334FE1EL</span>, <span class="hljs-number">0xAA0363CFL</span>,<br>        <span class="hljs-number">0xB5735C90L</span>, <span class="hljs-number">0x4C70A239L</span>, <span class="hljs-number">0xD59E9E0BL</span>, <span class="hljs-number">0xCBAADE14L</span>,<br>        <span class="hljs-number">0xEECC86BCL</span>, <span class="hljs-number">0x60622CA7L</span>, <span class="hljs-number">0x9CAB5CABL</span>, <span class="hljs-number">0xB2F3846EL</span>,<br>        <span class="hljs-number">0x648B1EAFL</span>, <span class="hljs-number">0x19BDF0CAL</span>, <span class="hljs-number">0xA02369B9L</span>, <span class="hljs-number">0x655ABB50L</span>,<br>        <span class="hljs-number">0x40685A32L</span>, <span class="hljs-number">0x3C2AB4B3L</span>, <span class="hljs-number">0x319EE9D5L</span>, <span class="hljs-number">0xC021B8F7L</span>,<br>        <span class="hljs-number">0x9B540B19L</span>, <span class="hljs-number">0x875FA099L</span>, <span class="hljs-number">0x95F7997EL</span>, <span class="hljs-number">0x623D7DA8L</span>,<br>        <span class="hljs-number">0xF837889AL</span>, <span class="hljs-number">0x97E32D77L</span>, <span class="hljs-number">0x11ED935FL</span>, <span class="hljs-number">0x16681281L</span>,<br>        <span class="hljs-number">0x0E358829L</span>, <span class="hljs-number">0xC7E61FD6L</span>, <span class="hljs-number">0x96DEDFA1L</span>, <span class="hljs-number">0x7858BA99L</span>,<br>        <span class="hljs-number">0x57F584A5L</span>, <span class="hljs-number">0x1B227263L</span>, <span class="hljs-number">0x9B83C3FFL</span>, <span class="hljs-number">0x1AC24696L</span>,<br>        <span class="hljs-number">0xCDB30AEBL</span>, <span class="hljs-number">0x532E3054L</span>, <span class="hljs-number">0x8FD948E4L</span>, <span class="hljs-number">0x6DBC3128L</span>,<br>        <span class="hljs-number">0x58EBF2EFL</span>, <span class="hljs-number">0x34C6FFEAL</span>, <span class="hljs-number">0xFE28ED61L</span>, <span class="hljs-number">0xEE7C3C73L</span>,<br>        <span class="hljs-number">0x5D4A14D9L</span>, <span class="hljs-number">0xE864B7E3L</span>, <span class="hljs-number">0x42105D14L</span>, <span class="hljs-number">0x203E13E0L</span>,<br>        <span class="hljs-number">0x45EEE2B6L</span>, <span class="hljs-number">0xA3AAABEAL</span>, <span class="hljs-number">0xDB6C4F15L</span>, <span class="hljs-number">0xFACB4FD0L</span>,<br>        <span class="hljs-number">0xC742F442L</span>, <span class="hljs-number">0xEF6ABBB5L</span>, <span class="hljs-number">0x654F3B1DL</span>, <span class="hljs-number">0x41CD2105L</span>,<br>        <span class="hljs-number">0xD81E799EL</span>, <span class="hljs-number">0x86854DC7L</span>, <span class="hljs-number">0xE44B476AL</span>, <span class="hljs-number">0x3D816250L</span>,<br>        <span class="hljs-number">0xCF62A1F2L</span>, <span class="hljs-number">0x5B8D2646L</span>, <span class="hljs-number">0xFC8883A0L</span>, <span class="hljs-number">0xC1C7B6A3L</span>,<br>        <span class="hljs-number">0x7F1524C3L</span>, <span class="hljs-number">0x69CB7492L</span>, <span class="hljs-number">0x47848A0BL</span>, <span class="hljs-number">0x5692B285L</span>,<br>        <span class="hljs-number">0x095BBF00L</span>, <span class="hljs-number">0xAD19489DL</span>, <span class="hljs-number">0x1462B174L</span>, <span class="hljs-number">0x23820E00L</span>,<br>        <span class="hljs-number">0x58428D2AL</span>, <span class="hljs-number">0x0C55F5EAL</span>, <span class="hljs-number">0x1DADF43EL</span>, <span class="hljs-number">0x233F7061L</span>,<br>        <span class="hljs-number">0x3372F092L</span>, <span class="hljs-number">0x8D937E41L</span>, <span class="hljs-number">0xD65FECF1L</span>, <span class="hljs-number">0x6C223BDBL</span>,<br>        <span class="hljs-number">0x7CDE3759L</span>, <span class="hljs-number">0xCBEE7460L</span>, <span class="hljs-number">0x4085F2A7L</span>, <span class="hljs-number">0xCE77326EL</span>,<br>        <span class="hljs-number">0xA6078084L</span>, <span class="hljs-number">0x19F8509EL</span>, <span class="hljs-number">0xE8EFD855L</span>, <span class="hljs-number">0x61D99735L</span>,<br>        <span class="hljs-number">0xA969A7AAL</span>, <span class="hljs-number">0xC50C06C2L</span>, <span class="hljs-number">0x5A04ABFCL</span>, <span class="hljs-number">0x800BCADCL</span>,<br>        <span class="hljs-number">0x9E447A2EL</span>, <span class="hljs-number">0xC3453484L</span>, <span class="hljs-number">0xFDD56705L</span>, <span class="hljs-number">0x0E1E9EC9L</span>,<br>        <span class="hljs-number">0xDB73DBD3L</span>, <span class="hljs-number">0x105588CDL</span>, <span class="hljs-number">0x675FDA79L</span>, <span class="hljs-number">0xE3674340L</span>,<br>        <span class="hljs-number">0xC5C43465L</span>, <span class="hljs-number">0x713E38D8L</span>, <span class="hljs-number">0x3D28F89EL</span>, <span class="hljs-number">0xF16DFF20L</span>,<br>        <span class="hljs-number">0x153E21E7L</span>, <span class="hljs-number">0x8FB03D4AL</span>, <span class="hljs-number">0xE6E39F2BL</span>, <span class="hljs-number">0xDB83ADF7L</span>   &#125;,<br>    &#123;   <span class="hljs-number">0xE93D5A68L</span>, <span class="hljs-number">0x948140F7L</span>, <span class="hljs-number">0xF64C261CL</span>, <span class="hljs-number">0x94692934L</span>,<br>        <span class="hljs-number">0x411520F7L</span>, <span class="hljs-number">0x7602D4F7L</span>, <span class="hljs-number">0xBCF46B2EL</span>, <span class="hljs-number">0xD4A20068L</span>,<br>        <span class="hljs-number">0xD4082471L</span>, <span class="hljs-number">0x3320F46AL</span>, <span class="hljs-number">0x43B7D4B7L</span>, <span class="hljs-number">0x500061AFL</span>,<br>        <span class="hljs-number">0x1E39F62EL</span>, <span class="hljs-number">0x97244546L</span>, <span class="hljs-number">0x14214F74L</span>, <span class="hljs-number">0xBF8B8840L</span>,<br>        <span class="hljs-number">0x4D95FC1DL</span>, <span class="hljs-number">0x96B591AFL</span>, <span class="hljs-number">0x70F4DDD3L</span>, <span class="hljs-number">0x66A02F45L</span>,<br>        <span class="hljs-number">0xBFBC09ECL</span>, <span class="hljs-number">0x03BD9785L</span>, <span class="hljs-number">0x7FAC6DD0L</span>, <span class="hljs-number">0x31CB8504L</span>,<br>        <span class="hljs-number">0x96EB27B3L</span>, <span class="hljs-number">0x55FD3941L</span>, <span class="hljs-number">0xDA2547E6L</span>, <span class="hljs-number">0xABCA0A9AL</span>,<br>        <span class="hljs-number">0x28507825L</span>, <span class="hljs-number">0x530429F4L</span>, <span class="hljs-number">0x0A2C86DAL</span>, <span class="hljs-number">0xE9B66DFBL</span>,<br>        <span class="hljs-number">0x68DC1462L</span>, <span class="hljs-number">0xD7486900L</span>, <span class="hljs-number">0x680EC0A4L</span>, <span class="hljs-number">0x27A18DEEL</span>,<br>        <span class="hljs-number">0x4F3FFEA2L</span>, <span class="hljs-number">0xE887AD8CL</span>, <span class="hljs-number">0xB58CE006L</span>, <span class="hljs-number">0x7AF4D6B6L</span>,<br>        <span class="hljs-number">0xAACE1E7CL</span>, <span class="hljs-number">0xD3375FECL</span>, <span class="hljs-number">0xCE78A399L</span>, <span class="hljs-number">0x406B2A42L</span>,<br>        <span class="hljs-number">0x20FE9E35L</span>, <span class="hljs-number">0xD9F385B9L</span>, <span class="hljs-number">0xEE39D7ABL</span>, <span class="hljs-number">0x3B124E8BL</span>,<br>        <span class="hljs-number">0x1DC9FAF7L</span>, <span class="hljs-number">0x4B6D1856L</span>, <span class="hljs-number">0x26A36631L</span>, <span class="hljs-number">0xEAE397B2L</span>,<br>        <span class="hljs-number">0x3A6EFA74L</span>, <span class="hljs-number">0xDD5B4332L</span>, <span class="hljs-number">0x6841E7F7L</span>, <span class="hljs-number">0xCA7820FBL</span>,<br>        <span class="hljs-number">0xFB0AF54EL</span>, <span class="hljs-number">0xD8FEB397L</span>, <span class="hljs-number">0x454056ACL</span>, <span class="hljs-number">0xBA489527L</span>,<br>        <span class="hljs-number">0x55533A3AL</span>, <span class="hljs-number">0x20838D87L</span>, <span class="hljs-number">0xFE6BA9B7L</span>, <span class="hljs-number">0xD096954BL</span>,<br>        <span class="hljs-number">0x55A867BCL</span>, <span class="hljs-number">0xA1159A58L</span>, <span class="hljs-number">0xCCA92963L</span>, <span class="hljs-number">0x99E1DB33L</span>,<br>        <span class="hljs-number">0xA62A4A56L</span>, <span class="hljs-number">0x3F3125F9L</span>, <span class="hljs-number">0x5EF47E1CL</span>, <span class="hljs-number">0x9029317CL</span>,<br>        <span class="hljs-number">0xFDF8E802L</span>, <span class="hljs-number">0x04272F70L</span>, <span class="hljs-number">0x80BB155CL</span>, <span class="hljs-number">0x05282CE3L</span>,<br>        <span class="hljs-number">0x95C11548L</span>, <span class="hljs-number">0xE4C66D22L</span>, <span class="hljs-number">0x48C1133FL</span>, <span class="hljs-number">0xC70F86DCL</span>,<br>        <span class="hljs-number">0x07F9C9EEL</span>, <span class="hljs-number">0x41041F0FL</span>, <span class="hljs-number">0x404779A4L</span>, <span class="hljs-number">0x5D886E17L</span>,<br>        <span class="hljs-number">0x325F51EBL</span>, <span class="hljs-number">0xD59BC0D1L</span>, <span class="hljs-number">0xF2BCC18FL</span>, <span class="hljs-number">0x41113564L</span>,<br>        <span class="hljs-number">0x257B7834L</span>, <span class="hljs-number">0x602A9C60L</span>, <span class="hljs-number">0xDFF8E8A3L</span>, <span class="hljs-number">0x1F636C1BL</span>,<br>        <span class="hljs-number">0x0E12B4C2L</span>, <span class="hljs-number">0x02E1329EL</span>, <span class="hljs-number">0xAF664FD1L</span>, <span class="hljs-number">0xCAD18115L</span>,<br>        <span class="hljs-number">0x6B2395E0L</span>, <span class="hljs-number">0x333E92E1L</span>, <span class="hljs-number">0x3B240B62L</span>, <span class="hljs-number">0xEEBEB922L</span>,<br>        <span class="hljs-number">0x85B2A20EL</span>, <span class="hljs-number">0xE6BA0D99L</span>, <span class="hljs-number">0xDE720C8CL</span>, <span class="hljs-number">0x2DA2F728L</span>,<br>        <span class="hljs-number">0xD0127845L</span>, <span class="hljs-number">0x95B794FDL</span>, <span class="hljs-number">0x647D0862L</span>, <span class="hljs-number">0xE7CCF5F0L</span>,<br>        <span class="hljs-number">0x5449A36FL</span>, <span class="hljs-number">0x877D48FAL</span>, <span class="hljs-number">0xC39DFD27L</span>, <span class="hljs-number">0xF33E8D1EL</span>,<br>        <span class="hljs-number">0x0A476341L</span>, <span class="hljs-number">0x992EFF74L</span>, <span class="hljs-number">0x3A6F6EABL</span>, <span class="hljs-number">0xF4F8FD37L</span>,<br>        <span class="hljs-number">0xA812DC60L</span>, <span class="hljs-number">0xA1EBDDF8L</span>, <span class="hljs-number">0x991BE14CL</span>, <span class="hljs-number">0xDB6E6B0DL</span>,<br>        <span class="hljs-number">0xC67B5510L</span>, <span class="hljs-number">0x6D672C37L</span>, <span class="hljs-number">0x2765D43BL</span>, <span class="hljs-number">0xDCD0E804L</span>,<br>        <span class="hljs-number">0xF1290DC7L</span>, <span class="hljs-number">0xCC00FFA3L</span>, <span class="hljs-number">0xB5390F92L</span>, <span class="hljs-number">0x690FED0BL</span>,<br>        <span class="hljs-number">0x667B9FFBL</span>, <span class="hljs-number">0xCEDB7D9CL</span>, <span class="hljs-number">0xA091CF0BL</span>, <span class="hljs-number">0xD9155EA3L</span>,<br>        <span class="hljs-number">0xBB132F88L</span>, <span class="hljs-number">0x515BAD24L</span>, <span class="hljs-number">0x7B9479BFL</span>, <span class="hljs-number">0x763BD6EBL</span>,<br>        <span class="hljs-number">0x37392EB3L</span>, <span class="hljs-number">0xCC115979L</span>, <span class="hljs-number">0x8026E297L</span>, <span class="hljs-number">0xF42E312DL</span>,<br>        <span class="hljs-number">0x6842ADA7L</span>, <span class="hljs-number">0xC66A2B3BL</span>, <span class="hljs-number">0x12754CCCL</span>, <span class="hljs-number">0x782EF11CL</span>,<br>        <span class="hljs-number">0x6A124237L</span>, <span class="hljs-number">0xB79251E7L</span>, <span class="hljs-number">0x06A1BBE6L</span>, <span class="hljs-number">0x4BFB6350L</span>,<br>        <span class="hljs-number">0x1A6B1018L</span>, <span class="hljs-number">0x11CAEDFAL</span>, <span class="hljs-number">0x3D25BDD8L</span>, <span class="hljs-number">0xE2E1C3C9L</span>,<br>        <span class="hljs-number">0x44421659L</span>, <span class="hljs-number">0x0A121386L</span>, <span class="hljs-number">0xD90CEC6EL</span>, <span class="hljs-number">0xD5ABEA2AL</span>,<br>        <span class="hljs-number">0x64AF674EL</span>, <span class="hljs-number">0xDA86A85FL</span>, <span class="hljs-number">0xBEBFE988L</span>, <span class="hljs-number">0x64E4C3FEL</span>,<br>        <span class="hljs-number">0x9DBC8057L</span>, <span class="hljs-number">0xF0F7C086L</span>, <span class="hljs-number">0x60787BF8L</span>, <span class="hljs-number">0x6003604DL</span>,<br>        <span class="hljs-number">0xD1FD8346L</span>, <span class="hljs-number">0xF6381FB0L</span>, <span class="hljs-number">0x7745AE04L</span>, <span class="hljs-number">0xD736FCCCL</span>,<br>        <span class="hljs-number">0x83426B33L</span>, <span class="hljs-number">0xF01EAB71L</span>, <span class="hljs-number">0xB0804187L</span>, <span class="hljs-number">0x3C005E5FL</span>,<br>        <span class="hljs-number">0x77A057BEL</span>, <span class="hljs-number">0xBDE8AE24L</span>, <span class="hljs-number">0x55464299L</span>, <span class="hljs-number">0xBF582E61L</span>,<br>        <span class="hljs-number">0x4E58F48FL</span>, <span class="hljs-number">0xF2DDFDA2L</span>, <span class="hljs-number">0xF474EF38L</span>, <span class="hljs-number">0x8789BDC2L</span>,<br>        <span class="hljs-number">0x5366F9C3L</span>, <span class="hljs-number">0xC8B38E74L</span>, <span class="hljs-number">0xB475F255L</span>, <span class="hljs-number">0x46FCD9B9L</span>,<br>        <span class="hljs-number">0x7AEB2661L</span>, <span class="hljs-number">0x8B1DDF84L</span>, <span class="hljs-number">0x846A0E79L</span>, <span class="hljs-number">0x915F95E2L</span>,<br>        <span class="hljs-number">0x466E598EL</span>, <span class="hljs-number">0x20B45770L</span>, <span class="hljs-number">0x8CD55591L</span>, <span class="hljs-number">0xC902DE4CL</span>,<br>        <span class="hljs-number">0xB90BACE1L</span>, <span class="hljs-number">0xBB8205D0L</span>, <span class="hljs-number">0x11A86248L</span>, <span class="hljs-number">0x7574A99EL</span>,<br>        <span class="hljs-number">0xB77F19B6L</span>, <span class="hljs-number">0xE0A9DC09L</span>, <span class="hljs-number">0x662D09A1L</span>, <span class="hljs-number">0xC4324633L</span>,<br>        <span class="hljs-number">0xE85A1F02L</span>, <span class="hljs-number">0x09F0BE8CL</span>, <span class="hljs-number">0x4A99A025L</span>, <span class="hljs-number">0x1D6EFE10L</span>,<br>        <span class="hljs-number">0x1AB93D1DL</span>, <span class="hljs-number">0x0BA5A4DFL</span>, <span class="hljs-number">0xA186F20FL</span>, <span class="hljs-number">0x2868F169L</span>,<br>        <span class="hljs-number">0xDCB7DA83L</span>, <span class="hljs-number">0x573906FEL</span>, <span class="hljs-number">0xA1E2CE9BL</span>, <span class="hljs-number">0x4FCD7F52L</span>,<br>        <span class="hljs-number">0x50115E01L</span>, <span class="hljs-number">0xA70683FAL</span>, <span class="hljs-number">0xA002B5C4L</span>, <span class="hljs-number">0x0DE6D027L</span>,<br>        <span class="hljs-number">0x9AF88C27L</span>, <span class="hljs-number">0x773F8641L</span>, <span class="hljs-number">0xC3604C06L</span>, <span class="hljs-number">0x61A806B5L</span>,<br>        <span class="hljs-number">0xF0177A28L</span>, <span class="hljs-number">0xC0F586E0L</span>, <span class="hljs-number">0x006058AAL</span>, <span class="hljs-number">0x30DC7D62L</span>,<br>        <span class="hljs-number">0x11E69ED7L</span>, <span class="hljs-number">0x2338EA63L</span>, <span class="hljs-number">0x53C2DD94L</span>, <span class="hljs-number">0xC2C21634L</span>,<br>        <span class="hljs-number">0xBBCBEE56L</span>, <span class="hljs-number">0x90BCB6DEL</span>, <span class="hljs-number">0xEBFC7DA1L</span>, <span class="hljs-number">0xCE591D76L</span>,<br>        <span class="hljs-number">0x6F05E409L</span>, <span class="hljs-number">0x4B7C0188L</span>, <span class="hljs-number">0x39720A3DL</span>, <span class="hljs-number">0x7C927C24L</span>,<br>        <span class="hljs-number">0x86E3725FL</span>, <span class="hljs-number">0x724D9DB9L</span>, <span class="hljs-number">0x1AC15BB4L</span>, <span class="hljs-number">0xD39EB8FCL</span>,<br>        <span class="hljs-number">0xED545578L</span>, <span class="hljs-number">0x08FCA5B5L</span>, <span class="hljs-number">0xD83D7CD3L</span>, <span class="hljs-number">0x4DAD0FC4L</span>,<br>        <span class="hljs-number">0x1E50EF5EL</span>, <span class="hljs-number">0xB161E6F8L</span>, <span class="hljs-number">0xA28514D9L</span>, <span class="hljs-number">0x6C51133CL</span>,<br>        <span class="hljs-number">0x6FD5C7E7L</span>, <span class="hljs-number">0x56E14EC4L</span>, <span class="hljs-number">0x362ABFCEL</span>, <span class="hljs-number">0xDDC6C837L</span>,<br>        <span class="hljs-number">0xD79A3234L</span>, <span class="hljs-number">0x92638212L</span>, <span class="hljs-number">0x670EFA8EL</span>, <span class="hljs-number">0x406000E0L</span>  &#125;,<br>    &#123;   <span class="hljs-number">0x3A39CE37L</span>, <span class="hljs-number">0xD3FAF5CFL</span>, <span class="hljs-number">0xABC27737L</span>, <span class="hljs-number">0x5AC52D1BL</span>,<br>        <span class="hljs-number">0x5CB0679EL</span>, <span class="hljs-number">0x4FA33742L</span>, <span class="hljs-number">0xD3822740L</span>, <span class="hljs-number">0x99BC9BBEL</span>,<br>        <span class="hljs-number">0xD5118E9DL</span>, <span class="hljs-number">0xBF0F7315L</span>, <span class="hljs-number">0xD62D1C7EL</span>, <span class="hljs-number">0xC700C47BL</span>,<br>        <span class="hljs-number">0xB78C1B6BL</span>, <span class="hljs-number">0x21A19045L</span>, <span class="hljs-number">0xB26EB1BEL</span>, <span class="hljs-number">0x6A366EB4L</span>,<br>        <span class="hljs-number">0x5748AB2FL</span>, <span class="hljs-number">0xBC946E79L</span>, <span class="hljs-number">0xC6A376D2L</span>, <span class="hljs-number">0x6549C2C8L</span>,<br>        <span class="hljs-number">0x530FF8EEL</span>, <span class="hljs-number">0x468DDE7DL</span>, <span class="hljs-number">0xD5730A1DL</span>, <span class="hljs-number">0x4CD04DC6L</span>,<br>        <span class="hljs-number">0x2939BBDBL</span>, <span class="hljs-number">0xA9BA4650L</span>, <span class="hljs-number">0xAC9526E8L</span>, <span class="hljs-number">0xBE5EE304L</span>,<br>        <span class="hljs-number">0xA1FAD5F0L</span>, <span class="hljs-number">0x6A2D519AL</span>, <span class="hljs-number">0x63EF8CE2L</span>, <span class="hljs-number">0x9A86EE22L</span>,<br>        <span class="hljs-number">0xC089C2B8L</span>, <span class="hljs-number">0x43242EF6L</span>, <span class="hljs-number">0xA51E03AAL</span>, <span class="hljs-number">0x9CF2D0A4L</span>,<br>        <span class="hljs-number">0x83C061BAL</span>, <span class="hljs-number">0x9BE96A4DL</span>, <span class="hljs-number">0x8FE51550L</span>, <span class="hljs-number">0xBA645BD6L</span>,<br>        <span class="hljs-number">0x2826A2F9L</span>, <span class="hljs-number">0xA73A3AE1L</span>, <span class="hljs-number">0x4BA99586L</span>, <span class="hljs-number">0xEF5562E9L</span>,<br>        <span class="hljs-number">0xC72FEFD3L</span>, <span class="hljs-number">0xF752F7DAL</span>, <span class="hljs-number">0x3F046F69L</span>, <span class="hljs-number">0x77FA0A59L</span>,<br>        <span class="hljs-number">0x80E4A915L</span>, <span class="hljs-number">0x87B08601L</span>, <span class="hljs-number">0x9B09E6ADL</span>, <span class="hljs-number">0x3B3EE593L</span>,<br>        <span class="hljs-number">0xE990FD5AL</span>, <span class="hljs-number">0x9E34D797L</span>, <span class="hljs-number">0x2CF0B7D9L</span>, <span class="hljs-number">0x022B8B51L</span>,<br>        <span class="hljs-number">0x96D5AC3AL</span>, <span class="hljs-number">0x017DA67DL</span>, <span class="hljs-number">0xD1CF3ED6L</span>, <span class="hljs-number">0x7C7D2D28L</span>,<br>        <span class="hljs-number">0x1F9F25CFL</span>, <span class="hljs-number">0xADF2B89BL</span>, <span class="hljs-number">0x5AD6B472L</span>, <span class="hljs-number">0x5A88F54CL</span>,<br>        <span class="hljs-number">0xE029AC71L</span>, <span class="hljs-number">0xE019A5E6L</span>, <span class="hljs-number">0x47B0ACFDL</span>, <span class="hljs-number">0xED93FA9BL</span>,<br>        <span class="hljs-number">0xE8D3C48DL</span>, <span class="hljs-number">0x283B57CCL</span>, <span class="hljs-number">0xF8D56629L</span>, <span class="hljs-number">0x79132E28L</span>,<br>        <span class="hljs-number">0x785F0191L</span>, <span class="hljs-number">0xED756055L</span>, <span class="hljs-number">0xF7960E44L</span>, <span class="hljs-number">0xE3D35E8CL</span>,<br>        <span class="hljs-number">0x15056DD4L</span>, <span class="hljs-number">0x88F46DBAL</span>, <span class="hljs-number">0x03A16125L</span>, <span class="hljs-number">0x0564F0BDL</span>,<br>        <span class="hljs-number">0xC3EB9E15L</span>, <span class="hljs-number">0x3C9057A2L</span>, <span class="hljs-number">0x97271AECL</span>, <span class="hljs-number">0xA93A072AL</span>,<br>        <span class="hljs-number">0x1B3F6D9BL</span>, <span class="hljs-number">0x1E6321F5L</span>, <span class="hljs-number">0xF59C66FBL</span>, <span class="hljs-number">0x26DCF319L</span>,<br>        <span class="hljs-number">0x7533D928L</span>, <span class="hljs-number">0xB155FDF5L</span>, <span class="hljs-number">0x03563482L</span>, <span class="hljs-number">0x8ABA3CBBL</span>,<br>        <span class="hljs-number">0x28517711L</span>, <span class="hljs-number">0xC20AD9F8L</span>, <span class="hljs-number">0xABCC5167L</span>, <span class="hljs-number">0xCCAD925FL</span>,<br>        <span class="hljs-number">0x4DE81751L</span>, <span class="hljs-number">0x3830DC8EL</span>, <span class="hljs-number">0x379D5862L</span>, <span class="hljs-number">0x9320F991L</span>,<br>        <span class="hljs-number">0xEA7A90C2L</span>, <span class="hljs-number">0xFB3E7BCEL</span>, <span class="hljs-number">0x5121CE64L</span>, <span class="hljs-number">0x774FBE32L</span>,<br>        <span class="hljs-number">0xA8B6E37EL</span>, <span class="hljs-number">0xC3293D46L</span>, <span class="hljs-number">0x48DE5369L</span>, <span class="hljs-number">0x6413E680L</span>,<br>        <span class="hljs-number">0xA2AE0810L</span>, <span class="hljs-number">0xDD6DB224L</span>, <span class="hljs-number">0x69852DFDL</span>, <span class="hljs-number">0x09072166L</span>,<br>        <span class="hljs-number">0xB39A460AL</span>, <span class="hljs-number">0x6445C0DDL</span>, <span class="hljs-number">0x586CDECFL</span>, <span class="hljs-number">0x1C20C8AEL</span>,<br>        <span class="hljs-number">0x5BBEF7DDL</span>, <span class="hljs-number">0x1B588D40L</span>, <span class="hljs-number">0xCCD2017FL</span>, <span class="hljs-number">0x6BB4E3BBL</span>,<br>        <span class="hljs-number">0xDDA26A7EL</span>, <span class="hljs-number">0x3A59FF45L</span>, <span class="hljs-number">0x3E350A44L</span>, <span class="hljs-number">0xBCB4CDD5L</span>,<br>        <span class="hljs-number">0x72EACEA8L</span>, <span class="hljs-number">0xFA6484BBL</span>, <span class="hljs-number">0x8D6612AEL</span>, <span class="hljs-number">0xBF3C6F47L</span>,<br>        <span class="hljs-number">0xD29BE463L</span>, <span class="hljs-number">0x542F5D9EL</span>, <span class="hljs-number">0xAEC2771BL</span>, <span class="hljs-number">0xF64E6370L</span>,<br>        <span class="hljs-number">0x740E0D8DL</span>, <span class="hljs-number">0xE75B1357L</span>, <span class="hljs-number">0xF8721671L</span>, <span class="hljs-number">0xAF537D5DL</span>,<br>        <span class="hljs-number">0x4040CB08L</span>, <span class="hljs-number">0x4EB4E2CCL</span>, <span class="hljs-number">0x34D2466AL</span>, <span class="hljs-number">0x0115AF84L</span>,<br>        <span class="hljs-number">0xE1B00428L</span>, <span class="hljs-number">0x95983A1DL</span>, <span class="hljs-number">0x06B89FB4L</span>, <span class="hljs-number">0xCE6EA048L</span>,<br>        <span class="hljs-number">0x6F3F3B82L</span>, <span class="hljs-number">0x3520AB82L</span>, <span class="hljs-number">0x011A1D4BL</span>, <span class="hljs-number">0x277227F8L</span>,<br>        <span class="hljs-number">0x611560B1L</span>, <span class="hljs-number">0xE7933FDCL</span>, <span class="hljs-number">0xBB3A792BL</span>, <span class="hljs-number">0x344525BDL</span>,<br>        <span class="hljs-number">0xA08839E1L</span>, <span class="hljs-number">0x51CE794BL</span>, <span class="hljs-number">0x2F32C9B7L</span>, <span class="hljs-number">0xA01FBAC9L</span>,<br>        <span class="hljs-number">0xE01CC87EL</span>, <span class="hljs-number">0xBCC7D1F6L</span>, <span class="hljs-number">0xCF0111C3L</span>, <span class="hljs-number">0xA1E8AAC7L</span>,<br>        <span class="hljs-number">0x1A908749L</span>, <span class="hljs-number">0xD44FBD9AL</span>, <span class="hljs-number">0xD0DADECBL</span>, <span class="hljs-number">0xD50ADA38L</span>,<br>        <span class="hljs-number">0x0339C32AL</span>, <span class="hljs-number">0xC6913667L</span>, <span class="hljs-number">0x8DF9317CL</span>, <span class="hljs-number">0xE0B12B4FL</span>,<br>        <span class="hljs-number">0xF79E59B7L</span>, <span class="hljs-number">0x43F5BB3AL</span>, <span class="hljs-number">0xF2D519FFL</span>, <span class="hljs-number">0x27D9459CL</span>,<br>        <span class="hljs-number">0xBF97222CL</span>, <span class="hljs-number">0x15E6FC2AL</span>, <span class="hljs-number">0x0F91FC71L</span>, <span class="hljs-number">0x9B941525L</span>,<br>        <span class="hljs-number">0xFAE59361L</span>, <span class="hljs-number">0xCEB69CEBL</span>, <span class="hljs-number">0xC2A86459L</span>, <span class="hljs-number">0x12BAA8D1L</span>,<br>        <span class="hljs-number">0xB6C1075EL</span>, <span class="hljs-number">0xE3056A0CL</span>, <span class="hljs-number">0x10D25065L</span>, <span class="hljs-number">0xCB03A442L</span>,<br>        <span class="hljs-number">0xE0EC6E0EL</span>, <span class="hljs-number">0x1698DB3BL</span>, <span class="hljs-number">0x4C98A0BEL</span>, <span class="hljs-number">0x3278E964L</span>,<br>        <span class="hljs-number">0x9F1F9532L</span>, <span class="hljs-number">0xE0D392DFL</span>, <span class="hljs-number">0xD3A0342BL</span>, <span class="hljs-number">0x8971F21EL</span>,<br>        <span class="hljs-number">0x1B0A7441L</span>, <span class="hljs-number">0x4BA3348CL</span>, <span class="hljs-number">0xC5BE7120L</span>, <span class="hljs-number">0xC37632D8L</span>,<br>        <span class="hljs-number">0xDF359F8DL</span>, <span class="hljs-number">0x9B992F2EL</span>, <span class="hljs-number">0xE60B6F47L</span>, <span class="hljs-number">0x0FE3F11DL</span>,<br>        <span class="hljs-number">0xE54CDA54L</span>, <span class="hljs-number">0x1EDAD891L</span>, <span class="hljs-number">0xCE6279CFL</span>, <span class="hljs-number">0xCD3E7E6FL</span>,<br>        <span class="hljs-number">0x1618B166L</span>, <span class="hljs-number">0xFD2C1D05L</span>, <span class="hljs-number">0x848FD2C5L</span>, <span class="hljs-number">0xF6FB2299L</span>,<br>        <span class="hljs-number">0xF523F357L</span>, <span class="hljs-number">0xA6327623L</span>, <span class="hljs-number">0x93A83531L</span>, <span class="hljs-number">0x56CCCD02L</span>,<br>        <span class="hljs-number">0xACF08162L</span>, <span class="hljs-number">0x5A75EBB5L</span>, <span class="hljs-number">0x6E163697L</span>, <span class="hljs-number">0x88D273CCL</span>,<br>        <span class="hljs-number">0xDE966292L</span>, <span class="hljs-number">0x81B949D0L</span>, <span class="hljs-number">0x4C50901BL</span>, <span class="hljs-number">0x71C65614L</span>,<br>        <span class="hljs-number">0xE6C6C7BDL</span>, <span class="hljs-number">0x327A140AL</span>, <span class="hljs-number">0x45E1D006L</span>, <span class="hljs-number">0xC3F27B9AL</span>,<br>        <span class="hljs-number">0xC9AA53FDL</span>, <span class="hljs-number">0x62A80F00L</span>, <span class="hljs-number">0xBB25BFE2L</span>, <span class="hljs-number">0x35BDD2F6L</span>,<br>        <span class="hljs-number">0x71126905L</span>, <span class="hljs-number">0xB2040222L</span>, <span class="hljs-number">0xB6CBCF7CL</span>, <span class="hljs-number">0xCD769C2BL</span>,<br>        <span class="hljs-number">0x53113EC0L</span>, <span class="hljs-number">0x1640E3D3L</span>, <span class="hljs-number">0x38ABBD60L</span>, <span class="hljs-number">0x2547ADF0L</span>,<br>        <span class="hljs-number">0xBA38209CL</span>, <span class="hljs-number">0xF746CE76L</span>, <span class="hljs-number">0x77AFA1C5L</span>, <span class="hljs-number">0x20756060L</span>,<br>        <span class="hljs-number">0x85CBFE4EL</span>, <span class="hljs-number">0x8AE88DD8L</span>, <span class="hljs-number">0x7AAAF9B0L</span>, <span class="hljs-number">0x4CF9AA7EL</span>,<br>        <span class="hljs-number">0x1948C25CL</span>, <span class="hljs-number">0x02FB8A8CL</span>, <span class="hljs-number">0x01C36AE4L</span>, <span class="hljs-number">0xD6EBE1F9L</span>,<br>        <span class="hljs-number">0x90D4F869L</span>, <span class="hljs-number">0xA65CDEA0L</span>, <span class="hljs-number">0x3F09252DL</span>, <span class="hljs-number">0xC208E69FL</span>,<br>        <span class="hljs-number">0xB74E6132L</span>, <span class="hljs-number">0xCE77E25BL</span>, <span class="hljs-number">0x578FDFE3L</span>, <span class="hljs-number">0x3AC372E6L</span>  &#125;<br>&#125;;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 16</span><br><span class="hljs-comment">//定义初始化需要用到的加密结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">BLOWFISH_CTX</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">//定义初始化的pbox 以及 sbox 在程序中进行初始化</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> pbox[N + <span class="hljs-number">2</span>];  <span class="hljs-comment">//总共18</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> sbox[<span class="hljs-number">4</span>][<span class="hljs-number">256</span>];<br>&#125;BLOWFISH_CTX, * PBLOWFISH_CTX;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">初始化函数 此函数功能如下</span><br><span class="hljs-comment">1.接受key 与 keylen参数（当然keylen）可以自己计算</span><br><span class="hljs-comment">2.初始化sbox 将全局的sbox的内容复制到CTX中的sbox中</span><br><span class="hljs-comment">3.初始化pbox pbox的初始化方法如下</span><br><span class="hljs-comment">    1.迭代18论。然后每一轮都设置CTX的pbox</span><br><span class="hljs-comment">    2.CTX.pbox需要使用全局pbox ^ data</span><br><span class="hljs-comment">    3.data是一个四字节整数。其中存储的就是key的四个字节。</span><br><span class="hljs-comment">      key = &quot;12345678abc&quot;</span><br><span class="hljs-comment">      每一轮中 data = &quot;1234&quot;</span><br><span class="hljs-comment">               data = &quot;5678&quot;</span><br><span class="hljs-comment">               data = &quot;abc1&quot; //注意这里当超出keylen的时候。 data获取的key要从0开始</span><br><span class="hljs-comment">               。。。。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">BlowFishInit</span><span class="hljs-params">(BLOWFISH_CTX* blowCtx, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> keylen)</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">F函数</span><br><span class="hljs-comment">F函数是将一个32位数分别进行拆分。 拆分为四组。 每一组都作为sbox的索引值</span><br><span class="hljs-comment">然后进行下列运算</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">(（s1[a] + s2[b]) ^ s3[c]) + s4[d]</span><br><span class="hljs-comment">在编程中sbox是数组是从零开始。 所以s1 对应s[0]  s2对应s[1]</span><br><span class="hljs-comment">在编程中总结下公式：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">temap = s[0][a] + s[1][b]</span><br><span class="hljs-comment">teamp = temp ^ s[2][c]&#x27;</span><br><span class="hljs-comment">temp =  temp + s[3][d]</span><br><span class="hljs-comment">简单的记住就是 ((a+b) ^ c)+d;</span><br><span class="hljs-comment">当然每个都对应下标为 0 1 2 3  s[0][a] s[1][b] s[2][c] s[3][d]</span><br><span class="hljs-comment">最后返回结果值 return temp</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-title function_">F</span><span class="hljs-params">(BLOWFISH_CTX* ctx, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> x)</span>;<br><span class="hljs-comment">//signed int F(PBLOWFISH_CTX blowCtx,unsigned int Data);</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">加密函数：</span><br><span class="hljs-comment">首次用在初始化中是对一个64位0进行加密。</span><br><span class="hljs-comment">一次加密八个字节</span><br><span class="hljs-comment">核心思想为 加密左边与右边数据</span><br><span class="hljs-comment">左边数据直接 ^ PBOX</span><br><span class="hljs-comment">右边数据 = 右边数据 ^ f(左边数据）</span><br><span class="hljs-comment">然后进行交换。</span><br><span class="hljs-comment">以上是16轮的交换</span><br><span class="hljs-comment">剩下一轮则是</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">左边 = 左边^PBOX[N+1]</span><br><span class="hljs-comment">右边 = 右边^pbox[N]</span><br><span class="hljs-comment">最后设置相关数值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">BlowFish_Encry</span><span class="hljs-params">(PBLOWFISH_CTX blowCtx, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>* left, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>* right)</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">跟加密一样。只不过结果相反步骤如下：</span><br><span class="hljs-comment">首先遍历从最后一轮开始逐次递减</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">最后一轮数据 右边= 右边^PBOX[1] 左边数据 = 左边数据 ^pbox[0]</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">BlowFish_Decrypt</span><span class="hljs-params">(PBLOWFISH_CTX blowCtx, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>* left, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>* right)</span>;<br></code></pre></td></tr></table></figure><p>blowfish.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;BlowFish.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">BlowFishInit</span><span class="hljs-params">(BLOWFISH_CTX* blowCtx, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> keylen)</span><br>&#123;<br>    <span class="hljs-comment">//设置传入的CTX中的SBOX值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> Row = <span class="hljs-number">0</span>; Row &lt; <span class="hljs-number">4</span>; Row++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> Col = <span class="hljs-number">0</span>; Col &lt; <span class="hljs-number">256</span>; Col++)<br>        &#123;<br>            blowCtx-&gt;sbox[Row][Col] = ORIG_S[Row][Col];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    设置pbox</span><br><span class="hljs-comment">    1.循环18轮</span><br><span class="hljs-comment">    2.每轮都设置ctx.pbox值与data ^</span><br><span class="hljs-comment">    3.data = *(DWORD*)key[0] key[1].....</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-type">int</span> KeyIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> index = <span class="hljs-number">0</span>; index &lt; N + <span class="hljs-number">2</span>; index++)<br>    &#123;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> data = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//填充data 将key的字符设置到data当中</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++)<br>        &#123;<br>            <span class="hljs-comment">//通过移位设置每个字符</span><br>            data = (data &lt;&lt; <span class="hljs-number">8</span>) | key[KeyIndex];<br>            KeyIndex++;<br>            <span class="hljs-comment">//如果超出了key长度 那么key要从开始</span><br>            <span class="hljs-keyword">if</span> (KeyIndex &gt;= keylen)<br>                KeyIndex = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-comment">//否则不满足</span><br>        blowCtx-&gt;pbox[index] = ORIG_P[index] ^ data ^ <span class="hljs-number">0x12</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//对一个64位0 进行加密。加密结果的输出设置到pbox[i]与pbox[i+1]中</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> Data1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> Data2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N + <span class="hljs-number">2</span>; i += <span class="hljs-number">2</span>)<br>    &#123;<br>        BlowFish_Encry(blowCtx, &amp;Data1, &amp;Data2);<br>        blowCtx-&gt;pbox[i] = Data1;<br>        blowCtx-&gt;pbox[i + <span class="hljs-number">1</span>] = Data2;<br>    &#125;<br>    <span class="hljs-comment">//初始化Sbox</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">256</span>; j += <span class="hljs-number">2</span>)<br>        &#123;<br>            BlowFish_Encry(blowCtx, &amp;Data1, &amp;Data2);<br>            blowCtx-&gt;sbox[i][j] = Data1;<br>            blowCtx-&gt;sbox[i][j + <span class="hljs-number">1</span>] = Data2;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//unsigned int F(PBLOWFISH_CTX blowCtx, unsigned int Data)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    unsigned int a, b, c, d;</span><br><span class="hljs-comment">//    /*</span><br><span class="hljs-comment">//    利用位运算 取出下标值</span><br><span class="hljs-comment">//    */</span><br><span class="hljs-comment">//    </span><br><span class="hljs-comment">//   a = (Data  &gt;&gt; 24) &amp; 0xFF;</span><br><span class="hljs-comment">//   b = (Data &gt;&gt; 16) &amp; 0xFF;</span><br><span class="hljs-comment">//   c = (Data &gt;&gt; 8) &amp; 0xFf;</span><br><span class="hljs-comment">//   d = Data &amp; 0xFF;</span><br><span class="hljs-comment">//   </span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    int TempValue = blowCtx-&gt;sbox[0][a] + blowCtx-&gt;sbox[1][b];</span><br><span class="hljs-comment">//    TempValue = TempValue ^ blowCtx-&gt;sbox[2][c];</span><br><span class="hljs-comment">//    TempValue = TempValue + blowCtx-&gt;sbox[3][d];</span><br><span class="hljs-comment">//    //公式 ((a+b)^c)+d</span><br><span class="hljs-comment">//    return TempValue;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-type">static</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-title function_">F</span><span class="hljs-params">(BLOWFISH_CTX* ctx, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> x)</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> a, b, c, d;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>  y;<br><br>    <span class="hljs-comment">/* d = (unsigned short)(x &amp; 0xFF);</span><br><span class="hljs-comment">     x &gt;&gt;= 8;</span><br><span class="hljs-comment">     c = (unsigned short)(x &amp; 0xFF);</span><br><span class="hljs-comment">     x &gt;&gt;= 8;</span><br><span class="hljs-comment">     b = (unsigned short)(x &amp; 0xFF);</span><br><span class="hljs-comment">     x &gt;&gt;= 8;</span><br><span class="hljs-comment">     a = (unsigned short)(x &amp; 0xFF);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     //都可以使用</span><br><span class="hljs-comment">     */</span><br>    a = (x &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>;<br>    b = (x &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>;<br>    c = (x &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFf</span>;<br>    d = x &amp; <span class="hljs-number">0xFF</span>;<br><br>    y = ctx-&gt;sbox[<span class="hljs-number">0</span>][a] + ctx-&gt;sbox[<span class="hljs-number">1</span>][b];<br>    y = y ^ ctx-&gt;sbox[<span class="hljs-number">2</span>][c];<br>    y = y + ctx-&gt;sbox[<span class="hljs-number">3</span>][d];<br><br>    <span class="hljs-keyword">return</span> y;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">BlowFish_Encry</span><span class="hljs-params">(PBLOWFISH_CTX blowCtx, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>* left, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>* right)</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>  Xl;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>  Xr;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>  temp;<br>    <span class="hljs-type">short</span>       i;<br><br>    <span class="hljs-comment">//加密部分首先将其分为left跟right两组。 每一组分别32位</span><br>    Xl = *left;<br>    Xr = *right;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; N; ++i) &#123;<br>        Xl = Xl ^ blowCtx-&gt;pbox[i];<br>        Xr = F(blowCtx, Xl) ^ Xr;<br><br>        temp = Xl;<br>        Xl = Xr;<span class="hljs-comment">//交换左右的值。 l = R r= l 继续下一轮循环。总共16轮</span><br>        Xr = temp;<br>    &#125;<br><br>    temp = Xl;<br>    Xl = Xr;                          <span class="hljs-comment">//16轮完毕之后交换变量</span><br>    Xr = temp;<br><br>    Xr = Xr ^ blowCtx-&gt;pbox[N];              <span class="hljs-comment">//最后进行一次疑或</span><br>    Xl = Xl ^ blowCtx-&gt;pbox[N + <span class="hljs-number">1</span>];<br><br>    *left = Xl;<br>    *right = Xr;<br><br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">BlowFish_Decrypt</span><span class="hljs-params">(PBLOWFISH_CTX blowCtx, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>* left, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>* right)</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> Xl = *left;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> Xr = *right;<br><br>    <span class="hljs-comment">//倒着循环</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N + <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">1</span>; --i)<br>    &#123;<br>        Xl = Xl ^ blowCtx-&gt;pbox[i];<br>        Xr = Xr ^ F(blowCtx, Xl);<br><br>        <span class="hljs-comment">//继续左右交换</span><br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> temp = Xl;<br>        Xl = Xr;<br>        Xr = temp;<br>    &#125;<br><br>    <span class="hljs-comment">//最后一轮继续交换</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> temp = Xl;<br>    Xl = Xr;<br>    Xr = temp;<br><br>    <span class="hljs-comment">//返还原</span><br>    Xr = Xr ^ blowCtx-&gt;pbox[<span class="hljs-number">1</span>];<br>    Xl = Xl ^ blowCtx-&gt;pbox[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-comment">//设置变量返回</span><br>    *left = Xl;<br>    *right = Xr;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 从.data段提取的所有字节，按8字节分块</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> cipher_blocks[][<span class="hljs-number">8</span>] = &#123;<br>        &#123;<span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-number">0x04</span>&#125;,<br>        &#123;<span class="hljs-number">0xDF</span>, <span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-string">&#x27;j&#x27;</span>&#125;,<br>        &#123;<span class="hljs-number">0x03</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x08</span>&#125;,<br>        &#123;<span class="hljs-number">0x8C</span>, <span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xA6</span>&#125;,<br>        &#123;<span class="hljs-number">0xC3</span>, <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-number">0x98</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0x1B</span>&#125;,<br>        &#123;<span class="hljs-number">0xDA</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x18</span>, <span class="hljs-string">&#x27;o&#x27;</span>&#125;<br>    &#125;;<br>    <span class="hljs-type">int</span> total_blocks = <span class="hljs-keyword">sizeof</span>(cipher_blocks) / <span class="hljs-keyword">sizeof</span>(cipher_blocks[<span class="hljs-number">0</span>]);<br><br>    BLOWFISH_CTX ctx;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key = <span class="hljs-string">&quot;Reverse engineering is very easy and interesting&quot;</span>;<br>    BlowFishInit(&amp;ctx, (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)key, <span class="hljs-built_in">strlen</span>(key));<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;解密结果（原始字节顺序）：\n&quot;</span>);<br><br>    <span class="hljs-comment">// 逐个块解密并输出</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; total_blocks; i++) &#123;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> L, R;<br><br>        <span class="hljs-comment">// 转换为大端序32位整数（高4字节为L，低4字节为R）</span><br>        L = (cipher_blocks[i][<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">24</span>) | (cipher_blocks[i][<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">16</span>) |<br>            (cipher_blocks[i][<span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">8</span>) | cipher_blocks[i][<span class="hljs-number">3</span>];<br>        R = (cipher_blocks[i][<span class="hljs-number">4</span>] &lt;&lt; <span class="hljs-number">24</span>) | (cipher_blocks[i][<span class="hljs-number">5</span>] &lt;&lt; <span class="hljs-number">16</span>) |<br>            (cipher_blocks[i][<span class="hljs-number">6</span>] &lt;&lt; <span class="hljs-number">8</span>) | cipher_blocks[i][<span class="hljs-number">7</span>];<br><br>        <span class="hljs-comment">// 解密</span><br>        BlowFish_Decrypt(&amp;ctx, &amp;L, &amp;R);<br><br>        <span class="hljs-comment">// 不进行小端序转换，直接按32位整数的原始字节顺序输出</span><br>        <span class="hljs-comment">// 输出L的4个字节（高位到低位）</span><br>        <span class="hljs-built_in">putchar</span>((L &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>);<br>        <span class="hljs-built_in">putchar</span>((L &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>);<br>        <span class="hljs-built_in">putchar</span>((L &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>);<br>        <span class="hljs-built_in">putchar</span>(L &amp; <span class="hljs-number">0xFF</span>);<br><br>        <span class="hljs-comment">// 输出R的4个字节（高位到低位）</span><br>        <span class="hljs-built_in">putchar</span>((R &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>);<br>        <span class="hljs-built_in">putchar</span>((R &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>);<br>        <span class="hljs-built_in">putchar</span>((R &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>);<br>        <span class="hljs-built_in">putchar</span>(R &amp; <span class="hljs-number">0xFF</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终，得到flag！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Rust-re-learning</title>
    <link href="/2025/07/06/Rust-re-learning/"/>
    <url>/2025/07/06/Rust-re-learning/</url>
    
    <content type="html"><![CDATA[<p>·</p><h2 id="rust逆向思路："><a href="#rust逆向思路：" class="headerlink" title="rust逆向思路："></a>rust逆向思路：</h2><p>快速定位<strong>关键函数</strong> (真正的main函数)：观察输出、输入，字符串搜索，断点等方法。 </p><p>定位关键 <strong>加密区</strong> ：根据输入的flag，打<strong>硬件断点</strong>，快速捕获<strong>程序中对flag访问的</strong>位置（加密区）。 </p><p>定位<strong>错误输出</strong>（附近一定有<strong>比较功能的程序</strong>）：定位到比较位置后 提取出<strong>正确加密后的结果</strong> 。 </p><h2 id="调用约定和名称修饰"><a href="#调用约定和名称修饰" class="headerlink" title="调用约定和名称修饰"></a>调用约定和名称修饰</h2><p>rust目前还没有一个稳定的ABI（<a href="https://en.wikipedia.org/wiki/Application_binary_interface">Application Binary Interface</a>），所以，编译的时候需要将所有依赖的crates一起编译。所以，我们会看到很多莫明其妙的东西。另外，为了保证代码链接的唯一性，我们不得不在编译过程中进行很多修饰，最后导致二进制文件反编译出来的玩意每个函数名字都是一坨（）。以下将介绍Rust名称修饰规则。</p><h3 id="legacy规则："><a href="#legacy规则：" class="headerlink" title="legacy规则："></a>legacy规则：</h3><p>是基于Itanium IA-64 C++ ABI（<a href="https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling%EF%BC%89%E8%BF%9B%E8%A1%8C%E4%BA%86%E9%83%A8%E5%88%86%E7%9A%84%E4%BF%AE%E6%94%B9%EF%BC%8C%E6%9C%80%E4%B8%BB%E8%A6%81%E7%9A%84%E6%98%AF%E5%9C%A8%E7%AC%A6%E5%8F%B7%E6%9C%80%E5%90%8E%E5%8A%A0%E4%BA%86%E5%93%88%E5%B8%8C%E5%80%BC%E7%94%A8%E6%9D%A5%E8%A7%A3%E5%86%B3%E9%83%A8%E5%88%86%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E7%AC%A6%E5%8F%B7%E5%94%AF%E4%B8%80%E6%80%A7%E7%9A%84%E9%97%AE%E9%A2%98%E3%80%82">https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling）进行了部分的修改，最主要的是在符号最后加了哈希值用来解决部分场景下的符号唯一性的问题。</a></p><p>eg：</p><p>1、普通函数</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// crate 名称:legacy_mangling</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">foo</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">foo_arg</span>(x: <span class="hljs-type">i32</span>) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x = &#123;&#125;&quot;</span>, x);<br>&#125;<br></code></pre></td></tr></table></figure><p>foo组名后：_ZN15legacy_mangling3foo17h7bf46936ec8fddf1E</p><p>其中_ZN为legacy规则的组名符号开头，和Itanium IA-64 C++ ABI规则一致，后面紧跟的15是crate的<code>legacy_mangling</code>的字符个数，包括了中间的下划线。3表示函数<code>foo</code>，最后面紧跟着17是hash值<code>h7bf46936ec8fddf1</code>，并以<code>E</code>表示结束。</p><p>foo_arg组名后：_ZN15legacy_mangling7foo_arg17h9d3deebd56cd9668E</p><p>可以发现参数并不会体现在前面的组名中，而是通过hash值来做区分。</p><p><u>实战中我们可以直接看到函数名，有效定位关键函数，完美。</u></p><p>2、带泛型参数的函数</p><p>不会将泛型参数信息体现在组名中，和普通函数差异只体现在hash上。</p><p>3、结构体</p><p>eg：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">point</span> = Point&#123;<br>        x: <span class="hljs-number">1</span>,<br>        y: <span class="hljs-number">2</span>,<br>    &#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, point.<span class="hljs-title function_ invoke__">add</span>());<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, point.<span class="hljs-title function_ invoke__">sub</span>())<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>    x: <span class="hljs-type">i32</span>,<br>    y: <span class="hljs-type">i32</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>        <span class="hljs-keyword">self</span>.x + <span class="hljs-keyword">self</span>.y<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">sub</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>        <span class="hljs-keyword">self</span>.x - <span class="hljs-keyword">self</span>.y<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Point结构体方法<code>add</code>和<code>sub</code>组名后:</p><p>_ZN15legacy_mangling5Point3add17h9b332fc1bb45a67eE<br>_ZN15legacy_mangling5Point3sub17hf189faef70b4895dE</p><p>组名后是crate + Struct + func + hash的组成方式</p><p>4、trait方法</p><p>eg：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">point</span> = Point&#123;<br>        x: <span class="hljs-number">1</span>,<br>        y: <span class="hljs-number">2</span>,<br>    &#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, point.<span class="hljs-title function_ invoke__">add</span>());<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">trait</span> <span class="hljs-title class_">Compute</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span>;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>    x: <span class="hljs-type">i32</span>,<br>    y: <span class="hljs-type">i32</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Compute</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Point</span>&#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>        <span class="hljs-keyword">self</span>.x + <span class="hljs-keyword">self</span>.y<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>组名后：<code>_ZN67_$LT$legacy_mangling..Point$u20$as$u20$legacy_mangling..Compute$GT$3add17h9b332fc1bb45a67eE</code></p><p>可以看到组名之后变得相对比较复杂，因为我们在不违反孤儿原则的情况下，可以实现另外crate中的trait，或者Struct在另外的crate中，所以在组名中的trait和Struct包含了crate名称。<code>$</code>和<code>.</code>两个符号是保留的特殊符号，这两个符号在编码中用来命名会报错。</p><p>（V0 组名规则以_R作为开头，去掉了后面的Hash值，普通函数中也去掉了E函数作为结尾，它主要解决如下问题：</p><ul><li>它以可逆的方式编码有关泛型参数的信息。也就是可以通过符号反推出泛型的参数信息。</li><li>它有一个一致的定义，不依赖于漂亮地打印某些语言结构。</li><li>字符由<code>A-Z</code>，<code>a-z</code>， <code>0-9</code>，和<code>_</code>组成）</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Rust-base-learning-4</title>
    <link href="/2025/07/05/Rust-base-learning-4/"/>
    <url>/2025/07/05/Rust-base-learning-4/</url>
    
    <content type="html"><![CDATA[<h1 id="Rust基础学习–（四）"><a href="#Rust基础学习–（四）" class="headerlink" title="Rust基础学习–（四）"></a>Rust基础学习–（四）</h1><h2 id="十、特征Trait"><a href="#十、特征Trait" class="headerlink" title="十、特征Trait"></a>十、特征Trait</h2><p>特征定义了<strong>一组可以被共享的行为，只要实现了特征，就能使用这组行为</strong>。</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>如果不同的类型具有相同的行为，那么我们就可以定义一个特征，然后为这些类型实现该特征。<strong>定义特征</strong>是把一些方法组合在一起，目的是定义一个实现某些目标所必需的行为的集合。</p><p>eg：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">trait</span> <span class="hljs-title class_">Summary</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">summarize</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里使用 <code>trait</code> 关键字来声明一个特征，<code>Summary</code> 是特征名。在大括号中定义了该特征的所有方法，在这个例子中是： <code>fn summarize(&amp;self) -&gt; String</code>。</p><p>特征只定义行为看起来是什么样的，而不定义行为具体是怎么样的。因此，我们只定义特征方法的签名，而不进行实现，此时方法签名结尾是 <code>;</code>，而不是一个 <code>&#123;&#125;</code>。</p><p>接下来，每一个实现这个特征的类型都需要具体实现该特征的相应方法，编译器也会确保任何实现 <code>Summary</code> 特征的类型都拥有与这个签名的定义完全一致的 <code>summarize</code> 方法。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Rust-base-learning-3</title>
    <link href="/2025/07/02/Rust-base-learning-3/"/>
    <url>/2025/07/02/Rust-base-learning-3/</url>
    
    <content type="html"><![CDATA[<p>·</p><h1 id="Rust基础学习–（三）"><a href="#Rust基础学习–（三）" class="headerlink" title="Rust基础学习–（三）"></a>Rust基础学习–（三）</h1><h2 id="六、流程控制"><a href="#六、流程控制" class="headerlink" title="六、流程控制"></a>六、流程控制</h2><h4 id="1、分支控制：if-else"><a href="#1、分支控制：if-else" class="headerlink" title="1、分支控制：if-else"></a>1、分支控制：if-else</h4><p>用if-else赋值：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">condition</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">number</span> = <span class="hljs-keyword">if</span> condition &#123;<br>        <span class="hljs-number">5</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-number">6</span><span class="hljs-comment">//用if-else语句赋值的时候，不能在不同分支使用不同的变量类型，否则报错</span><br>    &#125;;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The value of number is: &#123;&#125;&quot;</span>, number);<br>&#125;<br></code></pre></td></tr></table></figure><p>用if-else进行逻辑判断：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">n</span> = <span class="hljs-number">6</span>;<br><br>    <span class="hljs-keyword">if</span> n % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;number is divisible by 4&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> n % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;number is divisible by 3&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;number is divisible by 2&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;number is not divisible by 4, 3, or 2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、循环控制"><a href="#2、循环控制" class="headerlink" title="2、循环控制"></a>2、循环控制</h4><p><strong>（1）for循环</strong></p><p>示例：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>..=<span class="hljs-number">5</span> &#123;<span class="hljs-comment">//在in后面往往使用集合的引用格式，如果不使用引用，会导致所有权被转移到for语句块中，后续不可以再使用该集合</span><br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>【对于实现了 <code>copy</code> 特征的数组（例如 [i32; 10]）而言， <code>for item in arr</code> 并不会把 <code>arr</code> 的所有权转移，而是直接对其进行了拷贝，因此循环之后仍然可以使用 <code>arr</code> 。】</p><p>如果不需要使用声明的i，也可以用如下方式控制循环：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">for</span> <span class="hljs-variable">_</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">10</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>总结如下：</p><table><thead><tr><th>使用方法</th><th>等价使用方式</th><th>所有权</th></tr></thead><tbody><tr><td><code>for item in collection</code></td><td><code>for item in IntoIterator::into_iter(collection)</code></td><td>转移所有权</td></tr><tr><td><code>for item in &amp;collection</code></td><td><code>for item in collection.iter()</code></td><td>不可变借用</td></tr><tr><td><code>for item in &amp;mut collection</code></td><td><code>for item in collection.iter_mut()</code></td><td>可变借用</td></tr></tbody></table><p>如果想在循环中<strong>获取元素的索引</strong>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>];<br>    <span class="hljs-comment">// `.iter()` 方法把 `a` 数组变成一个迭代器</span><br>    <span class="hljs-keyword">for</span> (i, v) <span class="hljs-keyword">in</span> a.<span class="hljs-title function_ invoke__">iter</span>().<span class="hljs-title function_ invoke__">enumerate</span>() &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;第&#123;&#125;个元素是&#123;&#125;&quot;</span>, i + <span class="hljs-number">1</span>, v);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>continue：跳过本次循环继续，break：跳过当前整个循环（<strong>break 可以单独使用，也可以带一个返回值</strong>，有些类似 <code>return</code>）。</p><p><strong>（2）while循环</strong></p><p>eg;</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs RUST"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">n</span> = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> n &lt;= <span class="hljs-number">5</span>  &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;!&quot;</span>, n);<br><br>        n = n + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;我出来了！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>【for比while更安全，功能更强大，这是因为编译器增加了运行时代码来对每次while循环的每个元素进行条件检查，而，<code>for</code> 并不会使用索引去访问数组，因此更安全也更简洁，同时避免 <code>运行时的边界检查</code>，性能更高】</p><p><strong>（3）loop循环</strong></p><p>又称无条件循环，使用if和break跳出循环。</p><p>eg:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">counter</span> = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">result</span> = <span class="hljs-keyword">loop</span> &#123;<br>        counter += <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span> counter == <span class="hljs-number">10</span> &#123;<br>            <span class="hljs-keyword">break</span> counter * <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The result is &#123;&#125;&quot;</span>, result);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七、模式匹配"><a href="#七、模式匹配" class="headerlink" title="七、模式匹配"></a>七、模式匹配</h2><h4 id="1、match"><a href="#1、match" class="headerlink" title="1、match"></a>1、match</h4><p>eg;</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Direction</span> &#123;<br>    East,<br>    West,<br>    North,<br>    South,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">dire</span> = Direction::South;<br>    <span class="hljs-keyword">match</span> dire &#123;<br>        Direction::East =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;East&quot;</span>),<br>        Direction::North | Direction::South =&gt; &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;South or North&quot;</span>);<br>        &#125;,<br>        _ =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;West&quot;</span>),<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>match</code> 的匹配必须要穷举出所有可能，因此这里用 <code>_</code> 来代表未列出的所有可能性</li><li><code>match</code> 的每一个分支都必须是一个表达式，且所有分支的表达式最终返回值的类型必须相同</li><li><strong>X | Y</strong>，类似逻辑运算符 <code>或</code>，代表该分支可以匹配 <code>X</code> 也可以匹配 <code>Y</code>，只要满足一个即可</li></ul><p>（其实 <code>match</code> 跟其他语言中的 <code>switch</code> 非常像，<code>_</code> 类似于 <code>switch</code> 中的 <code>default</code>。）</p><h4 id="2、if-let"><a href="#2、if-let" class="headerlink" title="2、if let"></a>2、if let</h4><p><strong>当你只要匹配一个条件，且忽略其他条件时就用 <code>if let</code> ，否则都用 <code>match</code></strong>。</p><p>eg：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">3u8</span>);<br><span class="hljs-keyword">match</span> v &#123;<br>    <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">3</span>) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;three&quot;</span>),<br>    _ =&gt; (),<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、matches-宏"><a href="#3、matches-宏" class="headerlink" title="3、matches!宏"></a>3、matches!宏</h4><p>Rust 标准库中提供了一个非常实用的宏：<code>matches!</code>，它可以将一个表达式跟模式进行匹配，然后返回匹配的结果 <code>true</code> or <code>false</code>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">MyEnum</span> &#123;<br>    Foo,<br>    Bar<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[MyEnum::Foo,MyEnum::Bar,MyEnum::Foo];<br>    v.<span class="hljs-title function_ invoke__">iter</span>().<span class="hljs-title function_ invoke__">filter</span>(|x| matches!(x, MyEnum::Foo));<br><span class="hljs-comment">//对 v 进行过滤，只保留类型是 MyEnum::Foo 的元素</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其他例子：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">foo</span> = <span class="hljs-string">&#x27;f&#x27;</span>;<br><span class="hljs-built_in">assert!</span>(matches!(foo, <span class="hljs-string">&#x27;A&#x27;</span>..=<span class="hljs-string">&#x27;Z&#x27;</span> | <span class="hljs-string">&#x27;a&#x27;</span>..=<span class="hljs-string">&#x27;z&#x27;</span>));<br><br><span class="hljs-keyword">let</span> <span class="hljs-variable">bar</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">4</span>);<br><span class="hljs-built_in">assert!</span>(matches!(bar, <span class="hljs-title function_ invoke__">Some</span>(x) <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><p>【注：无论是<code>match</code> 还是 <code>if let</code>，这里都是一个新的代码块，而且这里的绑定相当于新变量，如果你使用同名变量，会发生变量遮蔽】</p><h4 id="4、模式及其适用场景"><a href="#4、模式及其适用场景" class="headerlink" title="4、模式及其适用场景"></a>4、模式及其适用场景</h4><p>模式是 Rust 中的特殊语法，它用来匹配类型中的结构和数据，它往往和 <code>match</code> 表达式联用，以实现强大的模式匹配能力。一般包括：</p><ul><li>字面值</li><li>解构的数组、枚举、结构体或者元组</li><li>变量</li><li>通配符</li><li>占位符</li></ul><p>适用场景：</p><ul><li><p>match 分支</p></li><li><p>if let分支</p></li><li><p>while let条件循环</p></li><li><p>for循环</p></li><li><p>let语句</p></li><li><p>函数参数</p></li><li><p>let-else语句（新增）</p><p>使用 <code>let-else</code> 匹配，即可使 <code>let</code> 变为可驳模式。它可以使用 <code>else</code> 分支来处理模式不匹配的情况，但是 <code>else</code> 分支中必须用发散的代码块处理（例如：<code>break</code>、<code>return</code>、<code>panic</code>）。</p><p>模式：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">PATTERN</span> = EXPRESSION <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 模式匹配失败时执行的代码</span><br>    <span class="hljs-comment">// 必须以发散表达式（如 panic!、return、break）结束</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>PATTERN</strong>：要匹配的模式（如 <code>Some(x)</code>、<code>(a, b)</code> 等）。</p><p><strong>EXPRESSION</strong>：要匹配的值。</p><p><strong>else 块</strong>：模式匹配失败时执行的代码，必须以 <strong>发散表达式</strong>（diverging expression）结束（即程序控制流不会继续执行后续代码）。</p><p>eg：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::<span class="hljs-type">str</span>::FromStr;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">get_count_item</span>(s: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> (<span class="hljs-type">u64</span>, &amp;<span class="hljs-type">str</span>) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">it</span> = s.<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>    <span class="hljs-keyword">let</span> (<span class="hljs-title function_ invoke__">Some</span>(count_str), <span class="hljs-title function_ invoke__">Some</span>(item)) = (it.<span class="hljs-title function_ invoke__">next</span>(), it.<span class="hljs-title function_ invoke__">next</span>()) <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;Can&#x27;t segment count item pair: &#x27;&#123;s&#125;&#x27;&quot;</span>);<br>    &#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">Ok</span>(count) = <span class="hljs-type">u64</span>::<span class="hljs-title function_ invoke__">from_str</span>(count_str) <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;Can&#x27;t parse integer: &#x27;&#123;count_str&#125;&#x27;&quot;</span>);<br>    &#125;;<br>    <span class="hljs-comment">// error: `else` clause of `let...else` does not diverge</span><br>    <span class="hljs-comment">// let Ok(count) = u64::from_str(count_str) else &#123; 0 &#125;;</span><br>    (count, item)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">get_count_item</span>(<span class="hljs-string">&quot;3 chairs&quot;</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">&quot;chairs&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>(与 <code>match</code> 和 <code>if let</code> 相比，<code>let-else</code> 的一个显著特点在于其解包成功时所创建的变量具有更广的作用域。在 <code>let-else</code> 语句中，成功匹配后的变量不再仅限于特定分支内使用)</p></li></ul><h4 id="5、全模式列表"><a href="#5、全模式列表" class="headerlink" title="5、全模式列表"></a>5、<a href="https://course.rs/basic/match-pattern/all-patterns.html#%E5%85%A8%E6%A8%A1%E5%BC%8F%E5%88%97%E8%A1%A8">全模式列表</a></h4><p>见链接</p><h2 id="八、方法Method"><a href="#八、方法Method" class="headerlink" title="八、方法Method"></a>八、方法Method</h2><h4 id="定义：使用impl来定义方法"><a href="#定义：使用impl来定义方法" class="headerlink" title="定义：使用impl来定义方法"></a>定义：使用impl来定义方法</h4><p>eg：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Circle</span> &#123;<br>    x: <span class="hljs-type">f64</span>,<br>    y: <span class="hljs-type">f64</span>,<br>    radius: <span class="hljs-type">f64</span>,<br>&#125;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Circle</span> &#123;<br>    <span class="hljs-comment">// new是Circle的关联函数，因为它的第一个参数不是self，且new并不是关键字</span><br>    <span class="hljs-comment">// 这种方法往往用于初始化当前结构体的实例</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(x: <span class="hljs-type">f64</span>, y: <span class="hljs-type">f64</span>, radius: <span class="hljs-type">f64</span>) <span class="hljs-punctuation">-&gt;</span> Circle &#123;<br>        Circle &#123;<br>            x: x,<br>            y: y,<br>            radius: radius,<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// Circle的方法，&amp;self表示借用当前的Circle结构体</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">area</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f64</span> &#123;<br>        std::<span class="hljs-type">f64</span>::consts::PI * (<span class="hljs-keyword">self</span>.radius * <span class="hljs-keyword">self</span>.radius)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="self、-self-和-mut-self："><a href="#self、-self-和-mut-self：" class="headerlink" title="self、&amp;self 和 &amp;mut self："></a>self、&amp;self 和 &amp;mut self：</h4><p>（python里的self其实相当于这里的&amp;mut self）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    width: <span class="hljs-type">u32</span>,<br>    height: <span class="hljs-type">u32</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">area</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span> &#123;<br>        <span class="hljs-keyword">self</span>.width * <span class="hljs-keyword">self</span>.height<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">rect1</span> = Rectangle &#123; width: <span class="hljs-number">30</span>, height: <span class="hljs-number">50</span> &#125;;<br><br>    <span class="hljs-built_in">println!</span>(<br>        <span class="hljs-string">&quot;The area of the rectangle is &#123;&#125; square pixels.&quot;</span>,<br>        rect1.<span class="hljs-title function_ invoke__">area</span>()<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>area</code> 的签名中，我们使用 <code>&amp;self</code> 替代 <code>rectangle: &amp;Rectangle</code>，<code>&amp;self</code> 其实是 <code>self: &amp;Self</code> 的简写（注意大小写）。在一个 <code>impl</code> 块内，<code>Self</code> 指代被实现方法的结构体类型，<code>self</code> 指代此类型的实例，换句话说，<code>self</code> 指代的是 <code>Rectangle</code> 结构体实例，这样的写法会让我们的代码简洁很多，而且非常便于理解：我们为哪个结构体实现方法，那么 <code>self</code> 就是指代哪个结构体的实例。</p><p><code>self</code> 依然有所有权的概念：</p><ul><li><code>self</code> 表示 <code>Rectangle</code> 的所有权转移到该方法中，这种形式用的较少</li><li><code>&amp;self</code> 表示该方法对 <code>Rectangle</code> 的不可变借用</li><li><code>&amp;mut self</code> 表示可变借用</li></ul><p>在上面的例子中，选择 <code>&amp;self</code> 的理由跟在函数中使用 <code>&amp;Rectangle</code> 是相同的：我们并不想获取所有权，也无需去改变它，只是希望能够读取结构体中的数据。如果想要在方法中去改变当前的结构体，需要将第一个参数改为 <code>&amp;mut self</code>。仅仅通过使用 <code>self</code> 作为第一个参数来使方法获取实例的所有权是很少见的，这种使用方式往往用于把当前的对象转成另外一个对象时使用，转换完后，就不再关注之前的对象，且可以防止对之前对象的误调用。</p><p>总结，使用方法代替函数有以下好处：</p><ul><li>不用在函数签名中重复书写 <code>self</code> 对应的类型</li><li>代码的组织性和内聚性更强，对于代码维护和阅读来说，好处巨大</li></ul><p>【在 Rust 中，允许方法名跟结构体的字段名相同。eg，当我们使用 <code>rect1.width()</code> 时，Rust 知道我们调用的是它的方法，如果使用 <code>rect1.width</code>，则是访问它的字段。一般来说，方法跟字段同名，往往适用于实现 <code>getter</code> 访问器，例如:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> my &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>        width: <span class="hljs-type">u32</span>,<br>        <span class="hljs-keyword">pub</span> height: <span class="hljs-type">u32</span>,<br>    &#125;<br><br>    <span class="hljs-keyword">impl</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(width: <span class="hljs-type">u32</span>, height: <span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>            Rectangle &#123; width, height &#125;<br>        &#125;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">width</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.width;<br>        &#125;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">height</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.height;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">rect1</span> = my::Rectangle::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">30</span>, <span class="hljs-number">50</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, rect1.<span class="hljs-title function_ invoke__">width</span>()); <span class="hljs-comment">// OK</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, rect1.<span class="hljs-title function_ invoke__">height</span>()); <span class="hljs-comment">// OK</span><br>    <span class="hljs-comment">// println!(&quot;&#123;&#125;&quot;, rect1.width); // Error - the visibility of field defaults to private</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, rect1.height); <span class="hljs-comment">// OK</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当从模块外部访问结构体时，结构体的字段默认是私有的，其目的是隐藏信息（封装）。我们如果想要从模块外部获取 <code>Rectangle</code> 的字段，只需把它的 <code>new</code>， <code>width</code> 和 <code>height</code> 方法设置为公开可见，那么用户就可以创建一个矩形，同时通过访问器 <code>rect1.width()</code> 和 <code>rect1.height()</code> 方法来获取矩形的宽度和高度。</p><p>因为 <code>width</code> 字段是私有的，当用户访问 <code>rect1.width</code> 字段时，就会报错。注意在此例中，<code>Self</code> 指代的就是被实现方法的结构体 <code>Rectangle</code>。</p><p>特别的是，这种默认的可见性（私有的）可以通过 <code>pub</code> 进行覆盖，这样对于模块外部来说，就可以直接访问使用 <code>pub</code> 修饰的字段而无需通过访问器。这种可见性仅当从定义结构的模块外部访问时才重要，并且具有隐藏信息（封装）的目的。</p><p>（暴论总结：感觉和c++的class的封装差不多）】</p><p>【-&gt;运算符在rust的替代方式：（rust并没有该运算符）</p><p>在 C&#x2F;C++ 语言中，有两个不同的运算符来调用方法：<code>.</code> 直接在对象上调用方法，而 <code>-&gt;</code> 在一个对象的指针上调用方法，这时需要先解引用指针。换句话说，如果 <code>object</code> 是一个指针，那么 <code>object-&gt;something()</code> 和 <code>(*object).something()</code> 是一样的。</p><p>Rust 并没有一个与 <code>-&gt;</code> 等效的运算符；相反，Rust 有一个叫 <strong>自动引用和解引用</strong>的功能。方法调用是 Rust 中少数几个拥有这种行为的地方。</p><p>他是这样工作的：当使用 <code>object.something()</code> 调用方法时，Rust 会自动为 <code>object</code> 添加 <code>&amp;</code>（视可见性添加<code>&amp;mut</code>)、 <code>*</code> 以便使 <code>object</code> 与方法签名匹配。也就是说，这些代码是等价的：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust">p1.<span class="hljs-title function_ invoke__">distance</span>(&amp;p2);<br>(&amp;p1).<span class="hljs-title function_ invoke__">distance</span>(&amp;p2);<br></code></pre></td></tr></table></figure><p>第一行看起来简洁的多。这种自动引用的行为之所以有效，是因为方法有一个明确的接收者———— <code>self</code> 的类型。在给出接收者和方法名的前提下，Rust 可以明确地计算出方法是仅仅读取（<code>&amp;self</code>），做出修改（<code>&amp;mut self</code>）或者是获取所有权（<code>self</code>）。事实上，Rust 对方法接收者的隐式借用让所有权在实践中更友好。】</p><h4 id="关联函数："><a href="#关联函数：" class="headerlink" title="关联函数："></a>关联函数：</h4><p>定义在 <code>impl</code> 中且没有 <code>self</code> 的函数被称之为<strong>关联函数</strong>： 因为它没有 <code>self</code>，不能用 <code>f.read()</code> 的形式调用，因此它是一个函数而不是方法，它又在 <code>impl</code> 中，与结构体紧密关联，因此称为关联函数。</p><p>eg：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(w: <span class="hljs-type">u32</span>, h: <span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> Rectangle &#123;<br>        Rectangle &#123; width: w, height: h &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>（Rust 中有一个约定俗成的规则，使用 <code>new</code> 来作为构造器的名称，出于设计上的考虑，Rust 特地没有用 <code>new</code> 作为关键字。）</p><p>因为是函数，所以不能用 <code>.</code> 的方式来调用，我们需要用 <code>::</code> 来调用，例如 <code>let sq = Rectangle::new(3, 3);</code>。这个方法位于结构体的命名空间中：<code>::</code> 语法用于关联函数和模块创建的命名空间。</p><h4 id="多个-impl-定义"><a href="#多个-impl-定义" class="headerlink" title="多个 impl 定义"></a>多个 impl 定义</h4><p>Rust 允许我们为一个结构体定义多个 <code>impl</code> 块，目的是提供更多的灵活性和代码组织性，例如当方法多了后，可以把相关的方法组织在同一个 <code>impl</code> 块中，那么就可以形成多个 <code>impl</code> 块，各自完成一块儿目标。</p><h4 id="为枚举实现方法"><a href="#为枚举实现方法" class="headerlink" title="为枚举实现方法"></a>为枚举实现方法</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#![allow(unused)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Message</span> &#123;<br>    Quit,<br>    Move &#123; x: <span class="hljs-type">i32</span>, y: <span class="hljs-type">i32</span> &#125;,<br>    <span class="hljs-title function_ invoke__">Write</span>(<span class="hljs-type">String</span>),<br>    <span class="hljs-title function_ invoke__">ChangeColor</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>),<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Message</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">call</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-comment">// 在这里定义方法体</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">m</span> = Message::<span class="hljs-title function_ invoke__">Write</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>));<br>    m.<span class="hljs-title function_ invoke__">call</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>枚举类型之所以强大，不仅仅在于它好用、可以<a href="https://course.rs/basic/compound-type/enum.html#%E5%90%8C%E4%B8%80%E5%8C%96%E7%B1%BB%E5%9E%8B">同一化类型</a>，还在于，我们可以像结构体一样，为枚举实现方法。</p><p>（除了结构体和枚举，我们还能为特征(trait)实现方法）</p><h2 id="九、泛型Generics"><a href="#九、泛型Generics" class="headerlink" title="九、泛型Generics"></a>九、泛型Generics</h2><h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><p>泛型是一种多态。泛型主要目的是为程序员提供编程的便利，减少代码的臃肿，同时可以极大地丰富语言本身的表达能力。换句话说，就是一个函数，可以代替几十个，甚至数百个函数。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">//不使用泛型</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_i8</span>(a:<span class="hljs-type">i8</span>, b:<span class="hljs-type">i8</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i8</span> &#123;<br>    a + b<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_i32</span>(a:<span class="hljs-type">i32</span>, b:<span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>    a + b<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_f64</span>(a:<span class="hljs-type">f64</span>, b:<span class="hljs-type">f64</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f64</span> &#123;<br>    a + b<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;add i8: &#123;&#125;&quot;</span>, <span class="hljs-title function_ invoke__">add_i8</span>(<span class="hljs-number">2i8</span>, <span class="hljs-number">3i8</span>));<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;add i32: &#123;&#125;&quot;</span>, <span class="hljs-title function_ invoke__">add_i32</span>(<span class="hljs-number">20</span>, <span class="hljs-number">30</span>));<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;add f64: &#123;&#125;&quot;</span>, <span class="hljs-title function_ invoke__">add_f64</span>(<span class="hljs-number">1.23</span>, <span class="hljs-number">1.23</span>));<br>&#125;<br><span class="hljs-comment">//使用泛型</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">add</span>&lt;T&gt;(a:T, b:T) <span class="hljs-punctuation">-&gt;</span> T &#123;<br>    a + b<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;add i8: &#123;&#125;&quot;</span>, <span class="hljs-title function_ invoke__">add</span>(<span class="hljs-number">2i8</span>, <span class="hljs-number">3i8</span>));<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;add i32: &#123;&#125;&quot;</span>, <span class="hljs-title function_ invoke__">add</span>(<span class="hljs-number">20</span>, <span class="hljs-number">30</span>));<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;add f64: &#123;&#125;&quot;</span>, <span class="hljs-title function_ invoke__">add</span>(<span class="hljs-number">1.23</span>, <span class="hljs-number">1.23</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码的 <code>T</code> 就是<strong>泛型参数</strong>，实际上在 Rust 中，泛型参数的名称你可以任意起，但是出于惯例，我们都用 <code>T</code> （<code>T</code> 是 <code>type</code> 的首字母）来作为首选，这个名称越短越好，除非需要表达含义，否则一个字母是最完美的。</p><p>使用泛型参数，有一个先决条件，必需在使用前对其进行声明：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">largest</span>&lt;T&gt;(list: &amp;[T]) <span class="hljs-punctuation">-&gt;</span> T &#123;<br>&#125;<br><span class="hljs-comment">//但是，如果并不是所有的类型都能进行函数中的运算，就需要加以限制，否则会报错</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">add</span>&lt;T: std::ops::Add&lt;Output = T&gt;&gt;(a:T, b:T) <span class="hljs-punctuation">-&gt;</span> T &#123;<span class="hljs-comment">//eg</span><br>    a + b<br>&#125;<br><br></code></pre></td></tr></table></figure><p>该泛型函数的作用是从列表中找出最大的值，其中列表中的元素类型为 T。首先 <code>largest&lt;T&gt;</code> 对泛型参数 <code>T</code> 进行了声明，然后才在函数参数中进行使用该泛型参数 <code>list: &amp;[T]</code>（&amp;[T]类型是数组切片） 。</p><h4 id="结构体中使用泛型"><a href="#结构体中使用泛型" class="headerlink" title="结构体中使用泛型"></a>结构体中使用泛型</h4><p>结构体中的字段类型也可以用泛型来定义，下面代码定义了一个坐标点 <code>Point</code>，它可以存放任何类型的坐标值：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&lt;T&gt; &#123;<br>    x: T,<br>    y: T,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">integer</span> = Point &#123; x: <span class="hljs-number">5</span>, y: <span class="hljs-number">10</span> &#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">float</span> = Point &#123; x: <span class="hljs-number">1.0</span>, y: <span class="hljs-number">4.0</span> &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有两点需要特别的注意：</p><ul><li><strong>提前声明</strong>，跟泛型函数定义类似，首先我们在使用泛型参数之前必需要进行声明 <code>Point&lt;T&gt;</code>，接着就可以在结构体的字段类型中使用 <code>T</code> 来替代具体的类型</li><li><strong>x 和 y 是相同的类型</strong>（如果想让 <code>x</code> 和 <code>y</code> 既能类型相同，又能类型不同，就需要使用不同的泛型参数）</li></ul><h4 id="枚举中使用泛型"><a href="#枚举中使用泛型" class="headerlink" title="枚举中使用泛型"></a>枚举中使用泛型</h4><p><code>Option&lt;T&gt;</code> 是一个拥有泛型 <code>T</code> 的枚举类型，它第一个成员是 <code>Some(T)</code>，存放了一个类型为 <code>T</code> 的值。得益于泛型的引入，我们可以在任何一个需要返回值的函数中，去使用 <code>Option&lt;T&gt;</code> 枚举类型来做为返回值，用于返回一个任意类型的值 <code>Some(T)</code>，或者没有值 <code>None</code>。</p><p>此外，还有一个重要的枚举类型：result&lt;T,E&gt;</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Result</span>&lt;T, E&gt; &#123;<br>    <span class="hljs-title function_ invoke__">Ok</span>(T),<br>    <span class="hljs-title function_ invoke__">Err</span>(E),<br>&#125;<br></code></pre></td></tr></table></figure><p>这个枚举和 <code>Option</code> 一样，主要用于函数返回值，与 <code>Option</code> 用于值的存在与否不同，<code>Result </code>关注的主要是值的正确性。</p><p>如果函数正常运行，则最后返回一个 <code>Ok(T)</code>，<code>T</code> 是函数具体的返回值类型，如果函数异常运行，则返回一个 <code>Err(E)</code>，<code>E</code> 是错误类型。例如打开一个文件：如果成功打开文件，则返回 <code>Ok(std::fs::File)</code>，因此 <code>T</code> 对应的是 <code>std::fs::File</code> 类型；而当打开文件时出现问题时，返回 <code>Err(std::io::Error)</code>，<code>E</code> 对应的就是 <code>std::io::Error</code> 类型。</p><h4 id="方法中使用泛型"><a href="#方法中使用泛型" class="headerlink" title="方法中使用泛型"></a>方法中使用泛型</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&lt;T&gt; &#123;<br>    x: T,<br>    y: T,<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; Point&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">x</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;T &#123;<br>        &amp;<span class="hljs-keyword">self</span>.x<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = Point &#123; x: <span class="hljs-number">5</span>, y: <span class="hljs-number">10</span> &#125;;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;p.x = &#123;&#125;&quot;</span>, p.<span class="hljs-title function_ invoke__">x</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>使用泛型参数前，依然需要提前声明：<code>impl&lt;T&gt;</code>，只有提前声明了，我们才能在<code>Point&lt;T&gt;</code>中使用它，这样 Rust 就知道 <code>Point</code> 的尖括号中的类型是泛型而不是具体类型。需要注意的是，这里的 <code>Point&lt;T&gt;</code> 不再是泛型声明，而是一个完整的结构体类型，因为我们定义的结构体就是 <code>Point&lt;T&gt;</code> 而不再是 <code>Point</code>。</p><p>除了结构体中的泛型参数，我们还能在该结构体的方法中定义额外的泛型参数，就跟泛型函数一样：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&lt;T, U&gt; &#123;<br>    x: T,<br>    y: U,<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T, U&gt; Point&lt;T, U&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">mixup</span>&lt;V, W&gt;(<span class="hljs-keyword">self</span>, other: Point&lt;V, W&gt;) <span class="hljs-punctuation">-&gt;</span> Point&lt;T, W&gt; &#123;<br>        Point &#123;<br>            x: <span class="hljs-keyword">self</span>.x,<br>            y: other.y,<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p1</span> = Point &#123; x: <span class="hljs-number">5</span>, y: <span class="hljs-number">10.4</span> &#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p2</span> = Point &#123; x: <span class="hljs-string">&quot;Hello&quot;</span>, y: <span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p3</span> = p1.<span class="hljs-title function_ invoke__">mixup</span>(p2);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;p3.x = &#123;&#125;, p3.y = &#123;&#125;&quot;</span>, p3.x, p3.y);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子中，<code>T,U</code> 是定义在结构体 <code>Point</code> 上的泛型参数，<code>V,W</code> 是单独定义在方法 <code>mixup</code> 上的泛型参数，它们并不冲突，说白了，你可以理解为，一个是结构体泛型，一个是函数泛型。</p><p>此外，对于 <code>Point&lt;T&gt;</code> 类型，不仅能定义基于 <code>T</code> 的方法，还能针对特定的具体类型，进行方法定义：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Point</span>&lt;<span class="hljs-type">f32</span>&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">distance_from_origin</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f32</span> &#123;<br>        (<span class="hljs-keyword">self</span>.x.<span class="hljs-title function_ invoke__">powi</span>(<span class="hljs-number">2</span>) + <span class="hljs-keyword">self</span>.y.<span class="hljs-title function_ invoke__">powi</span>(<span class="hljs-number">2</span>)).<span class="hljs-title function_ invoke__">sqrt</span>()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="const-泛型：针对值的泛型"><a href="#const-泛型：针对值的泛型" class="headerlink" title="const 泛型：针对值的泛型"></a>const 泛型：针对值的泛型</h4><p>（rust1.51版本引入）</p><p>在数组中，<code>[i32; 2]</code> 和 <code>[i32; 3]</code> 是不同的数组类型。因此我们可以使用const泛型处理数组长度问题，使其可以打印出任意长度的数组。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">display_array</span>&lt;T: std::fmt::<span class="hljs-built_in">Debug</span>, <span class="hljs-keyword">const</span> N: <span class="hljs-type">usize</span>&gt;(arr: [T; N]) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, arr);<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span>: [<span class="hljs-type">i32</span>; <span class="hljs-number">3</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-title function_ invoke__">display_array</span>(arr);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span>: [<span class="hljs-type">i32</span>; <span class="hljs-number">2</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br>    <span class="hljs-title function_ invoke__">display_array</span>(arr);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>const 泛型表达式</strong></p><p>假设我们某段代码需要在内存很小的平台上工作，因此需要限制函数参数占用的内存大小，此时就可以使用 const 泛型表达式来实现：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 目前只能在nightly版本下使用</span><br><span class="hljs-meta">#![allow(incomplete_features)]</span><br><span class="hljs-meta">#![feature(generic_const_exprs)]</span><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">something</span>&lt;T&gt;(val: T)<br><span class="hljs-keyword">where</span><br>    Assert&lt;&#123; core::mem::size_of::&lt;T&gt;() &lt; <span class="hljs-number">768</span> &#125;&gt;: IsTrue,<br>    <span class="hljs-comment">//       ^-----------------------------^ 这里是一个 const 表达式，换成其它的 const 表达式也可以</span><br>&#123;<br>    <span class="hljs-comment">//</span><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">something</span>([<span class="hljs-number">0u8</span>; <span class="hljs-number">0</span>]); <span class="hljs-comment">// ok</span><br>    <span class="hljs-title function_ invoke__">something</span>([<span class="hljs-number">0u8</span>; <span class="hljs-number">512</span>]); <span class="hljs-comment">// ok</span><br>    <span class="hljs-title function_ invoke__">something</span>([<span class="hljs-number">0u8</span>; <span class="hljs-number">1024</span>]); <span class="hljs-comment">// 编译错误，数组长度是1024字节，超过了768字节的参数长度限制</span><br>&#125;<br><br><span class="hljs-comment">// ---</span><br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Assert</span>&lt;<span class="hljs-keyword">const</span> CHECK: <span class="hljs-type">bool</span>&gt; &#123;<br>    <span class="hljs-comment">//</span><br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">trait</span> <span class="hljs-title class_">IsTrue</span> &#123;<br>    <span class="hljs-comment">//</span><br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">IsTrue</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Assert</span>&lt;<span class="hljs-literal">true</span>&gt; &#123;<br>    <span class="hljs-comment">//</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>const fn</strong></p><p>在讨论完 <code>const</code> 泛型后，不得不提及另一个与之密切相关且强大的特性：<code>const fn</code>，即常量函数。<code>const fn</code> 允许我们在编译期对函数进行求值，从而实现更高效、更灵活的代码设计。</p><p>要定义一个常量函数，只需要在函数声明前加上 <code>const</code> 关键字。例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">const</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add</span>(a: <span class="hljs-type">usize</span>, b: <span class="hljs-type">usize</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">usize</span> &#123;<br>    a + b<br>&#125;<br><br><span class="hljs-keyword">const</span> RESULT: <span class="hljs-type">usize</span> = <span class="hljs-title function_ invoke__">add</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>);<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The result is: &#123;&#125;&quot;</span>, RESULT);<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然 <code>const fn</code> 提供了很多便利，但是由于其在编译期执行，以确保函数能在编译期被安全地求值，因此有一些限制，例如，不可将随机数生成器写成 <code>const fn</code>。</p><p>无论在编译时还是运行时调用 <code>const fn</code>，它们的结果总是相同，即使多次调用也是如此。唯一的例外是，如果你在极端情况下进行复杂的浮点操作，你可能会得到（非常轻微的）不同结果。因此，不建议使 <code>数组长度 (arr.len())</code> 和 <code>Enum判别式</code> 依赖于浮点计算。</p><p><strong>结合 const fn 与 const 泛型</strong></p><p>将 <code>const fn</code> 与 <code>const 泛型</code> 结合，可以实现更加灵活和高效的代码设计。例如，创建一个固定大小的缓冲区结构，其中缓冲区大小由编译期计算确定：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Buffer</span>&lt;<span class="hljs-keyword">const</span> N: <span class="hljs-type">usize</span>&gt; &#123;<br>    data: [<span class="hljs-type">u8</span>; N],<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">compute_buffer_size</span>(factor: <span class="hljs-type">usize</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">usize</span> &#123;<br>    factor * <span class="hljs-number">1024</span><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">const</span> SIZE: <span class="hljs-type">usize</span> = <span class="hljs-title function_ invoke__">compute_buffer_size</span>(<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">buffer</span> = Buffer::&lt;SIZE&gt; &#123;<br>        data: [<span class="hljs-number">0</span>; SIZE],<br>    &#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Buffer size: &#123;&#125; bytes&quot;</span>, buffer.data.<span class="hljs-title function_ invoke__">len</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>compute_buffer_size</code> 是一个常量函数，它根据传入的 <code>factor</code> 计算缓冲区的大小。在 <code>main</code> 函数中，我们使用 <code>compute_buffer_size(4)</code> 来计算缓冲区大小为 4096 字节，并将其作为泛型参数传递给 <code>Buffer</code> 结构体。这样，缓冲区的大小在编译期就被确定下来，避免了运行时的计算开销。</p><h4 id="泛型的性能保证"><a href="#泛型的性能保证" class="headerlink" title="泛型的性能保证"></a>泛型的性能保证</h4><p>Rust 通过在编译时进行泛型代码的 <strong>单态化</strong>(<em>monomorphization</em>)来保证效率。单态化是一个通过填充编译时使用的具体类型，将通用代码转换为特定代码的过程。</p><p>编译器所做的工作正好与我们创建泛型函数的步骤相反，编译器寻找所有泛型代码被调用的位置并针对具体类型生成代码。</p><p>让我们看看一个使用标准库中 <code>Option</code> 枚举的例子：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">integer</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">5</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-variable">float</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">5.0</span>);<br></code></pre></td></tr></table></figure><p>当 Rust 编译这些代码的时候，它会进行单态化。编译器会读取传递给 <code>Option&lt;T&gt;</code> 的值并发现有两种 <code>Option&lt;T&gt;</code>：一种对应 <code>i32</code> 另一种对应 <code>f64</code>。为此，它会将泛型定义 <code>Option&lt;T&gt;</code> 展开为 <code>Option_i32</code> 和 <code>Option_f64</code>，接着将泛型定义替换为这两个具体的定义。</p><p>编译器生成的单态化版本的代码看起来像这样：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Option_i32</span> &#123;<br>    <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-type">i32</span>),<br>    <span class="hljs-literal">None</span>,<br>&#125;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Option_f64</span> &#123;<br>    <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-type">f64</span>),<br>    <span class="hljs-literal">None</span>,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">integer</span> = Option_i32::<span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">float</span> = Option_f64::<span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">5.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以使用泛型来编写不重复的代码，而 Rust 将会为每一个实例编译其特定类型的代码。这意味着在使用泛型时没有运行时开销；当代码运行，它的执行效率就跟好像手写每个具体定义的重复代码一样。这个单态化过程正是 Rust 泛型在运行时极其高效的原因。</p><p>To Be Continue…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Rust-base-learning-2</title>
    <link href="/2025/06/28/Rust-base-learning-2/"/>
    <url>/2025/06/28/Rust-base-learning-2/</url>
    
    <content type="html"><![CDATA[<ul><li></li></ul><h1 id="Rust基础学习–（二）"><a href="#Rust基础学习–（二）" class="headerlink" title="Rust基础学习–（二）"></a>Rust基础学习–（二）</h1><h2 id="四、所有权与借用"><a href="#四、所有权与借用" class="headerlink" title="四、所有权与借用"></a>四、所有权与借用</h2><h4 id="1、所有权原则"><a href="#1、所有权原则" class="headerlink" title="1、所有权原则"></a>1、所有权原则</h4><ol><li>Rust 中每一个值都被一个变量所拥有，该变量被称为值的所有者</li><li>一个值同时只能被一个变量所拥有，或者说一个值只能拥有一个所有者</li><li>当所有者（变量）离开作用域（rust的作用域与c相同）范围时，这个值将被丢弃(drop)</li></ol><h4 id="2、引用（借用）与解引用"><a href="#2、引用（借用）与解引用" class="headerlink" title="2、引用（借用）与解引用"></a>2、引用（借用）与解引用</h4><p><code>&amp;</code> 符号即是引用，它们允许你使用值，但是不获取所有权，因此，不可通过解引用来修改变量值。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = &amp;x;<br><br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">5</span>, x);<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">5</span>, *y);<span class="hljs-comment">//与上一行相同，必须使用解引用符</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这就是不可变引用，我们可以通过加上mut关键字的方式改为可变引用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><br>    <span class="hljs-title function_ invoke__">change</span>(&amp;s);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">change</span>(some_string: &amp;<span class="hljs-type">String</span>) &#123;<br>    some_string.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;, world&quot;</span>);<br>&#125;<span class="hljs-comment">//报错，这是不可变引用</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><br>    <span class="hljs-title function_ invoke__">change</span>(&amp;<span class="hljs-keyword">mut</span> s);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">change</span>(some_string: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">String</span>) &#123;<br>    some_string.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;, world&quot;</span>);<br>&#125;<span class="hljs-comment">//可以运行，这是可变引用</span><br></code></pre></td></tr></table></figure><p>不过可变引用并不是随心所欲、想用就用的，它有一个很大的限制： <strong>同一作用域，特定数据只能有一个可变引用</strong>。</p><p>另外，<strong>可变引用与不可变引用不能同时存在</strong>。</p><p>【<strong>Non-Lexical Lifetimes(NLL)</strong>：新版rust的一个特性，用于找到某个引用在作用域(<code>&#125;</code>)结束前就不再被使用的代码位置，见下例。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r1</span> = &amp;s;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r2</span> = &amp;s;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; and &#123;&#125;&quot;</span>, r1, r2);<br>    <span class="hljs-comment">// 新编译器中，r1,r2作用域在这里结束</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r3</span> = &amp;<span class="hljs-keyword">mut</span> s;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, r3);<br>&#125; <span class="hljs-comment">// 老编译器中，r1、r2、r3作用域在这里结束</span><br>  <span class="hljs-comment">// 新编译器中，r3作用域在这里结束</span><br></code></pre></td></tr></table></figure><p>】</p><p>【垂悬引用导致的报错：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">reference_to_nothing</span> = <span class="hljs-title function_ invoke__">dangle</span>();<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">dangle</span>() <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">String</span> &#123; <span class="hljs-comment">// dangle 返回一个字符串的引用</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">// s 是一个新字符串</span><br><br>    &amp;s <span class="hljs-comment">// 返回字符串 s 的引用，换为s即可避免报错，最终String的所有权被转移给外面的调用者。</span><br>&#125; <span class="hljs-comment">// 这里 s 离开作用域并被丢弃。其内存被释放。</span><br>  <span class="hljs-comment">// 危险！</span><br><br></code></pre></td></tr></table></figure><p>】</p><p>总的来说，<strong>借用规则</strong>如下：</p><ul><li>同一时刻，你只能拥有要么一个可变引用，要么任意多个不可变引用</li><li>引用必须总是有效的</li></ul><h2 id="五、复合类型"><a href="#五、复合类型" class="headerlink" title="五、复合类型"></a>五、复合类型</h2><h4 id="1、字符串与切片"><a href="#1、字符串与切片" class="headerlink" title="1、字符串与切片"></a>1、字符串与切片</h4><p><strong>切片：</strong></p><p>它允许你引用集合中部分连续的元素序列，而不是引用整个集合。</p><p>对于字符串而言，切片就是对 <code>String</code> 类型中某一部分的引用，是使用方括号包括的一个序列：[开始索引..终止索引]，它看起来像这样：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-variable">hello</span> = &amp;s[<span class="hljs-number">0</span>..<span class="hljs-number">5</span>];<br><span class="hljs-comment">//let hello = &amp;s[..5];与上面那行等效</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">world</span> = &amp;s[<span class="hljs-number">6</span>..<span class="hljs-number">11</span>];<br><span class="hljs-comment">//let world = &amp;s[6..len];与上面那行等效</span><br></code></pre></td></tr></table></figure><p>【在对字符串使用切片语法时需要格外小心，切片的索引必须落在字符之间的边界位置，也就是 UTF-8 字符的边界，例如中文在 UTF-8 中占用三个字节，下面的代码就会崩溃：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;中国人&quot;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = &amp;s[<span class="hljs-number">0</span>..<span class="hljs-number">2</span>];<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,a);<br></code></pre></td></tr></table></figure><p>因为我们只取 <code>s</code> 字符串的前两个字节，但是本例中每个汉字占用三个字节，因此没有落在边界处，也就是连 <code>中</code> 字都取不完整，此时程序会直接崩溃退出，如果改成 <code>&amp;s[0..3]</code>，则可以正常通过编译。 因此，当你需要对字符串做切片索引操作时，需要格外小心这一点。】</p><p><strong>字符串：（String）</strong></p><p>&lt;1&gt;简介：Rust 中的字符是 Unicode 类型，因此每个字符占据 4 个字节内存空间，但是在字符串中不一样，字符串是 UTF-8 编码，也就是字符串中的字符所占的字节数是变化的(1 - 4)，这样有助于大幅降低字符串所占用的内存空间。</p><p>Rust 在语言级别，只有一种字符串类型： <code>str</code>，它通常是以引用类型出现 <code>&amp;str</code>，也就是上文提到的字符串切片。虽然语言级别只有上述的 <code>str</code> 类型，但是在标准库里，还有多种不同用途的字符串类型，其中使用最广的即是 <code>String</code> 类型。</p><p><code>str</code> 类型是硬编码进可执行文件，也无法被修改，但是 <code>String</code> 则是一<u>个可增长、可改变且具有所有权</u>的 UTF-8 编码字符串，当 Rust 用户提到字符串时，往往指的就是 <code>String</code> 类型和 <code>&amp;str</code> 字符串切片类型，这两个类型都是 UTF-8 编码。</p><p>除了 <code>String</code> 类型的字符串，Rust 的标准库还提供了其他类型的字符串，例如 <code>OsString</code>， <code>OsStr</code>， <code>CsString</code> 和 <code>CsStr</code> 等，注意到这些名字都以 <code>String</code> 或者 <code>Str</code> 结尾，分别对应的是具有所有权和被借用的变量。</p><p>&lt;2&gt;String与&amp;str的转化：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello,world&quot;</span>)<br><span class="hljs-string">&quot;hello,world&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<span class="hljs-comment">//&amp;str转String的两种方式</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello,world!&quot;</span>);<br>    <span class="hljs-title function_ invoke__">say_hello</span>(&amp;s);<br>    <span class="hljs-title function_ invoke__">say_hello</span>(&amp;s[..]);<br>    <span class="hljs-title function_ invoke__">say_hello</span>(s.<span class="hljs-title function_ invoke__">as_str</span>());<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">say_hello</span>(s: &amp;<span class="hljs-type">str</span>) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,s);<br>&#125;<span class="hljs-comment">//String转&amp;str，解引用即可</span><br></code></pre></td></tr></table></figure><p>&lt;3&gt;rust不允许通过索引访问字符串某一个元素，因为Rust 提供了不同的字符串展现方式，不同语言符号占用的空间不同。但是允许字符串切片，但仅在切片恰好有意义的时候允许，否则会崩溃。</p><p>&lt;4&gt;字符串操作：修改，添加，删除</p><p>追加：在字符串尾部可以使用 <code>push()</code> 方法追加字符 <code>char</code>，也可以使用 <code>push_str()</code> 方法追加字符串字面量。这两个方法都是<strong>在原有的字符串上追加，并不会返回新的字符串</strong>。由于字符串追加操作要修改原来的字符串，则该字符串必须是可变的，即<strong>字符串变量必须由 <code>mut</code> 关键字修饰</strong>。eg：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Hello &quot;</span>);<br><br>    s.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;rust&quot;</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;追加字符串 push_str() -&gt; &#123;&#125;&quot;</span>, s);<br><br>    s.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-string">&#x27;!&#x27;</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;追加字符 push() -&gt; &#123;&#125;&quot;</span>, s);<br>&#125;<br></code></pre></td></tr></table></figure><p>插入：可以使用 <code>insert()</code> 方法插入单个字符 <code>char</code>，也可以使用 <code>insert_str()</code> 方法插入字符串字面量，与 <code>push()</code> 方法不同，这俩方法需要传入两个参数，第一个参数是字符（串）插入位置的索引，第二个参数是要插入的字符（串），索引从 0 开始计数，如果越界则会发生错误。由于字符串插入操作要<strong>修改原来的字符串</strong>，则该字符串必须是可变的，即<strong>字符串变量必须由 <code>mut</code> 关键字修饰</strong>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Hello rust!&quot;</span>);<br>    s.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;,&#x27;</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;插入字符 insert() -&gt; &#123;&#125;&quot;</span>, s);<br>    s.<span class="hljs-title function_ invoke__">insert_str</span>(<span class="hljs-number">6</span>, <span class="hljs-string">&quot; I like&quot;</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;插入字符串 insert_str() -&gt; &#123;&#125;&quot;</span>, s);<br>&#125;<br></code></pre></td></tr></table></figure><p>替换：共三个方法</p><p>1）<code>replace</code></p><p>该方法可适用于 <code>String</code> 和 <code>&amp;str</code> 类型。<code>replace()</code> 方法接收两个参数，第一个参数是要被替换的字符串，第二个参数是新的字符串。该方法会替换所有匹配到的字符串。<strong>该方法是返回一个新的字符串，而不是操作原来的字符串</strong>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">string_replace</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;I like rust. Learning rust is my favorite!&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">new_string_replace</span> = string_replace.<span class="hljs-title function_ invoke__">replace</span>(<span class="hljs-string">&quot;rust&quot;</span>, <span class="hljs-string">&quot;RUST&quot;</span>);<br>    dbg!(new_string_replace);<br>&#125;<span class="hljs-comment">//运行结果：new_string_replace = &quot;I like RUST. Learning RUST is my favorite!&quot;</span><br></code></pre></td></tr></table></figure><p>2）replacen</p><p>该方法可适用于 <code>String</code> 和 <code>&amp;str</code> 类型。<code>replacen()</code> 方法接收三个参数，前两个参数与 <code>replace()</code> 方法一样，第三个参数则表示替换的个数。<strong>该方法是返回一个新的字符串，而不是操作原来的字符串</strong>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">string_replace</span> = <span class="hljs-string">&quot;I like rust. Learning rust is my favorite!&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">new_string_replacen</span> = string_replace.<span class="hljs-title function_ invoke__">replacen</span>(<span class="hljs-string">&quot;rust&quot;</span>, <span class="hljs-string">&quot;RUST&quot;</span>, <span class="hljs-number">1</span>);<br>    dbg!(new_string_replacen);<br>&#125;<span class="hljs-comment">//运行结果：new_string_replacen = &quot;I like RUST. Learning rust is my favorite!&quot;</span><br></code></pre></td></tr></table></figure><p>3）replace_range</p><p>该方法仅适用于 <code>String</code> 类型。<code>replace_range</code> 接收两个参数，第一个参数是要替换字符串的范围（Range），第二个参数是新的字符串。<strong>该方法是直接操作原来的字符串，不会返回新的字符串。该方法需要使用 <code>mut</code> 关键字修饰</strong>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">string_replace_range</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;I like rust!&quot;</span>);<br>    string_replace_range.<span class="hljs-title function_ invoke__">replace_range</span>(<span class="hljs-number">7</span>..<span class="hljs-number">8</span>, <span class="hljs-string">&quot;R&quot;</span>);<br>    dbg!(string_replace_range);<br>&#125;<span class="hljs-comment">//运行结果：new_string_replacen = &quot;I like Rust!&quot;</span><br></code></pre></td></tr></table></figure><p>删除：共四个方法</p><p>1）<code>pop</code> —— 删除并返回字符串的最后一个字符</p><p><strong>该方法是直接操作原来的字符串</strong>。但是存在返回值，其返回值是一个 <code>Option</code> 类型，如果字符串为空，则返回 <code>None</code>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">string_pop</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;rust pop 中文!&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p1</span> = string_pop.<span class="hljs-title function_ invoke__">pop</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p2</span> = string_pop.<span class="hljs-title function_ invoke__">pop</span>();<br>    dbg!(p1);<br>    dbg!(p2);<br>    dbg!(string_pop);<br>&#125;<br></code></pre></td></tr></table></figure><p>2）<code>remove</code> —— 删除并返回字符串中指定位置的字符</p><p><strong>该方法是直接操作原来的字符串</strong>。但是存在返回值，其返回值是删除位置的字符串，只接收一个参数，表示该字符起始索引位置。<code>remove()</code> 方法是按照字节来处理字符串的，如果参数所给的位置不是合法的字符边界，则会发生错误。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">string_remove</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;测试remove方法&quot;</span>);<br>    <span class="hljs-built_in">println!</span>(<br>        <span class="hljs-string">&quot;string_remove 占 &#123;&#125; 个字节&quot;</span>,<br>        std::mem::<span class="hljs-title function_ invoke__">size_of_val</span>(string_remove.<span class="hljs-title function_ invoke__">as_str</span>())<br>    );<br>    <span class="hljs-comment">// 删除第一个汉字</span><br>    string_remove.<span class="hljs-title function_ invoke__">remove</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 下面代码会发生错误</span><br>    <span class="hljs-comment">// string_remove.remove(1);</span><br>    <span class="hljs-comment">// 直接删除第二个汉字</span><br>    <span class="hljs-comment">// string_remove.remove(3);</span><br>    dbg!(string_remove);<br>&#125;<br></code></pre></td></tr></table></figure><p>3）<code>truncate</code> —— 删除字符串中从指定位置开始到结尾的全部字符</p><p><strong>该方法是直接操作原来的字符串</strong>。无返回值。该方法 <code>truncate()</code> 方法是按照字节来处理字符串的，如果参数所给的位置不是合法的字符边界，则会发生错误。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">string_truncate</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;测试truncate&quot;</span>);<br>    string_truncate.<span class="hljs-title function_ invoke__">truncate</span>(<span class="hljs-number">3</span>);<br>    dbg!(string_truncate);<br>&#125;<br></code></pre></td></tr></table></figure><p>4）<code>clear</code> —— 清空字符串</p><p><strong>该方法是直接操作原来的字符串</strong>。调用后，删除字符串中的所有字符，相当于 <code>truncate()</code> 方法参数为 0 的时候。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">string_clear</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;string clear&quot;</span>);<br>    string_clear.<span class="hljs-title function_ invoke__">clear</span>();<br>    dbg!(string_clear);<br>&#125;<br></code></pre></td></tr></table></figure><p>连接：共三个方法</p><p>1）使用 <code>+</code> 或者 <code>+=</code> 连接字符串</p><p>使用 <code>+</code> 或者 <code>+=</code> 连接字符串，要求右边的参数必须为字符串的切片引用（Slice）类型。其实当调用 <code>+</code> 的操作符时，相当于调用了 <code>std::string</code> 标准库中的 <a href="https://doc.rust-lang.org/std/string/struct.String.html#method.add"><code>add()</code></a> 方法，这里 <code>add()</code> 方法的第二个参数是一个引用的类型。因此我们在使用 <code>+</code> 时， 必须传递切片引用类型。不能直接传递 <code>String</code> 类型。<strong><code>+</code> 是返回一个新的字符串，所以变量声明可以不需要 <code>mut</code> 关键字修饰</strong>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">string_append</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello &quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">string_rust</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;rust&quot;</span>);<br>    <span class="hljs-comment">// &amp;string_rust会自动解引用为&amp;str</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">result</span> = string_append + &amp;string_rust;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">result</span> = result + <span class="hljs-string">&quot;!&quot;</span>; <span class="hljs-comment">// `result + &quot;!&quot;` 中的 `result` 是不可变的</span><br>    result += <span class="hljs-string">&quot;!!!&quot;</span>;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;连接字符串 + -&gt; &#123;&#125;&quot;</span>, result);<br>&#125;<br></code></pre></td></tr></table></figure><p>2）add（）</p><p>以下是add方法的定义：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">add</span>(<span class="hljs-keyword">self</span>, s: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span><br></code></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">//使用</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello,&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;world!&quot;</span>);<br>    <span class="hljs-comment">// 在下句中，s1的所有权被转移走了，因此后面不能再使用s1</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s3</span> = s1 + &amp;s2;<br>    <span class="hljs-built_in">assert_eq!</span>(s3,<span class="hljs-string">&quot;hello,world!&quot;</span>);<br>    <span class="hljs-comment">// 下面的语句如果去掉注释，就会报错</span><br>    <span class="hljs-comment">// println!(&quot;&#123;&#125;&quot;,s1);</span><br>&#125;<br></code></pre></td></tr></table></figure><p>3）使用 <code>format!</code> 连接字符串</p><p><code>format!</code> 这种方式适用于 <code>String</code> 和 <code>&amp;str</code> 。<code>format!</code> 的用法与 <code>print!</code> 的用法类似。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;rust&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125; &#123;&#125;!&quot;</span>, s1, s2);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>&lt;5&gt;字符串转义：</p><p>我们可以通过转义的方式 <code>\</code> 输出 ASCII 和 Unicode 字符。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 通过 \ + 字符的十六进制表示，转义输出一个字符</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">byte_escape</span> = <span class="hljs-string">&quot;I&#x27;m writing \x52\x75\x73\x74!&quot;</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;What are you doing\x3F (\\x3F means ?) &#123;&#125;&quot;</span>, byte_escape);<br><br>    <span class="hljs-comment">// \u 可以输出一个 unicode 字符</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">unicode_codepoint</span> = <span class="hljs-string">&quot;\u&#123;211D&#125;&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">character_name</span> = <span class="hljs-string">&quot;\&quot;DOUBLE-STRUCK CAPITAL R\&quot;&quot;</span>;<br><br>    <span class="hljs-built_in">println!</span>(<br>        <span class="hljs-string">&quot;Unicode character &#123;&#125; (U+211D) is called &#123;&#125;&quot;</span>,<br>        unicode_codepoint, character_name<br>    );<br><br>    <span class="hljs-comment">// 换行了也会保持之前的字符串格式</span><br>    <span class="hljs-comment">// 使用\忽略换行符</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">long_string</span> = <span class="hljs-string">&quot;String literals</span><br><span class="hljs-string">                        can span multiple lines.</span><br><span class="hljs-string">                        The linebreak and indentation here -&gt;\</span><br><span class="hljs-string">                        &lt;- can be escaped too!&quot;</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, long_string);<br>&#125;<br><span class="hljs-comment">//以下是保持原样，不转义的格式</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-string">&quot;hello \\x52\\x75\\x73\\x74&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">raw_str</span> = <span class="hljs-string">r&quot;Escapes don&#x27;t work here: \x3F \u&#123;211D&#125;&quot;</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, raw_str);<br><br>    <span class="hljs-comment">// 如果字符串包含双引号，可以在开头和结尾加 #</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">quotes</span> = <span class="hljs-string">r#&quot;And then I said: &quot;There is no escape!&quot;&quot;#</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, quotes);<br><br>    <span class="hljs-comment">// 如果字符串中包含 # 号，可以在开头和结尾加多个 # 号，最多加255个，只需保证与字符串中连续 # 号的个数不超过开头和结尾的 # 号的个数即可</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">longer_delimiter</span> = <span class="hljs-string">r###&quot;A string with &quot;# in it. And even &quot;##!&quot;###</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, longer_delimiter);<br>&#125;<br></code></pre></td></tr></table></figure><p>&lt;6&gt;操作UTF-8字符</p><p>char（）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">for</span> <span class="hljs-variable">c</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;中国人&quot;</span>.<span class="hljs-title function_ invoke__">chars</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, c);<br>&#125;<br><span class="hljs-comment">//输出；</span><br><span class="hljs-comment">//中</span><br><span class="hljs-comment">//国</span><br><span class="hljs-comment">//人</span><br></code></pre></td></tr></table></figure><p>bytes（）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">for</span> <span class="hljs-variable">b</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;中国人&quot;</span>.<span class="hljs-title function_ invoke__">bytes</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, b);<br>&#125;<br><span class="hljs-comment">//输出：</span><br><span class="hljs-comment">//228</span><br><span class="hljs-comment">//184</span><br><span class="hljs-comment">//173</span><br><span class="hljs-comment">//229</span><br><span class="hljs-comment">//155</span><br><span class="hljs-comment">//189</span><br><span class="hljs-comment">//228</span><br><span class="hljs-comment">//186</span><br><span class="hljs-comment">//186</span><br></code></pre></td></tr></table></figure><h4 id="2、元组"><a href="#2、元组" class="headerlink" title="2、元组"></a>2、元组</h4><p>元组是由多种类型组合到一起形成的，因此它是复合类型，元组的长度是固定的，元组中元素的顺序也是固定的。</p><p>创建：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">tup</span>: (<span class="hljs-type">i32</span>, <span class="hljs-type">f64</span>, <span class="hljs-type">u8</span>) = (<span class="hljs-number">500</span>, <span class="hljs-number">6.4</span>, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用模式匹配或者 <code>.</code> 操作符来获取元组中的值。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">tup</span> = (<span class="hljs-number">500</span>, <span class="hljs-number">6.4</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">let</span> (x, y, z) = tup;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The value of y is: &#123;&#125;&quot;</span>, y);<br>&#125;<span class="hljs-comment">//模式匹配</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span>: (<span class="hljs-type">i32</span>, <span class="hljs-type">f64</span>, <span class="hljs-type">u8</span>) = (<span class="hljs-number">500</span>, <span class="hljs-number">6.4</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">five_hundred</span> = x.<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">six_point_four</span> = x.<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">one</span> = x.<span class="hljs-number">2</span>;<br>&#125;<span class="hljs-comment">//用.访问</span><br></code></pre></td></tr></table></figure><h4 id="3、结构体"><a href="#3、结构体" class="headerlink" title="3、结构体"></a>3、结构体</h4><p>&lt;1&gt;和c语言语法基本相同</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span> &#123;<br>    active: <span class="hljs-type">bool</span>,<br>    username: <span class="hljs-type">String</span>,<br>    email: <span class="hljs-type">String</span>,<br>    sign_in_count: <span class="hljs-type">u64</span>,<br>&#125;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">user1</span> = User &#123;<br>        email: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;someone@example.com&quot;</span>),<br>        username: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;someusername123&quot;</span>),<br>        active: <span class="hljs-literal">true</span>,<br>        sign_in_count: <span class="hljs-number">1</span>,<br>    &#125;;<br>    user1.email = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;anotheremail@example.com&quot;</span>);<span class="hljs-comment">//只有使用mut关键字才能修改</span><br></code></pre></td></tr></table></figure><p>（简化：构建结构体的时候，当函数参数和结构体字段同名时，可以直接使用缩略的方式进行初始化。</p><p>eg：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">build_user</span>(email: <span class="hljs-type">String</span>, username: <span class="hljs-type">String</span>) <span class="hljs-punctuation">-&gt;</span> User &#123;<br>    User &#123;<br>        email,<br>        username,<br>        active: <span class="hljs-literal">true</span>,<br>        sign_in_count: <span class="hljs-number">1</span>,<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>更新结构体时，与原结构体相同的部分可以的通过结构体更新语法 <code>..user1（原结构体名）</code> 即可完成。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">user2</span> = User &#123;<br>      email: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;another@example.com&quot;</span>),<br>      ..user1<br>  &#125;;<br><br></code></pre></td></tr></table></figure><p>）</p><p>&lt;2&gt;结构体的内存排列与访问</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">f1</span> = File &#123;<br>        name: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;f1.txt&quot;</span>),<br>        data: <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>(),<br>    &#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">name</span> = f1.name;  <span class="hljs-comment">// 转移name字段的所有权</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, name);  <span class="hljs-comment">// 可以正常访问name</span><br>    <span class="hljs-comment">// println!(&quot;&#123;:?&#125;&quot;, f1);  // 错误！f1的部分所有权已被转移</span><br>    <span class="hljs-comment">// println!(&quot;&#123;&#125;&quot;, f1.name);  // 错误！name字段的所有权已被转移</span><br>    <span class="hljs-comment">// 但仍可访问未被转移所有权的字段</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;data length: &#123;&#125;&quot;</span>, f1.data.<span class="hljs-title function_ invoke__">len</span>());  <span class="hljs-comment">// 正确！data的所有权未被转移</span><br>&#125;<br></code></pre></td></tr></table></figure><p>&lt;3&gt;元组结构体</p><p>结构体必须要有名称，但是结构体的字段可以没有名称，这种结构体长得很像元组，因此被称为元组结构体，这种方式在希望有一个整体名称，但是又不关心里面字段的名称时将非常有用。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Color</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>);<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-variable">black</span> = <span class="hljs-title function_ invoke__">Color</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-variable">origin</span> = <span class="hljs-title function_ invoke__">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>&lt;4&gt;单元结构体</p><p>如果你定义一个类型，但是不关心该类型的内容，只关心它的行为时，就可以使用 <code>单元结构体</code>，即没有内含变量的结构体。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AlwaysEqual</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">subject</span> = AlwaysEqual;<br><span class="hljs-comment">// 我们不关心 AlwaysEqual 的字段数据，只关心它的行为，因此将它声明为单元结构体，然后再为它实现某个特征</span><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">SomeTrait</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">AlwaysEqual</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>&lt;5&gt;结构体数据所有权</p><p>结构体要么使用具有自身所有权的变量，要么在从其他对象借用数据时加上生命周期符（见后续生命周期部分）</p><p>&lt;6&gt;使用#[derive(Debug)]来打印结构体的信息</p><p>结构体没有实现Display特征，因此不可以直接使用{}打印</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug)]</span><span class="hljs-comment">//手动实现Debug特征，而不是Display特征</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    width: <span class="hljs-type">u32</span>,<br>    height: <span class="hljs-type">u32</span>,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">rect1</span> = Rectangle &#123;<br>        width: <span class="hljs-number">30</span>,<br>        height: <span class="hljs-number">50</span>,<br>    &#125;;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;rect1 is &#123;:?&#125;&quot;</span>, rect1);<br>&#125;<span class="hljs-comment">//输出：</span><br><span class="hljs-comment">//$ cargo run</span><br><span class="hljs-comment">//rect1 is Rectangle &#123; width: 30, height: 50 &#125;</span><br><span class="hljs-comment">//也可以用&#123;:#?&#125;&#123;:?&#125;，输出结果是：</span><br><span class="hljs-comment">//rect1 is Rectangle &#123;</span><br><span class="hljs-comment">//    width: 30,</span><br><span class="hljs-comment">//    height: 50,</span><br><span class="hljs-comment">//&#125;</span><br></code></pre></td></tr></table></figure><p>除了使用println!()外，还可以使用dbg!宏进行输出。</p><p>（<code>dbg!</code> 输出到标准错误输出 <code>stderr</code>，而 <code>println!</code> 输出到标准输出 <code>stdout</code>）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    width: <span class="hljs-type">u32</span>,<br>    height: <span class="hljs-type">u32</span>,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">scale</span> = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">rect1</span> = Rectangle &#123;<br>        width: dbg!(<span class="hljs-number">30</span> * scale),<br>        height: <span class="hljs-number">50</span>,<br>    &#125;;<br><br>    dbg!(&amp;rect1);<br>&#125;<br><span class="hljs-comment">//输出：</span><br><span class="hljs-comment">//$ cargo run</span><br><span class="hljs-comment">//[src/main.rs:10] 30 * scale = 60</span><br><span class="hljs-comment">//[src/main.rs:14] &amp;rect1 = Rectangle &#123;</span><br><span class="hljs-comment">//    width: 60,</span><br><span class="hljs-comment">//    height: 50,</span><br><span class="hljs-comment">//&#125;</span><br><br></code></pre></td></tr></table></figure><h4 id="4、枚举"><a href="#4、枚举" class="headerlink" title="4、枚举"></a>4、枚举</h4><p>eg：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">PokerSuit</span> &#123;<br>  Clubs,<br>  Spades,<br>  Diamonds,<br>  Hearts,<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">heart</span> = PokerSuit::Hearts;<span class="hljs-comment">//创建两个实例</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">diamond</span> = PokerSuit::Diamonds;<br>    <span class="hljs-title function_ invoke__">print_suit</span>(heart);<br>    <span class="hljs-title function_ invoke__">print_suit</span>(diamond);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">print_suit</span>(card: PokerSuit) &#123;<br>    <span class="hljs-comment">// 需要在定义 enum PokerSuit 的上面添加上 #[derive(Debug)]，否则会报 card 没有实现 Debug</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>,card);<br>&#125;<br></code></pre></td></tr></table></figure><p>枚举成员可以包含各种数据，如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Message</span> &#123;<br>    Quit,<br>    Move &#123; x: <span class="hljs-type">i32</span>, y: <span class="hljs-type">i32</span> &#125;,<br>    <span class="hljs-title function_ invoke__">Write</span>(<span class="hljs-type">String</span>),<br>    <span class="hljs-title function_ invoke__">ChangeColor</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>),<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">m1</span> = Message::Quit;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">m2</span> = Message::Move&#123;x:<span class="hljs-number">1</span>,y:<span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">m3</span> = Message::<span class="hljs-title function_ invoke__">ChangeColor</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>Quit</code> 没有任何关联数据</li><li><code>Move</code> 包含一个匿名结构体</li><li><code>Write</code> 包含一个 <code>String</code> 字符串</li><li><code>ChangeColor</code> 包含三个 <code>i32</code></li></ul><p>【用Option枚举处理空值：</p><p>（代替其他语言中的NULL）</p><p>定义：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Option</span>&lt;T&gt; &#123;<br>    <span class="hljs-title function_ invoke__">Some</span>(T),<br>    <span class="hljs-literal">None</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 <code>T</code> 是泛型参数，<code>Some(T)</code>表示该枚举成员的数据类型是 <code>T</code>，换句话说，<code>Some</code> 可以包含任何类型的数据。</p><p><code>Option&lt;T&gt;</code> 枚举是如此有用以至于它被包含在了prelude（prelude 属于 Rust 标准库，Rust 会将最常用的类型、函数等提前引入其中，省得我们再手动引入）之中，你不需要将其显式引入作用域。另外，它的成员 <code>Some</code> 和 <code>None</code> 也是如此，无需使用 <code>Option::</code> 前缀就可直接使用 <code>Some</code> 和 <code>None</code></p><p>option<T>的匹配：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">plus_one</span>(x: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>    <span class="hljs-keyword">match</span> x &#123;<br>        <span class="hljs-literal">None</span> =&gt; <span class="hljs-literal">None</span>,<br>        <span class="hljs-title function_ invoke__">Some</span>(i) =&gt; <span class="hljs-title function_ invoke__">Some</span>(i + <span class="hljs-number">1</span>),<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-variable">five</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">5</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-variable">six</span> = <span class="hljs-title function_ invoke__">plus_one</span>(five);<br><span class="hljs-keyword">let</span> <span class="hljs-variable">none</span> = <span class="hljs-title function_ invoke__">plus_one</span>(<span class="hljs-literal">None</span>);<br><br></code></pre></td></tr></table></figure><p><code>plus_one</code> 接受一个 <code>Option&lt;i32&gt;</code> 类型的参数，同时返回一个 <code>Option&lt;i32&gt;</code> 类型的值（这种形式的函数在标准库内随处所见），在该函数的内部处理中，如果传入的是一个 <code>None</code> ，则返回一个 <code>None</code> 且不做任何处理；如果传入的是一个 <code>Some(i32)</code>，则通过模式绑定，把其中的值绑定到变量 <code>i</code> 上，然后返回 <code>i+1</code> 的值，同时用 <code>Some</code> 进行包裹。</p><p>】</p><h4 id="5、数组"><a href="#5、数组" class="headerlink" title="5、数组"></a>5、数组</h4><p>在日常开发中，使用最广的数据结构之一就是数组，在 Rust 中，最常用的数组有两种，第一种是速度很快但是长度固定的 <code>array</code>，第二种是可动态增长的但是有性能损耗的 <code>Vector</code>，在本书中，我们称 <code>array</code> 为数组，<code>Vector</code> 为动态数组。</p><p>&lt;1&gt;array:</p><p>三要素：</p><ul><li>长度固定</li><li>元素必须有相同的类型</li><li>依次线性排列</li></ul><p>创建：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span>: [<span class="hljs-type">i32</span>; <span class="hljs-number">5</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<span class="hljs-comment">//声明类型</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = [<span class="hljs-number">3</span>; <span class="hljs-number">5</span>];<span class="hljs-comment">//声明重复出现的数据，5个元素，均为3，当数组元素为非基础类型时，不可以使用</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">array</span>: [<span class="hljs-type">String</span>; <span class="hljs-number">8</span>] = std::array::<span class="hljs-title function_ invoke__">from_fn</span>(|_i| <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;rust is good!&quot;</span>));<span class="hljs-comment">//当数组元素为重复的非基础类型时，这么写</span><br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:#?&#125;&quot;</span>, array);<br>&#125;<br></code></pre></td></tr></table></figure><p>访问：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = [<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">first</span> = a[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 获取a数组第一个元素</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">second</span> = a[<span class="hljs-number">1</span>]; <span class="hljs-comment">// 获取第二个元素</span><br>    <span class="hljs-comment">// let sixth = a[5];运行此行时程序会崩溃，由于数组访问越界</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>数组切片：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">a</span>: [<span class="hljs-type">i32</span>; <span class="hljs-number">5</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> <span class="hljs-variable">slice</span>: &amp;[<span class="hljs-type">i32</span>] = &amp;a[<span class="hljs-number">1</span>..<span class="hljs-number">3</span>];<br><span class="hljs-built_in">assert_eq!</span>(slice, &amp;[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br></code></pre></td></tr></table></figure><ul><li>切片的长度可以与数组不同，并不是固定的，而是取决于你使用时指定的起始和结束位置</li><li>创建切片的代价非常小，因为切片只是针对底层数组的一个引用</li><li>切片类型 [T] 拥有不固定的大小，而切片引用类型 &amp;[T] 则具有固定的大小，因为 Rust 很多时候都需要固定大小数据类型，因此 &amp;[T] 更有用，<code>&amp;str</code> 字符串切片也同理</li></ul><p>&lt;2&gt;vector：</p><p>动态数组（具体见集合类型，须先学习其他知识）</p><p>To Be Continue…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Rust-base-learning</title>
    <link href="/2025/06/28/Rust-base-learning/"/>
    <url>/2025/06/28/Rust-base-learning/</url>
    
    <content type="html"><![CDATA[<ul><li></li></ul><h1 id="Rust基础学习–（一）"><a href="#Rust基础学习–（一）" class="headerlink" title="Rust基础学习–（一）"></a>Rust基础学习–（一）</h1><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><h4 id="1、hello-rust–printfn-及其用法"><a href="#1、hello-rust–printfn-及其用法" class="headerlink" title="1、hello rust–printfn!及其用法"></a>1、hello rust–printfn!及其用法</h4><p>eg：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;1&#125; &#123;0&#125;&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>, <span class="hljs-string">&quot;Hello&quot;</span>);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;name&#125; is &#123;age&#125; years old.&quot;</span>, name = <span class="hljs-string">&quot;Alice&quot;</span>, age = <span class="hljs-number">30</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-variable">pi</span> = <span class="hljs-number">3.1415926</span>;<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, pi);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Pi is approximately &#123;:.2&#125;&quot;</span>, pi); <span class="hljs-comment">// 保留两位小数</span><br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Number: &#123;:05&#125;&quot;</span>, <span class="hljs-number">42</span>); <span class="hljs-comment">// 宽度为5，不足部分补0</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">point</span> = (x = <span class="hljs-number">10</span>, y = <span class="hljs-number">20</span>);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Point: &#123;:?&#125;&quot;</span>, point);<span class="hljs-comment">//输出Point: (x = 10, y = 20)，输出变量的调试格式</span><br></code></pre></td></tr></table></figure><p>printfn!()是一个宏,其功能是把格式化文本输出到标准输出（stdout），并且会自动换行。</p><p>Rust 使用 <code>&#123;&#125;</code> 来作为格式化输出占位符，其它语言可能使用的是 <code>%s</code>，<code>%d</code>，<code>%p</code> 等，由于 <code>println!</code> 会自动推导出具体的类型，因此无需手动指定。</p><p>其他相关宏：</p><p><code>print!</code>：和 <code>println!</code> 类似，但不会自动换行。</p><p><code>eprintln!</code>：把内容输出到标准错误（stderr）。</p><p><code>format!</code>：将格式化后的字符串存储到变量中，而不是直接输出。</p><h4 id="2、cargo、rustc"><a href="#2、cargo、rustc" class="headerlink" title="2、cargo、rustc"></a>2、cargo、rustc</h4><p>cargo new 新文件名（创建复杂工程）</p><p>cargo build 文件名（编译）</p><p>cargo run 文件名（编译加执行）</p><p>编译：rustc 文件名(rs文件)（简单）</p><p>执行：.&#x2F;exe文件</p><h2 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h2><h4 id="1、手动设置变量的可变性："><a href="#1、手动设置变量的可变性：" class="headerlink" title="1、手动设置变量的可变性："></a>1、手动设置变量的可变性：</h4><p>rust需要手动设置变量是否可变，以同时保证安全性和灵活性。</p><p>默认下，变量都是不可变的，如果需要可变，需要通过mut关键字来声明。</p><p>eg：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);<br>    x = <span class="hljs-number">6</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果我们运行这段代码，就会报错，因为没有设置可变，解决方法就是在声明let并进行绑定的时候在let后面加上mut，变为let mut x&#x3D;5;</p><p>（这里没有使用mut关键字的变量并不等同于常量，常量需要使用 <code>const</code> 关键字而不是 <code>let</code> 关键字来声明，并且值的类型<strong>必须</strong>标注Rust ，以下是一个常量命名示例：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">const</span> MAX_POINTS: <span class="hljs-type">u32</span> = <span class="hljs-number">100_000</span>;<br></code></pre></td></tr></table></figure><p><em>常量的命名约定是全部字母都使用大写，并使用下划线分隔单词，另外对数字字面量可插入下划线以提高可读性。常量可以在任意作用域内声明，包括全局作用域，在声明的作用域内，常量在<u>程序运行的整个过程中</u>都有效。</em></p><p>）</p><h4 id="2、变量的绑定-移动，克隆与拷贝"><a href="#2、变量的绑定-移动，克隆与拷贝" class="headerlink" title="2、变量的绑定,移动，克隆与拷贝"></a>2、变量的绑定,移动，克隆与拷贝</h4><p>我们在rust中将变量声明称之为绑定。 这是因为Rust 最核心的原则——<strong>所有权</strong>，后续会学到。</p><p>何为所有权？简单来讲，任何内存对象都是有主人的，而且一般情况下完全属于它的主人，绑定就是把这个对象绑定给一个变量，让这个变量成为它的主人，同时，该对象之前的主人就会丧失对该对象的所有权。</p><p>Rust 中，将一个值赋给另一个变量时，会发生移动（Move），而非复制。移动后，原变量不再有效。若你确实需要复制值，可以使用 <code>clone</code> 方法（深拷贝）。</p><p>此外，拷贝（copy）实现了 <code>Copy</code> trait 的类型（如整数、布尔值等），赋值时会直接复制值，不会转移所有权。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">//move</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span> = s1; <span class="hljs-comment">// s1 的所有权移交给 s2</span><br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s1); <span class="hljs-comment">// 错误！s1 已无效</span><br><span class="hljs-comment">//clone</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span> = s1.<span class="hljs-title function_ invoke__">clone</span>(); <span class="hljs-comment">// 复制 s1 的数据</span><br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;s1 = &#123;&#125;, s2 = &#123;&#125;&quot;</span>, s1, s2); <span class="hljs-comment">// 正常运行</span><br><span class="hljs-comment">//copy</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = x; <span class="hljs-comment">// x 的值被复制给 y</span><br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x = &#123;&#125;, y = &#123;&#125;&quot;</span>, x, y); <span class="hljs-comment">// 正常运行</span><br></code></pre></td></tr></table></figure><h4 id="3、忽略未被使用的变量："><a href="#3、忽略未被使用的变量：" class="headerlink" title="3、忽略未被使用的变量："></a>3、忽略未被使用的变量：</h4><p>rust会给声明却未使用的变量一个警告，如想去掉警告，需要在变量声明的时候在变量名前面加一个_（是在变量名前面直接加，没有空格，变量名也没有被改变）</p><h4 id="4、变量解构："><a href="#4、变量解构：" class="headerlink" title="4、变量解构："></a>4、变量解构：</h4><p><code>let</code> 表达式不仅仅用于变量的绑定，还能进行复杂变量的解构：从一个相对复杂的变量中，匹配出该变量的一部分内容：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> (a, <span class="hljs-keyword">mut</span> b): (<span class="hljs-type">bool</span>,<span class="hljs-type">bool</span>) = (<span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">// a = true,不可变; b = false，可变</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;a = &#123;:?&#125;, b = &#123;:?&#125;&quot;</span>, a, b);<br><br>    b = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">assert_eq!</span>(a, b);<br>&#125;<br></code></pre></td></tr></table></figure><p>（assert_eq!：</p><p>主要用于测试代码时验证两个值是否相等。要是这两个值不相等，程序就会触发 panic(崩溃,Rust 使用这个术语来表明程序因错误而退出)，测试也就失败了。</p><p>具体用法：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">test_division</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">result</span> = <span class="hljs-number">10</span> / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">assert_eq!</span>(result, <span class="hljs-number">5</span>, <span class="hljs-string">&quot;10除以2应该等于5，但实际结果是&#123;&#125;&quot;</span>, result);<span class="hljs-comment">//自己指定错误信息，也可以不指定，由系统自动输出失败信息</span><br>&#125;<br></code></pre></td></tr></table></figure><p>相关地，<code>assert_ne!</code> 用于验证两个值是否不相等）</p><p>解构式赋值：</p><p>eg：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Struct</span> &#123;<br>    e: <span class="hljs-type">i32</span><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> (a, b, c, d, e);<br><br>    (a, b) = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-comment">// _ 代表匹配一个值，但是我们不关心具体的值是什么，因此没有使用一个变量名而是使用了 _</span><br>    [c, .., d, _] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<span class="hljs-comment">//第一个元素赋值为c，倒数第二个赋值为d,这是 Rust 1.59 引入的数组切片模式</span><br>    Struct &#123; e, .. &#125; = Struct &#123; e: <span class="hljs-number">5</span> &#125;;<span class="hljs-comment">//从右侧的结构体中提取 e 字段的值（即5），并赋给e，这是结构体模式匹配</span><br><br>    <span class="hljs-built_in">assert_eq!</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [a, b, c, d, e]);<br>&#125;<br></code></pre></td></tr></table></figure><p>（需要注意的是，使用 <code>+=</code> 的赋值语句还不支持解构式赋值）</p><h4 id="5、变量遮蔽"><a href="#5、变量遮蔽" class="headerlink" title="5、变量遮蔽"></a>5、变量遮蔽</h4><p>Rust 允许声明相同的变量名，在后面声明的变量会遮蔽掉前面声明的（在被遮蔽后，无法再访问到之前的同名变量）。</p><p>eg：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-comment">// 在main函数的作用域内对之前的x进行遮蔽</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = x + <span class="hljs-number">1</span>;<br>    &#123;<br>        <span class="hljs-comment">// 在当前的花括号作用域内，对之前的x进行遮蔽</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = x * <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The value of x in the inner scope is: &#123;&#125;&quot;</span>, x);<br>    &#125;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);<br>&#125;<br></code></pre></td></tr></table></figure><p>这和 <code>mut</code> 变量的使用是不同的，第二个 <code>let</code> 生成了完全不同的新变量，两个变量只是恰好拥有同样的名称，涉及一次内存对象的再分配 ，而 <code>mut</code> 声明的变量，可以修改同一个内存地址上的值，并不会发生内存对象的再分配，性能要更好。</p><h4 id="6、变量的类型"><a href="#6、变量的类型" class="headerlink" title="6、变量的类型"></a>6、变量的类型</h4><p><strong>（1）整数类型</strong></p><table><thead><tr><th>长度</th><th>有符号类型</th><th>无符号类型</th></tr></thead><tbody><tr><td>8 位</td><td><code>i8</code></td><td><code>u8</code></td></tr><tr><td>16 位</td><td><code>i16</code></td><td><code>u16</code></td></tr><tr><td>32 位</td><td><code>i32</code></td><td><code>u32</code></td></tr><tr><td>64 位</td><td><code>i64</code></td><td><code>u64</code></td></tr><tr><td>128 位</td><td><code>i128</code></td><td><code>u128</code></td></tr><tr><td>视架构而定</td><td><code>isize</code></td><td><code>usize</code></td></tr></tbody></table><p>整型字面量可以用下表的形式书写：</p><table><thead><tr><th>数字字面量</th><th>示例</th></tr></thead><tbody><tr><td>十进制</td><td><code>98_222</code></td></tr><tr><td>十六进制</td><td><code>0xff</code></td></tr><tr><td>八进制</td><td><code>0o77</code></td></tr><tr><td>二进制</td><td><code>0b1111_0000</code></td></tr><tr><td>字节 (仅限于 <code>u8</code>)</td><td><code>b&#39;A&#39;</code></td></tr></tbody></table><p><strong>整型溢出</strong></p><p>当在 debug 模式编译时，Rust 会检查整型溢出，若存在这些问题，则使程序在编译时 panic</p><p>在当使用 <code>--release</code> 参数进行 release 模式构建时，Rust <strong>不</strong>检测溢出。相反，当检测到整型溢出时，Rust 会按照补码循环溢出（<em>two’s complement wrapping</em>）的规则处理。简而言之，大于该类型最大值的数值会被补码转换成该类型能够支持的对应数字的最小值。比如在 <code>u8</code> 的情况下，256 变成 0，257 变成 1，依此类推。程序不会 panic，但是该变量的值可能不是期望值。依赖这种默认行为的代码都应该被认为是错误的代码。</p><p><strong>（2）浮点数类型与运算</strong></p><p>浮点数根据 <code>IEEE-754</code> 标准实现。<code>f32</code> 类型是单精度浮点型，<code>f64</code> 为双精度。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>  <span class="hljs-comment">// 断言0.1 + 0.2与0.3相等</span><br>  <span class="hljs-built_in">assert!</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span> == <span class="hljs-number">0.3</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序会panic，因为二进制精度问题，导致了 0.1 + 0.2 并不严格等于 0.3（在i64类型中），它们可能在小数点 N 位后存在误差。</p><p>那如果非要进行比较的话，可以考虑用这种方式 <code>(0.1_f64 + 0.2 - 0.3).abs() &lt; 0.00001</code> ，具体小于多少，取决于对精度的需求。</p><p>（NaN：</p><p>对于数学上未定义的结果，例如对负数取平方根 <code>-42.1.sqrt()</code> ，会产生一个特殊的结果：Rust 的浮点数类型使用 NaN (not a number) 来处理这些情况</p><p>所有跟 <code>NaN</code> 交互的操作，都会返回一个 <code>NaN</code>，而且 <code>NaN</code> 不能用来比较，代码会崩溃）</p><p>运算：</p><p>综合示例：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>  <span class="hljs-comment">// 编译器会进行自动推导，给予twenty i32的类型</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-variable">twenty</span> = <span class="hljs-number">20</span>;<br>  <span class="hljs-comment">// 类型标注</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-variable">twenty_one</span>: <span class="hljs-type">i32</span> = <span class="hljs-number">21</span>;<br>  <span class="hljs-comment">// 通过类型后缀的方式进行类型标注：22是i32类型</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-variable">twenty_two</span> = <span class="hljs-number">22i32</span>;<br><br>  <span class="hljs-comment">// 只有同样类型，才能运算</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-variable">addition</span> = twenty + twenty_one + twenty_two;<br>  <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; + &#123;&#125; + &#123;&#125; = &#123;&#125;&quot;</span>, twenty, twenty_one, twenty_two, addition);<br><br>  <span class="hljs-comment">// 对于较长的数字，可以用_进行分割，提升可读性</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-variable">one_million</span>: <span class="hljs-type">i64</span> = <span class="hljs-number">1_000_000</span>;<br>  <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, one_million.<span class="hljs-title function_ invoke__">pow</span>(<span class="hljs-number">2</span>));<br><br>  <span class="hljs-comment">// 定义一个f32数组，其中42.0会自动被推导为f32类型</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-variable">forty_twos</span> = [<br>    <span class="hljs-number">42.0</span>,<br>    <span class="hljs-number">42f32</span>,<br>    <span class="hljs-number">42.0_f32</span>,<br>  ];<br><br>  <span class="hljs-comment">// 打印数组中第一个值，并控制小数位为2位</span><br>  <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:.2&#125;&quot;</span>, forty_twos[<span class="hljs-number">0</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>位运算：</p><p>Rust 的位运算基本上和其他语言一样</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>&amp; 位与</td><td>相同位置均为1时则为1，否则为0</td></tr><tr><td>| 位或</td><td>相同位置只要有1时则为1，否则为0</td></tr><tr><td>^ 异或</td><td>相同位置不相同则为1，相同则为0</td></tr><tr><td>! 位非</td><td>把位中的0和1相互取反，即0置为1，1置为0</td></tr><tr><td>&lt;&lt; 左移</td><td>所有位向左移动指定位数，右位补0</td></tr><tr><td>&gt;&gt; 右移</td><td>所有位向右移动指定位数，带符号移动（正数补0，负数补1）</td></tr></tbody></table><p>（<strong>序列</strong>：Rust 提供了一个非常简洁的方式，用来生成连续的数值，例如 <code>1..5</code>，生成从 1 到 4 的连续数字，不包含 5 ；<code>1..=5</code>，生成从 1 到 5 的连续数字，包含 5，它的用途很简单，常常用于循环中。</p><p>eg：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>..=<span class="hljs-number">5</span> &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,i);<br>&#125;<br><span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;a&#x27;</span>..=<span class="hljs-string">&#x27;z&#x27;</span> &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,i);<br>&#125;<br></code></pre></td></tr></table></figure><p>序列只允许用于<u>数字或字符类型</u>，原因是：它们可以连续，同时编译器在编译期可以检查该序列是否为空，字符和数字值是 Rust 中仅有的可以用于判断是否为空的类型。</p><p>）</p><p>（<strong>有理数和复数</strong>并未包含在标准库中，如需使用，需要引入 <code>num</code> 库：</p><p>步骤如下：</p><ol><li>创建新工程 <code>cargo new complex-num &amp;&amp; cd complex-num</code></li><li>在 <code>Cargo.toml</code> 中的 <code>[dependencies]</code> 下添加一行 <code>num = &quot;0.4.0&quot;</code></li><li>将 <code>src/main.rs</code> 文件中的 <code>main</code> 函数替换为下面的代码</li><li>运行 <code>cargo run</code></li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> num::complex::Complex;<br><br> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = Complex &#123; re: <span class="hljs-number">2.1</span>, im: -<span class="hljs-number">1.2</span> &#125;;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">b</span> = Complex::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">11.1</span>, <span class="hljs-number">22.2</span>);<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">result</span> = a + b;<br><br>   <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; + &#123;&#125;i&quot;</span>, result.re, result.im)<br> &#125;<br></code></pre></td></tr></table></figure><p>）</p><p><strong>（3）字符类型</strong></p><p>在 Rust 语言中这些都是字符，Rust 的字符不仅仅是 <code>ASCII</code>，所有的 <code>Unicode</code> 值都可以作为 Rust 字符，包括单个的中文、日文、韩文、emoji 表情符号等等，都是合法的字符类型。由于 <code>Unicode</code> 都是 4 个字节编码，因此字符类型也是占用 <u>4 个字节</u>。</p><p><strong>（4）布尔类型</strong></p><p>Rust 中的布尔类型有两个可能的值：<code>true</code> 和 <code>false</code>，布尔值占用内存的大小为 <code>1</code> 个字节。</p><p>使用布尔类型的场景主要在于流程控制，例如上述代码的中的 <code>if</code> 就是其中之一。</p><p><strong>（5）单元类型</strong></p><p>单元类型就是 <code>()</code>，唯一的值也是 <code>()</code>。</p><p>main函数就返回单元类型()，常见的 <code>println!()</code> 的返回值也是单元类型 ()。</p><p>再比如，可以用 <code>()</code> 作为 <code>map</code> 的值，表示我们不关注具体的值，只关注 <code>key</code>。 这种用法 <code>()</code>可以作为一个值用来占位，但是完全<strong>不占用</strong>任何内存。</p><h4 id="7、类型转换"><a href="#7、类型转换" class="headerlink" title="7、类型转换"></a>7、类型转换</h4><p>Rust 中可以使用 As 来完成一个类型到另一个类型的转换，其最常用于将原始类型转换为其他原始类型，但是它也可以完成诸如将指针转换为地址、地址转换为指针以及将指针转换为其他指针等功能。包括<code>AsRef</code> trait和<code>AsMut</code> trait </p><p><code>AsRef</code> trait 用于不可变引用的转换，定义如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">trait</span> <span class="hljs-title class_">AsRef</span>&lt;T&gt; <span class="hljs-keyword">where</span> T: ?<span class="hljs-built_in">Sized</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">as_ref</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;T;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>AsMut</code> trait 用于可变引用的转换，定义如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">trait</span> <span class="hljs-title class_">AsMut</span>&lt;T&gt; <span class="hljs-keyword">where</span> T: ?<span class="hljs-built_in">Sized</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">as_mut</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-keyword">mut</span> T;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是一些使用<code>AsRef</code>和<code>AsMut</code>的常见场景：</p><p>（1）String 转换为 &amp; str：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">print_str</span>(s: &amp;<span class="hljs-type">str</span>) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-title function_ invoke__">print_str</span>(s.<span class="hljs-title function_ invoke__">as_ref</span>()); <span class="hljs-comment">// 将String转换为&amp;str</span><br>    <span class="hljs-comment">// 或者直接使用deref coercion:</span><br>    <span class="hljs-title function_ invoke__">print_str</span>(&amp;s); <span class="hljs-comment">// &amp;String可以自动转换为&amp;str</span><br>&#125;<br></code></pre></td></tr></table></figure><p>（2） 使用 AsRef 处理多种类型：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">process_file</span>&lt;P: <span class="hljs-built_in">AsRef</span>&lt;std::path::Path&gt;&gt;(path: P) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">path_ref</span> = path.<span class="hljs-title function_ invoke__">as_ref</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Processing file: &#123;:?&#125;&quot;</span>, path_ref);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">use</span> std::path::PathBuf;<br>    <br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">path_str</span> = <span class="hljs-string">&quot;/tmp/foo.txt&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">path_buf</span> = PathBuf::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;/tmp/bar.txt&quot;</span>);<br>    <br>    <span class="hljs-title function_ invoke__">process_file</span>(path_str); <span class="hljs-comment">// &amp;str实现了AsRef&lt;Path&gt;</span><br>    <span class="hljs-title function_ invoke__">process_file</span>(path_buf); <span class="hljs-comment">// PathBuf实现了AsRef&lt;Path&gt;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>（3）AsMut 示例</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Buffer</span>(<span class="hljs-type">Vec</span>&lt;<span class="hljs-type">u8</span>&gt;);<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">AsMut</span>&lt;[<span class="hljs-type">u8</span>]&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">Buffer</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">as_mut</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-keyword">mut</span> [<span class="hljs-type">u8</span>] &#123;<br>        &amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>.<span class="hljs-number">0</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">buf</span> = <span class="hljs-title function_ invoke__">Buffer</span>(<span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice</span> = buf.<span class="hljs-title function_ invoke__">as_mut</span>(); <span class="hljs-comment">// 获取可变切片</span><br>    slice[<span class="hljs-number">0</span>] = <span class="hljs-number">42</span>; <span class="hljs-comment">// 修改切片内容</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, buf.<span class="hljs-number">0</span>); <span class="hljs-comment">// 输出: [42, 2, 3]</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、语句、表达式、函数"><a href="#三、语句、表达式、函数" class="headerlink" title="三、语句、表达式、函数"></a>三、语句、表达式、函数</h2><h4 id="1、语句"><a href="#1、语句" class="headerlink" title="1、语句"></a>1、语句</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = <span class="hljs-number">8</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">b</span>: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">f64</span>&gt; = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();<br><span class="hljs-keyword">let</span> (a, c) = (<span class="hljs-string">&quot;hi&quot;</span>, <span class="hljs-literal">false</span>);<br><br></code></pre></td></tr></table></figure><p>以上都是语句，它们完成了一个具体的操作，但是并没有返回值，因此是语句。</p><p>由于 <code>let</code> 是语句，因此不能将 <code>let</code> 语句赋值给其它值，如下形式是错误的：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">b</span> = (<span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = <span class="hljs-number">8</span>);<br></code></pre></td></tr></table></figure><h4 id="2、表达式"><a href="#2、表达式" class="headerlink" title="2、表达式"></a>2、表达式</h4><p>表达式会进行求值，然后返回一个值。例如 <code>5 + 6</code>，在求值后，返回值 <code>11</code>，因此它就是一条表达式。</p><p>表达式可以成为语句的一部分，例如 <code>let y = 6</code> 中，<code>6</code> 就是一个表达式，它在求值后返回一个值 <code>6</code>（有些反直觉，但是确实是表达式）。</p><p>调用一个函数是表达式，因为会返回一个值，调用宏也是表达式，用花括号包裹最终返回一个值的语句块也是表达式，总之，能返回值，它就是表达式。</p><p><u>（表达式不能包含分号！）</u></p><p>最后，表达式如果不返回任何值，会隐式地返回一个() 。</p><h4 id="3、函数"><a href="#3、函数" class="headerlink" title="3、函数"></a>3、函数</h4><p>Rust 的函数体是由一系列语句组成，最后由一个表达式来返回值，例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_with_extra</span>(x: <span class="hljs-type">i32</span>, y: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = x + <span class="hljs-number">1</span>; <span class="hljs-comment">// 语句</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = y + <span class="hljs-number">5</span>; <span class="hljs-comment">// 语句</span><br>    x + y <span class="hljs-comment">// 表达式，没有分号</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>【注意：函数的位置可以随便放，Rust 不关心我们在哪里定义了函数，只要有定义即可</p><p>每个函数参数都需要标注类型】</p><p>（发散函数：</p><p>当用 <code>!</code> 作函数返回类型的时候，表示该函数永不返回( diverging functions )，特别的，这种语法往往用做会导致程序崩溃的函数：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">dead_end</span>() <span class="hljs-punctuation">-&gt;</span> ! &#123;<br>  <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;你已经到了穷途末路，崩溃吧！&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>）</p><p>To Be Continue…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>阴间CTF-re复现</title>
    <link href="/2025/05/03/%E9%98%B4%E9%97%B4CTF-re%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/05/03/%E9%98%B4%E9%97%B4CTF-re%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>这是一道伪装成web的re题，比赛的时候作为一个re手没被web难到被逻辑分析薄纱了有点难绷（）</p><h3 id="flag1："><a href="#flag1：" class="headerlink" title="flag1："></a>flag1：</h3><p>先在索引里把反调试关掉</p><p>然后我是先找到的flag2说实话，观察flag2的所在位置，推测出flag1应该在如下的文件里面：</p><p>&#x2F;api&#x2F;get_userdata?filename&#x3D;&#x2F;etc&#x2F;flag1</p><p>然后，执行这个指令（<code>curl &quot;http://7788-7605bdb9-8e37-46d0-99ea-e4851c74c07c.challenge.ctfplus.cn/api/get_userdata?filename=/etc/flag1&quot;</code>），得到flag1：vniq15sdanub</p><h3 id="flag2："><a href="#flag2：" class="headerlink" title="flag2："></a>flag2：</h3><p>观察下面的代码，不难发现游戏逻辑：将最大步数作为分数加到总分上，如果总分超过10000，就输出flag2</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs html">async function getFlag2() &#123;<br>    try &#123;<br>        const token = await VHUIIU();<br>        const response = await fetch(&#x27;/api/get_flag2?sign=&#x27;+token.sign+&#x27;&amp;t=&#x27;+token.t);<br>        return await response.json();<br>    &#125; catch (error) &#123;<br>        console.error(&#x27;error2:&#x27;, error);<br>        return &#123; error: &#x27;error2&#x27; &#125;;<br>    &#125;<br>&#125;<br><br>async function checkScore () &#123;<br>    try &#123;<br>        const resp_json = await getFlag2();<br>        if (resp_json.status === &#x27;success&#x27;) &#123;<br>            alert(&#x27;flag2: &#x27; + resp_json.flag2);<br>            return true;<br>        &#125; else &#123;<br>            alert(resp_json.flag2);<br>            return false;<br>        &#125;<br>    &#125; catch (error) &#123;<br>        console.error(&#x27;error2:&#x27;, error);<br>    &#125;<br>&#125;<br><br>async function bindNextLevelButton() &#123;<br>    const nextLevelButton = document.getElementById(&#x27;next-level&#x27;);<br>    nextLevelButton.addEventListener(&#x27;click&#x27;, async() =&gt; &#123;<br>        const count_str = document.getElementById(&#x27;count&#x27;).innerText;<br>        const tryToBeat_str = document.getElementById(computerGuessFieldID).innerText;<br>        const check1 = parseInt(count_str, 10) &lt;= parseInt(tryToBeat_str, 10);<br>        const game = JSON.parse(getGame());<br>        const cells = game.Cells;<br>        const check2 = cells.every(row =&gt; row.every(cell =&gt; cell === cells[0][0]));<br>        const savedUserdata = await getUserdata();<br>        if (check1 &amp;&amp; check2) &#123;<br>            await saveUserdata(savedUserdata.total_score+parseInt(tryToBeat_str, 10), savedUserdata.current_level+1);         <br>            const reta = await checkScore();<br>            if (reta) &#123;<br>                alert(&#x27;Congratulations! You have passed all levels! Another challenge is about to begin...&#x27;);<br>                const flag3 = prompt(&#x27;Please input flag3:&#x27;);<br>                alert(checkFlag3(flag3));<br>            &#125;<br>        &#125;<br>        if (check2 &amp;&amp; !check1) &#123;<br>            alert(&#x27;YOU NEED TO BE LESS THAN MAX STEP TO PASS THE LEVEL&#x27;);<br>        &#125;<br>        location.reload();<br>    &#125;);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>修改判断准则的那10000失败了，改掉后每次通关时会改回去，但是修改最大步数成功了，这样玩一次游戏就可以完成，得到flag2：3a8b26aee5</p><p><del>（其实说真的，没理解为什么，但是毕竟不是web手，能得到flag就行）</del></p><h3 id="flag3："><a href="#flag3：" class="headerlink" title="flag3："></a>flag3：</h3><p>终于开始逆向部分了</p><p>分析代码容易发现关键函数checkFlag3()隐藏在game.wasm里面不能被查看，把这个文件保存下来，用工具wasm2c转为.c文件再查看</p><p>执行如下操作：<br><code>.\wasm2c.exe  &quot;D:\game.wasm&quot; -o game.c</code></p><p>得到game.js</p><p>静态分析＋前端调试找关键数据（这部分好难，）</p><p>可以最终得到算法逻辑为：先进行一个循环异或，再进行魔改TEA加密</p><p>TEA魔改点：魔改为了CBC模式, 链接起来、更改了默认的delta值、32轮中每轮: v0+&#x3D;后面多加了一个^(v1 + sum), v1+&#x3D;后面多加了一个^(v0 + sum)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// 全局变量</span><br><span class="hljs-type">uint32_t</span> data1 = <span class="hljs-number">0x5F797274</span>;<br><span class="hljs-type">uint32_t</span> data2 = <span class="hljs-number">0x64726168</span>;<br><br><span class="hljs-comment">// 将字节数组转换为 uint32 数组</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Byte2uint32</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span>* key, <span class="hljs-type">uint32_t</span>* key1, <span class="hljs-type">int</span> key_len)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; key_len; i += <span class="hljs-number">4</span>) &#123;<br>        key1[i / <span class="hljs-number">4</span>] = ((<span class="hljs-type">uint32_t</span>)key[i] &lt;&lt; <span class="hljs-number">24</span>) | ((<span class="hljs-type">uint32_t</span>)key[i + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">16</span>) | ((<span class="hljs-type">uint32_t</span>)key[i + <span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">8</span>) | (<span class="hljs-type">uint32_t</span>)key[i + <span class="hljs-number">3</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 更新 data1 和 data2</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">update_data1_data2</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> v0, <span class="hljs-type">uint32_t</span> v1, <span class="hljs-type">uint32_t</span>* key)</span> &#123;<br>    data1 ^= v0;<br>    data2 ^= v1;<br>    v0 = data1;<br>    v1 = data2;<br>    <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">0x6675636b</span>;<br>    <span class="hljs-type">uint32_t</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        sum += delta;<br>        v0 += (((v1 &lt;&lt; <span class="hljs-number">4</span>) + key[<span class="hljs-number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + key[<span class="hljs-number">1</span>]) ^ (v1 + sum));<br>        v1 += (((v0 &lt;&lt; <span class="hljs-number">4</span>) + key[<span class="hljs-number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + key[<span class="hljs-number">3</span>]) ^ (v0 + sum));<br>    &#125;<br>    data1 = v0;<br>    data2 = v1;<br>&#125;<br><br><span class="hljs-comment">// CBC TEA 解密</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">cbc_tea_decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v0, <span class="hljs-type">uint32_t</span>* v1, <span class="hljs-type">uint32_t</span>* key)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">0x6675636b</span>;<br>    <span class="hljs-type">uint32_t</span> sum = (delta * <span class="hljs-number">32</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        *v1 -= (((*v0 &lt;&lt; <span class="hljs-number">4</span>) + key[<span class="hljs-number">2</span>]) ^ (*v0 + sum) ^ ((*v0 &gt;&gt; <span class="hljs-number">5</span>) + key[<span class="hljs-number">3</span>]) ^ (*v0 + sum));<br>        *v0 -= (((*v1 &lt;&lt; <span class="hljs-number">4</span>) + key[<span class="hljs-number">0</span>]) ^ (*v1 + sum) ^ ((*v1 &gt;&gt; <span class="hljs-number">5</span>) + key[<span class="hljs-number">1</span>]) ^ (*v1 + sum));<br>        sum -= delta;<br>    &#125;<br>    *v0 = data1 ^ *v0;<br>    *v1 = data2 ^ *v1;<br>&#125;<br><br><span class="hljs-comment">// TEA 解密</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Tea_decrypto</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span>* data, <span class="hljs-type">uint8_t</span>* key, <span class="hljs-type">uint8_t</span>* dec_data, <span class="hljs-type">int</span> data_len, <span class="hljs-type">int</span> key_len)</span> &#123;<br>    data1 = <span class="hljs-number">0x5F797274</span>;<br>    data2 = <span class="hljs-number">0x64726168</span>;<br>    <span class="hljs-comment">// 使用动态内存分配</span><br>    <span class="hljs-type">uint32_t</span>* data_uint32 = (<span class="hljs-type">uint32_t</span>*)<span class="hljs-built_in">malloc</span>((data_len / <span class="hljs-number">4</span>) * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint32_t</span>));<br>    <span class="hljs-type">uint32_t</span>* key_uint32 = (<span class="hljs-type">uint32_t</span>*)<span class="hljs-built_in">malloc</span>((key_len / <span class="hljs-number">4</span>) * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint32_t</span>));<br><br>    <span class="hljs-keyword">if</span> (data_uint32 == <span class="hljs-literal">NULL</span> || key_uint32 == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    Byte2uint32(data, data_uint32, data_len);<br>    Byte2uint32(key, key_uint32, key_len);<br><br>    <span class="hljs-type">int</span> dec_data_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; data_len / <span class="hljs-number">4</span>; i += <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-type">uint32_t</span> temp0 = data_uint32[i];<br>        <span class="hljs-type">uint32_t</span> temp1 = data_uint32[i + <span class="hljs-number">1</span>];<br>        cbc_tea_decrypt(&amp;temp0, &amp;temp1, key_uint32);<br>        dec_data[dec_data_len++] = (<span class="hljs-type">uint8_t</span>)(temp0 &gt;&gt; <span class="hljs-number">24</span>);<br>        dec_data[dec_data_len++] = (<span class="hljs-type">uint8_t</span>)(temp0 &gt;&gt; <span class="hljs-number">16</span>);<br>        dec_data[dec_data_len++] = (<span class="hljs-type">uint8_t</span>)(temp0 &gt;&gt; <span class="hljs-number">8</span>);<br>        dec_data[dec_data_len++] = (<span class="hljs-type">uint8_t</span>)temp0;<br>        dec_data[dec_data_len++] = (<span class="hljs-type">uint8_t</span>)(temp1 &gt;&gt; <span class="hljs-number">24</span>);<br>        dec_data[dec_data_len++] = (<span class="hljs-type">uint8_t</span>)(temp1 &gt;&gt; <span class="hljs-number">16</span>);<br>        dec_data[dec_data_len++] = (<span class="hljs-type">uint8_t</span>)(temp1 &gt;&gt; <span class="hljs-number">8</span>);<br>        dec_data[dec_data_len++] = (<span class="hljs-type">uint8_t</span>)temp1;<br>        update_data1_data2(temp0, temp1, key_uint32);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (dec_data_len &gt; <span class="hljs-number">0</span> &amp;&amp; dec_data[dec_data_len - <span class="hljs-number">1</span>] == <span class="hljs-number">0x00</span>) &#123;<br>        dec_data_len--;<br>    &#125;<br>    dec_data[dec_data_len] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>    <span class="hljs-comment">// 释放动态分配的内存</span><br>    <span class="hljs-built_in">free</span>(data_uint32);<br>    <span class="hljs-built_in">free</span>(key_uint32);<br>&#125;<br><br><span class="hljs-comment">// 反转数组并异或</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ReverseArraySelfXor0</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span>* arr, <span class="hljs-type">int</span> arr_len)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = arr_len - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        arr[i] ^= arr[(i + <span class="hljs-number">1</span>) % arr_len];<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CMP_SIZE 16</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">uint8_t</span> cmp[CMP_SIZE] = &#123; <span class="hljs-number">0x04</span>, <span class="hljs-number">0x0a</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0xbd</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x8c</span>, <span class="hljs-number">0xb7</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0xca</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x41</span> &#125;;<br>    <span class="hljs-type">uint8_t</span> key_[] = &#123; <span class="hljs-number">113</span>, <span class="hljs-number">49</span>, <span class="hljs-number">119</span>, <span class="hljs-number">100</span>, <span class="hljs-number">53</span>, <span class="hljs-number">53</span>, <span class="hljs-number">54</span>, <span class="hljs-number">113</span>, <span class="hljs-number">119</span>, <span class="hljs-number">49</span>, <span class="hljs-number">53</span>, <span class="hljs-number">54</span>, <span class="hljs-number">54</span>, <span class="hljs-number">51</span>, <span class="hljs-number">53</span>, <span class="hljs-number">49</span> &#125;;<br>    <span class="hljs-type">uint8_t</span> dec_data[CMP_SIZE];<br>    Tea_decrypto(cmp, key_, dec_data, <span class="hljs-keyword">sizeof</span>(cmp), <span class="hljs-keyword">sizeof</span>(key_));<br>    ReverseArraySelfXor0(dec_data, <span class="hljs-built_in">strlen</span>((<span class="hljs-type">char</span>*)dec_data));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, dec_data);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行得到flag3：oJQjpShVldkteWGV</p><p>（哈哈，这是第一篇re博客，五一假期在宾馆居然能来复现，我真是太佩服自己了，<del>虽然不知道拖了多久了</del>）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2025HuazhongCup-c</title>
    <link href="/2025/04/22/2025HuazhongCup-c-1/"/>
    <url>/2025/04/22/2025HuazhongCup-c-1/</url>
    
    <content type="html"><![CDATA[<p>话说一个ctf萌新的第一篇博客为什么是数模（）</p><p><del>咳，如果你是新手想学这道题，建议出门去找大佬们的论文，这个就是一个新手写给自己的记录</del></p><h2 id="问题一：数据提取与分析"><a href="#问题一：数据提取与分析" class="headerlink" title="问题一：数据提取与分析"></a>问题一：数据提取与分析</h2><p>处理53个变量以识别对就业状态影响显著的特征是一个复杂的过程。我们计划使用方差膨胀因子（VIF）进行多重共线性诊断，以评估变量之间的相关性并避免共线性问题。通过这种方法，我们可以筛选出对就业状态有显著影响的关键特征，从而提高模型的解释力和预测准确性。</p><p><em>方法论：VIF多重共线性诊断</em></p><p><em>在多变量统计分析中，多重共线性是一个常见的问题，它可能导致模型估计的不稳定性。为了解决这一问题，我们将采用VIF方法来诊断和处理多重共线性。VIF值可以帮助我们识别那些与其他变量高度相关的特征，从而在模型构建中做出适当的调整。通过这种方法，我们可以确保模型的稳健性，提高分析结果的可靠性。</em></p><h3 id="人数统计"><a href="#人数统计" class="headerlink" title="人数统计"></a>人数统计</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> LabelEncoder, StandardScaler<br><br><span class="hljs-comment"># 设置选项以采用未来行为</span><br>pd.set_option(<span class="hljs-string">&#x27;future.no_silent_downcasting&#x27;</span>, <span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 获取当前日期</span><br>today = pd.to_datetime(datetime.today().date())<br><br><span class="hljs-comment"># 读取原始数据（这里假设已经安装了xlrd库用于读取xls格式）</span><br>df_raw = pd.read_excel(<span class="hljs-string">r&quot;C:\\Users\\Desktop\\C.xls&quot;</span>)<br><br><span class="hljs-comment"># 合并前两行作为真正的表头（index=0是拼音，1是中文）</span><br>new_columns = df_raw.iloc[<span class="hljs-number">0</span>].fillna(<span class="hljs-string">&#x27;&#x27;</span>) + <span class="hljs-string">&quot;_&quot;</span> + df_raw.iloc[<span class="hljs-number">1</span>].fillna(<span class="hljs-string">&#x27;&#x27;</span>)<br>df_raw.columns = new_columns<br><br><span class="hljs-comment"># 去掉前两行，只保留实际数据</span><br>df = df_raw.iloc[<span class="hljs-number">2</span>:].reset_index(drop=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 将缺失值 \n 替换为 NaN</span><br>df.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, pd.NA, inplace=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 转换相关日期字段为datetime格式</span><br>date_cols = [<br>    <span class="hljs-string">&#x27;c_ajc090_失业时间&#x27;</span>,<br>    <span class="hljs-string">&#x27;b_acc031_就业时间&#x27;</span>,<br>]<br><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> date_cols:<br>    <span class="hljs-keyword">if</span> col <span class="hljs-keyword">in</span> df.columns:<br>        <span class="hljs-keyword">try</span>:<br>            df[col] = pd.to_datetime(df[col], errors=<span class="hljs-string">&#x27;coerce&#x27;</span>)<br>            <span class="hljs-keyword">if</span> df[col].isna().<span class="hljs-built_in">sum</span>() &gt; <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;在转换 <span class="hljs-subst">&#123;col&#125;</span> 时，有 <span class="hljs-subst">&#123;df[col].isna().<span class="hljs-built_in">sum</span>()&#125;</span> 个值无法解析为日期。&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;转换 <span class="hljs-subst">&#123;col&#125;</span> 时出现错误: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 初始化标签，默认认为是“失业”状态</span><br>df[<span class="hljs-string">&#x27;label&#x27;</span>] = <span class="hljs-number">0</span><br><br><span class="hljs-comment"># 如果列就业时间对应的时间晚于列失业时间对应的时间，label为1</span><br>df[<span class="hljs-string">&#x27;label&#x27;</span>] = np.where(pd.to_datetime(df[<span class="hljs-string">&#x27;b_acc031_就业时间&#x27;</span>]) &gt; pd.to_datetime(df[<span class="hljs-string">&#x27;c_ajc090_失业时间&#x27;</span>]), <span class="hljs-number">1</span>, df[<span class="hljs-string">&#x27;label&#x27;</span>])<br><br><span class="hljs-comment"># 统计并打印1和0的个数</span><br>count_result = df[<span class="hljs-string">&#x27;label&#x27;</span>].value_counts()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0的个数:&quot;</span>, count_result.get(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1的个数:&quot;</span>, count_result.get(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>))<br><br><span class="hljs-comment"># 设置保留字段</span><br>columns_to_keep = [<br>    <span class="hljs-string">&#x27;people_id_人员编11号&#x27;</span>, <span class="hljs-string">&#x27;name_姓名&#x27;</span>,<span class="hljs-string">&#x27;sex_性别&#x27;</span>, <span class="hljs-string">&#x27;birthday_生日&#x27;</span>, <span class="hljs-string">&#x27;age_年龄&#x27;</span>,<br>    <span class="hljs-string">&#x27;nation_民族&#x27;</span>,<span class="hljs-string">&#x27;marriage_婚姻状态&#x27;</span>, <span class="hljs-string">&#x27;edu_level_教育程度&#x27;</span>, <span class="hljs-string">&#x27;politic_政治面貌&#x27;</span>,<br>   <span class="hljs-string">&#x27;reg_address_户籍地址&#x27;</span>, <span class="hljs-string">&#x27;profession_专业&#x27;</span>,<span class="hljs-string">&#x27;religion_宗教信仰&#x27;</span>, <span class="hljs-string">&#x27;c_aac009_户口性质&#x27;</span>,<br>    <span class="hljs-string">&#x27;c_aab299_户口所在地区（代码）&#x27;</span>, <span class="hljs-string">&#x27;c_aac010_户口所在地区（名称）&#x27;</span>, <span class="hljs-string">&#x27;c_aac011_文化程度&#x27;</span>,<br>    <span class="hljs-string">&#x27;c_aac180_毕业学校&#x27;</span>, <span class="hljs-string">&#x27;c_aac181_毕业日期&#x27;</span>, <span class="hljs-string">&#x27;c_aac182_所学专业代码&#x27;</span>, <span class="hljs-string">&#x27;c_aac183_所学专业名称&#x27;</span>,<br>    <span class="hljs-string">&#x27;type_人口类型&#x27;</span>,<span class="hljs-string">&#x27;military_status_兵役状态&#x27;</span>, <span class="hljs-string">&#x27;is_disability_是否残疾人&#x27;</span>,<br>    <span class="hljs-string">&#x27;is_teen_是否青少年&#x27;</span>, <span class="hljs-string">&#x27;is_elder_是否老年人&#x27;</span>, <span class="hljs-string">&#x27;change_type_变动类型&#x27;</span>,<br>    <span class="hljs-string">&#x27;is_living_alone_是否独居&#x27;</span>, <span class="hljs-string">&#x27;live_status_居住状态&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span><br>]<br><br><span class="hljs-comment"># 剔除无关变量</span><br>valid_columns = [col <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> columns_to_keep <span class="hljs-keyword">if</span> col <span class="hljs-keyword">in</span> df.columns]<br>df = df[valid_columns]<br><br><span class="hljs-comment"># 筛选字段副本</span><br>df_result = df[columns_to_keep].copy()<br><br><span class="hljs-comment"># 居住状态这一列删除</span><br>df_result = df_result.drop(columns=[<span class="hljs-string">&#x27;live_status_居住状态&#x27;</span>])<br><br><span class="hljs-comment"># 找出所有类别型列（object 类型的列）</span><br>categorical_columns = df_result.select_dtypes(include=[<span class="hljs-string">&#x27;object&#x27;</span>]).columns<br><span class="hljs-comment"># 对每一列使用众数填充缺失值</span><br>df_result[categorical_columns] = df_result[categorical_columns].apply(<span class="hljs-keyword">lambda</span> x: x.fillna(x.mode()[<span class="hljs-number">0</span>] <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> x.mode().empty <span class="hljs-keyword">else</span> np.nan))<br><br><span class="hljs-comment"># 找出所有非类别型列</span><br>non_categorical_columns = df_result.select_dtypes(exclude=[<span class="hljs-string">&#x27;object&#x27;</span>]).columns<br><span class="hljs-comment"># 对每一列使用中位数填充缺失值</span><br>df_result[non_categorical_columns] = df_result[non_categorical_columns].apply(<span class="hljs-keyword">lambda</span> x: x.fillna(x.median()))<br><br><span class="hljs-comment"># 生日</span><br><span class="hljs-comment"># 将生日列转换为 datetime 类型</span><br>df_result[<span class="hljs-string">&#x27;birthday_生日&#x27;</span>] = pd.to_datetime(df_result[<span class="hljs-string">&#x27;birthday_生日&#x27;</span>], errors=<span class="hljs-string">&#x27;coerce&#x27;</span>)<br><span class="hljs-comment"># 新增出生年份、月份特征</span><br>df_result[<span class="hljs-string">&#x27;birth_year&#x27;</span>] = df_result[<span class="hljs-string">&#x27;birthday_生日&#x27;</span>].dt.year<br>df_result[<span class="hljs-string">&#x27;birth_month&#x27;</span>] = df_result[<span class="hljs-string">&#x27;birthday_生日&#x27;</span>].dt.month<br><br><span class="hljs-comment"># 户籍地址</span><br>df_result[<span class="hljs-string">&#x27;province&#x27;</span>] = df_result[<span class="hljs-string">&#x27;reg_address_户籍地址&#x27;</span>].<span class="hljs-built_in">str</span>.extract(<span class="hljs-string">r&#x27;^(.+?)省&#x27;</span>, expand=<span class="hljs-literal">False</span>)<br>le = LabelEncoder()<br>df_result[<span class="hljs-string">&#x27;reg_address_encoded&#x27;</span>] = le.fit_transform(df_result[<span class="hljs-string">&#x27;reg_address_户籍地址&#x27;</span>])<br><br><span class="hljs-comment"># 提取主专业代码</span><br>df_result[<span class="hljs-string">&#x27;main_profession&#x27;</span>] = df_result[<span class="hljs-string">&#x27;profession_专业&#x27;</span>].astype(<span class="hljs-built_in">str</span>).<span class="hljs-built_in">str</span>.split().<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># 编码为数字标签</span><br>df_result[<span class="hljs-string">&#x27;main_profession_encoded&#x27;</span>] = le.fit_transform(df_result[<span class="hljs-string">&#x27;main_profession&#x27;</span>])<br><br><span class="hljs-comment"># 户口所在地</span><br>df_result[<span class="hljs-string">&#x27;c_aab299_户口所在地区（代码）&#x27;</span>] = df_result[<span class="hljs-string">&#x27;c_aab299_户口所在地区（代码）&#x27;</span>].astype(<span class="hljs-built_in">str</span>)<br><span class="hljs-comment"># 提取省、市、县代码</span><br>df_result[<span class="hljs-string">&#x27;hukou_province_code&#x27;</span>] = df_result[<span class="hljs-string">&#x27;c_aab299_户口所在地区（代码）&#x27;</span>].<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]<br>df_result[<span class="hljs-string">&#x27;hukou_city_code&#x27;</span>] = df_result[<span class="hljs-string">&#x27;c_aab299_户口所在地区（代码）&#x27;</span>].<span class="hljs-built_in">str</span>[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>]<br>df_result[<span class="hljs-string">&#x27;hukou_county_code&#x27;</span>] = df_result[<span class="hljs-string">&#x27;c_aab299_户口所在地区（代码）&#x27;</span>].<span class="hljs-built_in">str</span>[<span class="hljs-number">4</span>:<span class="hljs-number">6</span>]<br><br><span class="hljs-comment"># 毕业学校</span><br>df_result[<span class="hljs-string">&#x27;school_encoded&#x27;</span>] = le.fit_transform(df_result[<span class="hljs-string">&#x27;c_aac180_毕业学校&#x27;</span>])<br><br><span class="hljs-comment"># 毕业日期</span><br><span class="hljs-comment"># 转换为 datetime 类型</span><br>df_result[<span class="hljs-string">&#x27;c_aac181_毕业日期&#x27;</span>] = pd.to_datetime(df_result[<span class="hljs-string">&#x27;c_aac181_毕业日期&#x27;</span>], errors=<span class="hljs-string">&#x27;coerce&#x27;</span>)<br><span class="hljs-comment"># 提取毕业年份</span><br>df_result[<span class="hljs-string">&#x27;graduate_year&#x27;</span>] = df_result[<span class="hljs-string">&#x27;c_aac181_毕业日期&#x27;</span>].dt.year<br><span class="hljs-comment"># 计算距今年数（以 2025 年为基准）</span><br>df_result[<span class="hljs-string">&#x27;years_since_grad&#x27;</span>] = <span class="hljs-number">2025</span> - df_result[<span class="hljs-string">&#x27;graduate_year&#x27;</span>]<br><br><span class="hljs-comment"># 专业代码</span><br>le_major_code = LabelEncoder()<br>df_result[<span class="hljs-string">&#x27;major_code_encoded&#x27;</span>] = le_major_code.fit_transform(df_result[<span class="hljs-string">&#x27;c_aac182_所学专业代码&#x27;</span>])<br><br><span class="hljs-comment"># 专业名称</span><br>le_major_name = LabelEncoder()<br>df_result[<span class="hljs-string">&#x27;major_name_encoded&#x27;</span>] = le_major_name.fit_transform(df_result[<span class="hljs-string">&#x27;c_aac183_所学专业名称&#x27;</span>])<br><br><span class="hljs-comment"># 需要编码的类别型字段</span><br>cat_cols = [<br>   <span class="hljs-string">&#x27;sex_性别&#x27;</span>, <span class="hljs-string">&#x27;nation_民族&#x27;</span>,<span class="hljs-string">&#x27;marriage_婚姻状态&#x27;</span>, <span class="hljs-string">&#x27;edu_level_教育程度&#x27;</span>,<br>    <span class="hljs-string">&#x27;politic_政治面貌&#x27;</span>,<span class="hljs-string">&#x27;religion_宗教信仰&#x27;</span>, <span class="hljs-string">&#x27;type_人口类型&#x27;</span>,<span class="hljs-string">&#x27;military_status_兵役状态&#x27;</span>,<br>    <span class="hljs-string">&#x27;is_disability_是否残疾人&#x27;</span>, <span class="hljs-string">&#x27;is_teen_是否青少年&#x27;</span>, <span class="hljs-string">&#x27;is_elder_是否老年人&#x27;</span>,<br>    <span class="hljs-string">&#x27;is_living_alone_是否独居&#x27;</span>, <span class="hljs-string">&#x27;change_type_变动类型&#x27;</span><br>]<br><br><span class="hljs-comment"># 对所有类别型列进行 LabelEncoding</span><br><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> cat_cols:<br>    le = LabelEncoder()<br>    df_result[col + <span class="hljs-string">&#x27;_enc&#x27;</span>] = le.fit_transform(df_result[col].astype(<span class="hljs-built_in">str</span>))<br><br><span class="hljs-comment"># 选取最终用于建模的字段</span><br>final_features = [<br>    <span class="hljs-comment"># 数值型与衍生信息</span><br>    <span class="hljs-string">&#x27;age_年龄&#x27;</span>, <span class="hljs-string">&#x27;birth_year&#x27;</span>, <span class="hljs-string">&#x27;birth_month&#x27;</span>, <span class="hljs-string">&#x27;graduate_year&#x27;</span>, <span class="hljs-string">&#x27;years_since_grad&#x27;</span>,<br>    <span class="hljs-comment"># 已编码的字段</span><br>   <span class="hljs-string">&#x27;reg_address_encoded&#x27;</span>,<span class="hljs-string">&#x27;main_profession_encoded&#x27;</span>,<span class="hljs-string">&#x27;school_encoded&#x27;</span>,<br>   <span class="hljs-string">&#x27;major_code_encoded&#x27;</span>,<span class="hljs-string">&#x27;major_name_encoded&#x27;</span>,<br>    <span class="hljs-comment"># 刚刚LabelEncode的类别变量</span><br>] + [col + <span class="hljs-string">&#x27;_enc&#x27;</span> <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> cat_cols]<br><br><span class="hljs-comment"># 将年龄转为数值型（int）</span><br>df_result[<span class="hljs-string">&#x27;age_年龄&#x27;</span>] = pd.to_numeric(df_result[<span class="hljs-string">&#x27;age_年龄&#x27;</span>], errors=<span class="hljs-string">&#x27;coerce&#x27;</span>)<br><br><span class="hljs-comment"># 取建模用数据子集</span><br>df_model = df_result[final_features + [<span class="hljs-string">&#x27;label&#x27;</span>]].copy()<br><br><span class="hljs-comment"># 最终建模用的特征</span><br>X = df_model[final_features]<br><br><span class="hljs-comment"># 初始化标准化器</span><br>scaler = StandardScaler()<br><br><span class="hljs-comment"># 拟合并变换</span><br>X_scaled = scaler.fit_transform(X)<br><br><span class="hljs-comment"># 转换为DataFrame并保留列名</span><br>X_scaled_df = pd.DataFrame(X_scaled, columns=final_features)<br><br><span class="hljs-comment"># 添加标签（label）列</span><br>X_scaled_df[<span class="hljs-string">&#x27;label&#x27;</span>] = df_model[<span class="hljs-string">&#x27;label&#x27;</span>].values<br><br><span class="hljs-comment"># 查看标准化后的结果</span><br><span class="hljs-built_in">print</span>(X_scaled_df.head())<br><br><span class="hljs-comment"># 保存为 CSV 文件</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;.\\processed_data&#x27;</span>):<br>    os.makedirs(<span class="hljs-string">&#x27;.\\processed_data&#x27;</span>)<br>X_scaled_df.to_csv(<span class="hljs-string">&#x27;.\\processed_data\\standardized_data.csv&#x27;</span>, index=<span class="hljs-literal">False</span>, encoding=<span class="hljs-string">&#x27;utf - 8&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> statsmodels.stats.outliers_influence <span class="hljs-keyword">import</span> variance_inflation_factor<br><span class="hljs-keyword">from</span> statsmodels.tools.tools <span class="hljs-keyword">import</span> add_constant<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 读取标准化后的数据</span><br>df = pd.read_csv(<span class="hljs-string">&#x27;.\\processed_data\\standardized_data.csv&#x27;</span>)<br><br><span class="hljs-comment"># 统计就业状态：0为失业，1为就业</span><br>label_counts = df[<span class="hljs-string">&#x27;label&#x27;</span>].value_counts()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;就业状态分布：\n&quot;</span>, label_counts)<br><br><span class="hljs-comment"># 设置字体支持中文`</span><br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>]<br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 创建保存图片的目录（如果不存在）</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;.\\figure&#x27;</span>):<br>    os.makedirs(<span class="hljs-string">&#x27;.\\figure&#x27;</span>)<br><br><span class="hljs-comment"># 绘制就业状态的饼图并保存`</span><br>plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">8</span>))`<br>labels = [<span class="hljs-string">&#x27;就业&#x27;</span>, <span class="hljs-string">&#x27;失业&#x27;</span>]`<br>plt.pie(label_counts, labels=labels, autopct=<span class="hljs-string">&#x27;%1.1f%%&#x27;</span>, startangle=<span class="hljs-number">140</span>)`<br>plt.title(<span class="hljs-string">&#x27;就业状态分布饼图&#x27;</span>)`<br>plt.savefig(<span class="hljs-string">&#x27;.\\figure\\employment_status_pie.jpg&#x27;</span>, dpi=<span class="hljs-number">500</span>)`<br>plt.close()`<br><br><span class="hljs-comment"># 绘制各特征与就业状态的箱线图并保存`</span><br>features = df.columns[:-<span class="hljs-number">1</span>]  <span class="hljs-comment"># 除了label列的所有特征`</span><br>num_cols = <span class="hljs-number">4</span><br>num_rows = (<span class="hljs-built_in">len</span>(features) + num_cols - <span class="hljs-number">1</span>) / num_cols<br>plt.figure(figsize=(<span class="hljs-number">15</span>, <span class="hljs-number">3</span> * num_rows))<br><span class="hljs-keyword">for</span> i, feature <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(features):<br>    plt.subplot(num_rows, num_cols, i + <span class="hljs-number">1</span>)<br>    sns.boxplot(x=<span class="hljs-string">&#x27;label&#x27;</span>, y=feature, data=df)<br>    plt.title(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;feature&#125;</span> 与就业状态的关系&#x27;</span>)<br>plt.tight_layout()<br>plt.savefig(<span class="hljs-string">&#x27;.\\figure\\boxplot_feature_employment.jpg&#x27;</span>, dpi=<span class="hljs-number">500</span>)<br>plt.close()<br><br><span class="hljs-comment"># 计算各特征与就业状态的相关性并排序</span><br>corr_with_label = df.corr()[<span class="hljs-string">&#x27;label&#x27;</span>].drop(<span class="hljs-string">&#x27;label&#x27;</span>).sort_values(ascending=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n各特征与就业状态的相关性：\n&quot;</span>, corr_with_label)<br><br><span class="hljs-comment"># 相关系数矩阵</span><br>corr_matrix = df.corr(numeric_only=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 绘制热力图并保存</span><br>plt.figure(figsize=(<span class="hljs-number">14</span>, <span class="hljs-number">12</span>))<br>sns.heatmap(corr_matrix, annot=<span class="hljs-literal">True</span>, fmt=<span class="hljs-string">&#x27;.2f&#x27;</span>, cmap=<span class="hljs-string">&#x27;coolwarm&#x27;</span>, square=<span class="hljs-literal">True</span>)<br>plt.title(<span class="hljs-string">&quot;Feature Correlation Heatmap&quot;</span>)<br>plt.tight_layout()<br>plt.savefig(<span class="hljs-string">&#x27;.\\figure\\heatmap.jpg&#x27;</span>, dpi=<span class="hljs-number">500</span>)<br>plt.close()<br><br><span class="hljs-comment"># 计算VIF</span><br>X_features = df.drop(columns=[<span class="hljs-string">&#x27;label&#x27;</span>])<br>X_const = add_constant(X_features)<br>vif = pd.DataFrame()<br>vif[<span class="hljs-string">&quot;Variable&quot;</span>] = X_const.columns<br>vif[<span class="hljs-string">&quot;VIF&quot;</span>] = [variance_inflation_factor(X_const.values, i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(X_const.shape[<span class="hljs-number">1</span>])]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n特征的方差膨胀因子（VIF）：&quot;</span>)<br><span class="hljs-built_in">print</span>(vif)<br><br><span class="hljs-comment"># 保留的特征（排除多重共线性高的）</span><br>selected_columns = [<br>   <span class="hljs-string">&#x27;birth_month&#x27;</span>,<br>   <span class="hljs-string">&#x27;reg_address_encoded&#x27;</span>,<br>   <span class="hljs-string">&#x27;main_profession_encoded&#x27;</span>,<br>   <span class="hljs-string">&#x27;school_encoded&#x27;</span>,<br>   <span class="hljs-string">&#x27;major_code_encoded&#x27;</span>,<br>   <span class="hljs-string">&#x27;major_name_encoded&#x27;</span>,<br>   <span class="hljs-string">&#x27;sex_性别_enc&#x27;</span>,<br>    <span class="hljs-string">&#x27;nation_民族_enc&#x27;</span>,<br>   <span class="hljs-string">&#x27;marriage_婚姻状态_enc&#x27;</span>,<br>    <span class="hljs-string">&#x27;edu_level_教育程度_enc&#x27;</span>,<br>    <span class="hljs-string">&#x27;politic_政治面貌_enc&#x27;</span>,<br>   <span class="hljs-string">&#x27;religion_宗教信仰_enc&#x27;</span>,<br>    <span class="hljs-string">&#x27;type_人口类型_enc&#x27;</span>,<br>   <span class="hljs-string">&#x27;military_status_兵役状态_enc&#x27;</span>,<br>    <span class="hljs-string">&#x27;is_disability_是否残疾人_enc&#x27;</span>,<br>    <span class="hljs-string">&#x27;is_elder_是否老年人_enc&#x27;</span>,<br>    <span class="hljs-string">&#x27;is_living_alone_是否独居_enc&#x27;</span>,<br>    <span class="hljs-string">&#x27;label&#x27;</span><br>]<br><br><span class="hljs-comment"># 正确使用 df 而非未定义的 df_filtered`</span><br>df_final = df[selected_columns]<br><br><span class="hljs-comment"># 保存为 CSV`</span><br>df_final.to_csv(<span class="hljs-string">&quot;.\\processed_data\\final_processed_data.csv&quot;</span>, index=<span class="hljs-literal">False</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数据已保存为 final_processed_data.csv&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="E:\blog\jpg\图片1.jpg" alt="图片1"></p><h2 id="问题二：预测结果"><a href="#问题二：预测结果" class="headerlink" title="问题二：预测结果"></a>问题二：预测结果</h2><p>随机森林模型</p><p>对于类别型特征，使用众数填补</p><p> 特征编码：对类别型特征进行独热编码，生成二元向量</p><p>特征标准化：对数值型特征进行标准化，以消除量纲影响</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> LabelEncoder, StandardScaler<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> joblib <span class="hljs-keyword">import</span> load<br><br><span class="hljs-comment"># 设置选项以采用未来行为</span><br>pd.set_option(<span class="hljs-string">&#x27;future.no_silent_downcasting&#x27;</span>, <span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 读取 Excel 文件</span><br>file_path = <span class="hljs-string">r&#x27;C:\\Users\\Desktop\\C.xls&#x27;</span><br>excel_file = pd.ExcelFile(file_path)<br><br><span class="hljs-comment"># 获取 sheet2 数据，这里假设 sheet2 的表名为 &#x27;预测集&#x27;，你可按需修改</span><br>df = excel_file.parse(<span class="hljs-string">&#x27;预测集&#x27;</span>)<br><br><span class="hljs-comment"># 将原始表头和第一行数据合并</span><br>new_headers = [<span class="hljs-built_in">str</span>(col) + <span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-built_in">str</span>(val) <span class="hljs-keyword">for</span> col, val <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(df.columns, df.iloc[<span class="hljs-number">0</span>])]<br><br><span class="hljs-comment"># 设置新的表头</span><br>df.columns = new_headers<br><br><span class="hljs-comment"># 去掉第一行数据（因为已经合并到表头中）</span><br>df = df.iloc[<span class="hljs-number">1</span>:]<br><br><span class="hljs-comment"># 重置索引</span><br>df = df.reset_index(drop=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 设置保留字段</span><br>columns_to_keep = [<br>    <span class="hljs-string">&#x27;name_姓名&#x27;</span>,<span class="hljs-string">&#x27;sex_性别&#x27;</span>, <span class="hljs-string">&#x27;birthday_生日&#x27;</span>, <span class="hljs-string">&#x27;age_年龄&#x27;</span>,<br>    <span class="hljs-string">&#x27;nation_民族&#x27;</span>,<span class="hljs-string">&#x27;marriage_婚姻状态&#x27;</span>, <span class="hljs-string">&#x27;edu_level_教育程度&#x27;</span>, <span class="hljs-string">&#x27;politic_政治面貌&#x27;</span>,<br>   <span class="hljs-string">&#x27;reg_address_户籍地址&#x27;</span>, <span class="hljs-string">&#x27;profession_专业&#x27;</span>,<span class="hljs-string">&#x27;religion_宗教信仰&#x27;</span>, <span class="hljs-string">&#x27;c_aac009_户口性质&#x27;</span>,<br>    <span class="hljs-string">&#x27;c_aab299_户口所在地区（代码）&#x27;</span>, <span class="hljs-string">&#x27;c_aac010_户口所在地区（名称）&#x27;</span>, <span class="hljs-string">&#x27;c_aac011_文化程度&#x27;</span>,<br>    <span class="hljs-string">&#x27;c_aac180_毕业学校&#x27;</span>, <span class="hljs-string">&#x27;c_aac181_毕业日期&#x27;</span>, <span class="hljs-string">&#x27;c_aac182_所学专业代码&#x27;</span>, <span class="hljs-string">&#x27;c_aac183_所学专业名称&#x27;</span>,<br>    <span class="hljs-string">&#x27;type_人口类型&#x27;</span>,<span class="hljs-string">&#x27;military_status_兵役状态&#x27;</span>, <span class="hljs-string">&#x27;is_disability_是否残疾人&#x27;</span>,<br>    <span class="hljs-string">&#x27;is_teen_是否青少年&#x27;</span>, <span class="hljs-string">&#x27;is_elder_是否老年人&#x27;</span>, <span class="hljs-string">&#x27;change_type_变动类型&#x27;</span>,<br>    <span class="hljs-string">&#x27;is_living_alone_是否独居&#x27;</span>, <span class="hljs-string">&#x27;live_status_居住状态&#x27;</span><br>]<br><br><span class="hljs-comment"># 筛选出保留字段对应的列</span><br>valid_columns = [col <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> columns_to_keep <span class="hljs-keyword">if</span> col <span class="hljs-keyword">in</span> df.columns]<br>df = df[valid_columns]<br><br><span class="hljs-comment"># 筛选字段副本</span><br>df_result = df[valid_columns].copy()<br><br><span class="hljs-comment"># 居住状态这一列删除</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;live_status_居住状态&#x27;</span> <span class="hljs-keyword">in</span> df_result.columns:<br>    df_result = df_result.drop(columns=[<span class="hljs-string">&#x27;live_status_居住状态&#x27;</span>])<br><br><span class="hljs-comment"># 找出所有类别型列（object 类型的列）</span><br>categorical_columns = df_result.select_dtypes(include=[<span class="hljs-string">&#x27;object&#x27;</span>]).columns<br><span class="hljs-comment"># 对每一列使用众数填充缺失值</span><br>df_result[categorical_columns] = df_result[categorical_columns].apply(<span class="hljs-keyword">lambda</span> x: x.fillna(x.mode()[<span class="hljs-number">0</span>] <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> x.mode().empty <span class="hljs-keyword">else</span> np.nan))<br><span class="hljs-comment"># 处理警告</span><br>df_result = df_result.infer_objects(copy=<span class="hljs-literal">False</span>)<br><br><span class="hljs-comment"># 找出所有非类别型列</span><br>non_categorical_columns = df_result.select_dtypes(exclude=[<span class="hljs-string">&#x27;object&#x27;</span>]).columns<br><span class="hljs-comment"># 对每一列使用中位数填充缺失值</span><br>df_result[non_categorical_columns] = df_result[non_categorical_columns].apply(<span class="hljs-keyword">lambda</span> x: x.fillna(x.median()))<br><br><span class="hljs-comment"># 生日</span><br><span class="hljs-comment"># 将生日列转换为 datetime 类型</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;birthday_生日&#x27;</span> <span class="hljs-keyword">in</span> df_result.columns:<br>    df_result[<span class="hljs-string">&#x27;birthday_生日&#x27;</span>] = pd.to_datetime(df_result[<span class="hljs-string">&#x27;birthday_生日&#x27;</span>], errors=<span class="hljs-string">&#x27;coerce&#x27;</span>)<br>    <span class="hljs-comment"># 新增出生年份、月份特征</span><br>    df_result[<span class="hljs-string">&#x27;birth_year&#x27;</span>] = df_result[<span class="hljs-string">&#x27;birthday_生日&#x27;</span>].dt.year<br>    df_result[<span class="hljs-string">&#x27;birth_month&#x27;</span>] = df_result[<span class="hljs-string">&#x27;birthday_生日&#x27;</span>].dt.month<br><br><span class="hljs-comment"># 户籍地址</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;reg_address_户籍地址&#x27;</span> <span class="hljs-keyword">in</span> df_result.columns:<br>    df_result[<span class="hljs-string">&#x27;province&#x27;</span>] = df_result[<span class="hljs-string">&#x27;reg_address_户籍地址&#x27;</span>].<span class="hljs-built_in">str</span>.extract(<span class="hljs-string">r&#x27;^(.+?)省&#x27;</span>, expand=<span class="hljs-literal">False</span>)<br>    le = LabelEncoder()<br>    df_result[<span class="hljs-string">&#x27;reg_address_encoded&#x27;</span>] = le.fit_transform(df_result[<span class="hljs-string">&#x27;reg_address_户籍地址&#x27;</span>])<br><br><span class="hljs-comment"># 提取主专业代码</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;profession_专业&#x27;</span> <span class="hljs-keyword">in</span> df_result.columns:<br>    df_result[<span class="hljs-string">&#x27;main_profession&#x27;</span>] = df_result[<span class="hljs-string">&#x27;profession_专业&#x27;</span>].astype(<span class="hljs-built_in">str</span>).<span class="hljs-built_in">str</span>.split().<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># 编码为数字标签</span><br>    df_result[<span class="hljs-string">&#x27;main_profession_encoded&#x27;</span>] = le.fit_transform(df_result[<span class="hljs-string">&#x27;main_profession&#x27;</span>])<br><br><span class="hljs-comment"># 户口所在地</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;c_aab299_户口所在地区（代码）&#x27;</span> <span class="hljs-keyword">in</span> df_result.columns:<br>    df_result[<span class="hljs-string">&#x27;c_aab299_户口所在地区（代码）&#x27;</span>] = df_result[<span class="hljs-string">&#x27;c_aab299_户口所在地区（代码）&#x27;</span>].astype(<span class="hljs-built_in">str</span>)<br>    <span class="hljs-comment"># 提取省、市、县代码</span><br>    df_result[<span class="hljs-string">&#x27;hukou_province_code&#x27;</span>] = df_result[<span class="hljs-string">&#x27;c_aab299_户口所在地区（代码）&#x27;</span>].<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]<br>    df_result[<span class="hljs-string">&#x27;hukou_city_code&#x27;</span>] = df_result[<span class="hljs-string">&#x27;c_aab299_户口所在地区（代码）&#x27;</span>].<span class="hljs-built_in">str</span>[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>]<br>    df_result[<span class="hljs-string">&#x27;hukou_county_code&#x27;</span>] = df_result[<span class="hljs-string">&#x27;c_aab299_户口所在地区（代码）&#x27;</span>].<span class="hljs-built_in">str</span>[<span class="hljs-number">4</span>:<span class="hljs-number">6</span>]<br><br><span class="hljs-comment"># 毕业学校</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;c_aac180_毕业学校&#x27;</span> <span class="hljs-keyword">in</span> df_result.columns:<br>    df_result[<span class="hljs-string">&#x27;school_encoded&#x27;</span>] = le.fit_transform(df_result[<span class="hljs-string">&#x27;c_aac180_毕业学校&#x27;</span>])<br><br><span class="hljs-comment"># 毕业日期</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;c_aac181_毕业日期&#x27;</span> <span class="hljs-keyword">in</span> df_result.columns:<br>    <span class="hljs-comment"># 转换为 datetime 类型</span><br>    df_result[<span class="hljs-string">&#x27;c_aac181_毕业日期&#x27;</span>] = pd.to_datetime(df_result[<span class="hljs-string">&#x27;c_aac181_毕业日期&#x27;</span>], errors=<span class="hljs-string">&#x27;coerce&#x27;</span>)<br>    <span class="hljs-comment"># 提取毕业年份</span><br>    df_result[<span class="hljs-string">&#x27;graduate_year&#x27;</span>] = df_result[<span class="hljs-string">&#x27;c_aac181_毕业日期&#x27;</span>].dt.year<br>    <span class="hljs-comment"># 计算距今年数（以 2025 年为基准）</span><br>    df_result[<span class="hljs-string">&#x27;years_since_grad&#x27;</span>] = <span class="hljs-number">2025</span> - df_result[<span class="hljs-string">&#x27;graduate_year&#x27;</span>]<br><br><span class="hljs-comment"># 专业代码</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;c_aac182_所学专业代码&#x27;</span> <span class="hljs-keyword">in</span> df_result.columns:<br>    le_major_code = LabelEncoder()<br>    df_result[<span class="hljs-string">&#x27;major_code_encoded&#x27;</span>] = le_major_code.fit_transform(df_result[<span class="hljs-string">&#x27;c_aac182_所学专业代码&#x27;</span>])<br><br><span class="hljs-comment"># 专业名称</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;c_aac183_所学专业名称&#x27;</span> <span class="hljs-keyword">in</span> df_result.columns:<br>    le_major_name = LabelEncoder()<br>    df_result[<span class="hljs-string">&#x27;major_name_encoded&#x27;</span>] = le_major_name.fit_transform(df_result[<span class="hljs-string">&#x27;c_aac183_所学专业名称&#x27;</span>])<br><br><span class="hljs-comment"># 需要编码的类别型字段</span><br>cat_cols = [<br>   <span class="hljs-string">&#x27;sex_性别&#x27;</span>, <span class="hljs-string">&#x27;nation_民族&#x27;</span>,<span class="hljs-string">&#x27;marriage_婚姻状态&#x27;</span>, <span class="hljs-string">&#x27;edu_level_教育程度&#x27;</span>,<br>    <span class="hljs-string">&#x27;politic_政治面貌&#x27;</span>,<span class="hljs-string">&#x27;religion_宗教信仰&#x27;</span>, <span class="hljs-string">&#x27;type_人口类型&#x27;</span>,<span class="hljs-string">&#x27;military_status_兵役状态&#x27;</span>,<br>    <span class="hljs-string">&#x27;is_disability_是否残疾人&#x27;</span>, <span class="hljs-string">&#x27;is_teen_是否青少年&#x27;</span>, <span class="hljs-string">&#x27;is_elder_是否老年人&#x27;</span>,<br>    <span class="hljs-string">&#x27;is_living_alone_是否独居&#x27;</span>, <span class="hljs-string">&#x27;change_type_变动类型&#x27;</span><br>]<br><br><span class="hljs-comment"># 对所有类别型列进行 LabelEncoding</span><br><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> cat_cols:<br>    <span class="hljs-keyword">if</span> col <span class="hljs-keyword">in</span> df_result.columns:<br>        le = LabelEncoder()<br>        df_result[col + <span class="hljs-string">&#x27;_enc&#x27;</span>] = le.fit_transform(df_result[col].astype(<span class="hljs-built_in">str</span>))<br><br><span class="hljs-comment"># 选取最终用于建模的字段</span><br>final_features = [<br>    <span class="hljs-comment"># 数值型与衍生信息</span><br>    <span class="hljs-string">&#x27;age_年龄&#x27;</span>, <span class="hljs-string">&#x27;birth_year&#x27;</span>, <span class="hljs-string">&#x27;birth_month&#x27;</span>, <span class="hljs-string">&#x27;graduate_year&#x27;</span>, <span class="hljs-string">&#x27;years_since_grad&#x27;</span>,<br>    <span class="hljs-comment"># 已编码的字段</span><br>   <span class="hljs-string">&#x27;reg_address_encoded&#x27;</span>,<span class="hljs-string">&#x27;main_profession_encoded&#x27;</span>,<span class="hljs-string">&#x27;school_encoded&#x27;</span>,<br>   <span class="hljs-string">&#x27;major_code_encoded&#x27;</span>,<span class="hljs-string">&#x27;major_name_encoded&#x27;</span>,<br>    <span class="hljs-comment"># 刚刚LabelEncode的类别变量</span><br>] + [col + <span class="hljs-string">&#x27;_enc&#x27;</span> <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> cat_cols <span class="hljs-keyword">if</span> col <span class="hljs-keyword">in</span> df_result.columns]<br><br><span class="hljs-comment"># 将年龄转为数值型（int）</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;age_年龄&#x27;</span> <span class="hljs-keyword">in</span> df_result.columns:<br>    df_result[<span class="hljs-string">&#x27;age_年龄&#x27;</span>] = pd.to_numeric(df_result[<span class="hljs-string">&#x27;age_年龄&#x27;</span>], errors=<span class="hljs-string">&#x27;coerce&#x27;</span>)<br><br><span class="hljs-comment"># 最终建模用的特征</span><br>X = df_result[final_features]<br><br><span class="hljs-comment"># 初始化标准化器</span><br>scaler = StandardScaler()<br><br><span class="hljs-comment"># 拟合并变换</span><br>X_scaled = scaler.fit_transform(X)<br><br><span class="hljs-comment"># 转换为 DataFrame 并保留列名</span><br>X_scaled_df = pd.DataFrame(X_scaled, columns=final_features)<br><br><span class="hljs-comment"># 保存为 CSV 文件</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;.\\processed_data&#x27;</span>):<br>    os.makedirs(<span class="hljs-string">&#x27;.\\processed_data&#x27;</span>)<br>X_scaled_df.to_csv(<span class="hljs-string">&#x27;.\\processed_data\\text_data.csv&#x27;</span>, index=<span class="hljs-literal">False</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><span class="hljs-comment"># 加载保存的随机森林模型</span><br>model_path = <span class="hljs-string">r&#x27;C:\\Users\\Desktop\\python\\数模\\random_forest_model.pkl&#x27;</span><br><span class="hljs-keyword">try</span>:<br>    rf_model = load(model_path)<br>    <span class="hljs-comment"># 获取训练时的特征名称</span><br>    train_feature_names = rf_model.feature_names_in_ <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(rf_model, <span class="hljs-string">&#x27;feature_names_in_&#x27;</span>) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> train_feature_names <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-comment"># 确保预测数据使用相同的特征</span><br>    X_scaled_df = X_scaled_df[train_feature_names]<br><br><span class="hljs-comment"># 使用训练好的模型对 sheet2 数据进行预测</span><br>predictions = rf_model.predict(X_scaled_df)<br><br><span class="hljs-comment"># 将预测结果添加到原始数据中</span><br>df_result[<span class="hljs-string">&#x27;predicted_label&#x27;</span>] = predictions<br><br><span class="hljs-comment"># 保存包含预测结果的数据到新的 CSV 文件</span><br>df_result.to_csv(<span class="hljs-string">&#x27;.\\processed_data\\predicted_data.csv&#x27;</span>, index=<span class="hljs-literal">False</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;预测完成，结果已保存到 .\\processed_data\\predicted_data.csv&quot;</span>)<br><br><span class="hljs-comment"># 打印预测的 label 值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;预测的 label 值如下：&quot;</span>)<br><span class="hljs-built_in">print</span>(predictions)<br><span class="hljs-keyword">except</span> FileNotFoundError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;未找到模型文件: <span class="hljs-subst">&#123;model_path&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><table><thead><tr><th>模型</th><th>准确率</th><th>查准率</th><th>召回率</th><th>F1</th></tr></thead><tbody><tr><td>随机森林模型</td><td>0.8800</td><td>0.8878</td><td>0.9886</td><td>0.9355</td></tr></tbody></table><h2 id="问题三：预测模型优化"><a href="#问题三：预测模型优化" class="headerlink" title="问题三：预测模型优化"></a>问题三：预测模型优化</h2><p>在本问题中，我们面临的任务是将宏观经济、政策、劳动力市场等外部因素融入到就业状态的预测模型中，并对预测集进行重新预测。这一步骤对于提升模型的预测准确性和适用性至关重要。为了实现这一目标，我们需要解决三个核心挑战：数据整合、特征工程和模型改进。</p><p>我们需要从外部数据中提取有意义的特征。这包括宏观经济指标的变化趋势、政策实施的效果等。特征工程的目标是识别和构建那些能够显著影响就业状态的特征，从而为模型提供更丰富的信息。</p><p>  外部数据收集：</p><p>​      宜昌市2018-2023年各地区年度生产总值（来源：国家统计局）</p><p>​      宜昌市2018-2023年各城镇平均居民可支配收入（来源：国家统计局）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> LabelEncoder, StandardScaler<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 设置选项以采用未来行为</span><br>pd.set_option(<span class="hljs-string">&#x27;future.no_silent_downcasting&#x27;</span>, <span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 获取当前日期</span><br>today = pd.to_datetime(datetime.today().date())<br><br><span class="hljs-comment"># 读取原始数据（这里假设已经安装了openpyxl库用于读取xlsx格式）</span><br>df = pd.read_excel(<span class="hljs-string">r&quot;C:\\Users\\Desktop\\合并后的表格.xlsx&quot;</span>)<br><br><span class="hljs-comment"># 将缺失值 \n 替换为 NaN</span><br>df.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, pd.NA, inplace=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 转换相关日期字段为datetime格式</span><br>date_cols = [<br>    <span class="hljs-string">&#x27;失业时间&#x27;</span>,<br>    <span class="hljs-string">&#x27;就业时间&#x27;</span>,<br>]<br><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> date_cols:<br>    <span class="hljs-keyword">if</span> col <span class="hljs-keyword">in</span> df.columns:<br>        <span class="hljs-keyword">try</span>:<br>            df[col] = pd.to_datetime(df[col], errors=<span class="hljs-string">&#x27;coerce&#x27;</span>)<br>            <span class="hljs-keyword">if</span> df[col].isna().<span class="hljs-built_in">sum</span>() &gt; <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;在转换 <span class="hljs-subst">&#123;col&#125;</span> 时，有 <span class="hljs-subst">&#123;df[col].isna().<span class="hljs-built_in">sum</span>()&#125;</span> 个值无法解析为日期。&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;转换 <span class="hljs-subst">&#123;col&#125;</span> 时出现错误: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 初始化标签，默认认为是“失业”状态</span><br>df[<span class="hljs-string">&#x27;label&#x27;</span>] = <span class="hljs-number">0</span><br><br><span class="hljs-comment"># 如果列就业时间对应的时间晚于列失业时间对应的时间，label为1</span><br>df[<span class="hljs-string">&#x27;label&#x27;</span>] = np.where(pd.to_datetime(df[<span class="hljs-string">&#x27;就业时间&#x27;</span>]) &gt; pd.to_datetime(df[<span class="hljs-string">&#x27;失业时间&#x27;</span>]), <span class="hljs-number">1</span>, df[<span class="hljs-string">&#x27;label&#x27;</span>])<br><br><span class="hljs-comment"># 统计并打印1和0的个数</span><br>count_result = df[<span class="hljs-string">&#x27;label&#x27;</span>].value_counts()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0的个数:&quot;</span>, count_result.get(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1的个数:&quot;</span>, count_result.get(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>))<br><br><span class="hljs-comment"># 处理列名</span><br>new_columns = &#123;&#125;<br><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> df.columns:<br>    parts = col.split(<span class="hljs-string">&#x27;_&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(parts) == <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">all</span>([part.isalpha() <span class="hljs-keyword">for</span> part <span class="hljs-keyword">in</span> parts[:<span class="hljs-number">2</span>]]):<br>        new_columns[col] = parts[<span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">else</span>:<br>        new_columns[col] = col<br>df.rename(columns=new_columns, inplace=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 设置保留字段（同步修改列名）</span><br>columns_to_keep = [<br>    <span class="hljs-string">&#x27;人员编11号&#x27;</span>, <span class="hljs-string">&#x27;姓名&#x27;</span>, <span class="hljs-string">&#x27;性别&#x27;</span>, <span class="hljs-string">&#x27;生日&#x27;</span>, <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    <span class="hljs-string">&#x27;民族&#x27;</span>, <span class="hljs-string">&#x27;婚姻状态&#x27;</span>, <span class="hljs-string">&#x27;教育程度&#x27;</span>, <span class="hljs-string">&#x27;政治面貌&#x27;</span>,<br>    <span class="hljs-string">&#x27;户籍地址&#x27;</span>, <span class="hljs-string">&#x27;专业&#x27;</span>, <span class="hljs-string">&#x27;宗教信仰&#x27;</span>, <span class="hljs-string">&#x27;户口性质&#x27;</span>,<br>    <span class="hljs-string">&#x27;户口所在地区（代码）&#x27;</span>, <span class="hljs-string">&#x27;户口所在地区（名称）&#x27;</span>, <span class="hljs-string">&#x27;文化程度&#x27;</span>,<br>    <span class="hljs-string">&#x27;毕业学校&#x27;</span>, <span class="hljs-string">&#x27;毕业日期&#x27;</span>, <span class="hljs-string">&#x27;所学专业代码&#x27;</span>, <span class="hljs-string">&#x27;所学专业名称&#x27;</span>,<br>    <span class="hljs-string">&#x27;人口类型&#x27;</span>, <span class="hljs-string">&#x27;兵役状态&#x27;</span>, <span class="hljs-string">&#x27;是否残疾人&#x27;</span>,<br>    <span class="hljs-string">&#x27;是否青少年&#x27;</span>, <span class="hljs-string">&#x27;是否老年人&#x27;</span>, <span class="hljs-string">&#x27;变动类型&#x27;</span>,<br>    <span class="hljs-string">&#x27;是否独居&#x27;</span>, <span class="hljs-string">&#x27;居住状态&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;地区生产总值&#x27;</span><br>]<br><br><span class="hljs-comment"># 剔除无关变量</span><br>valid_columns = [col <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> columns_to_keep <span class="hljs-keyword">if</span> col <span class="hljs-keyword">in</span> df.columns]<br>df = df[valid_columns]<br><br><span class="hljs-comment"># 筛选字段副本</span><br>df_result = df[columns_to_keep].copy()<br><br><span class="hljs-comment"># 居住状态这一列删除</span><br>df_result = df_result.drop(columns=[<span class="hljs-string">&#x27;居住状态&#x27;</span>])<br><br><span class="hljs-comment"># 找出所有类别型列（object 类型的列）</span><br>categorical_columns = df_result.select_dtypes(include=[<span class="hljs-string">&#x27;object&#x27;</span>]).columns<br><span class="hljs-comment"># 对每一列使用众数填充缺失值</span><br>df_result[categorical_columns] = df_result[categorical_columns].apply(<span class="hljs-keyword">lambda</span> x: x.fillna(x.mode()[<span class="hljs-number">0</span>] <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> x.mode().empty <span class="hljs-keyword">else</span> np.nan))<br><br><span class="hljs-comment"># 找出所有非类别型列</span><br>non_categorical_columns = df_result.select_dtypes(exclude=[<span class="hljs-string">&#x27;object&#x27;</span>]).columns<br><span class="hljs-comment"># 对每一列使用中位数填充缺失值</span><br>df_result[non_categorical_columns] = df_result[non_categorical_columns].apply(<span class="hljs-keyword">lambda</span> x: x.fillna(x.median()))<br><br><span class="hljs-comment"># 生日</span><br><span class="hljs-comment"># 将生日列转换为 datetime 类型</span><br>df_result[<span class="hljs-string">&#x27;生日&#x27;</span>] = pd.to_datetime(df_result[<span class="hljs-string">&#x27;生日&#x27;</span>], errors=<span class="hljs-string">&#x27;coerce&#x27;</span>)<br><span class="hljs-comment"># 新增出生年份、月份特征</span><br>df_result[<span class="hljs-string">&#x27;出生年份&#x27;</span>] = df_result[<span class="hljs-string">&#x27;生日&#x27;</span>].dt.year<br>df_result[<span class="hljs-string">&#x27;出生月份&#x27;</span>] = df_result[<span class="hljs-string">&#x27;生日&#x27;</span>].dt.month<br><br><span class="hljs-comment"># 户籍地址</span><br>df_result[<span class="hljs-string">&#x27;省份&#x27;</span>] = df_result[<span class="hljs-string">&#x27;户籍地址&#x27;</span>].<span class="hljs-built_in">str</span>.extract(<span class="hljs-string">r&#x27;^(.+?)省&#x27;</span>, expand=<span class="hljs-literal">False</span>)<br>le = LabelEncoder()<br>df_result[<span class="hljs-string">&#x27;户籍地址编码&#x27;</span>] = le.fit_transform(df_result[<span class="hljs-string">&#x27;户籍地址&#x27;</span>])<br><br><span class="hljs-comment"># 提取主专业代码</span><br>df_result[<span class="hljs-string">&#x27;主专业&#x27;</span>] = df_result[<span class="hljs-string">&#x27;专业&#x27;</span>].astype(<span class="hljs-built_in">str</span>).<span class="hljs-built_in">str</span>.split().<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># 编码为数字标签</span><br>df_result[<span class="hljs-string">&#x27;主专业编码&#x27;</span>] = le.fit_transform(df_result[<span class="hljs-string">&#x27;主专业&#x27;</span>])<br><br><span class="hljs-comment"># 户口所在地</span><br>df_result[<span class="hljs-string">&#x27;户口所在地区（代码）&#x27;</span>] = df_result[<span class="hljs-string">&#x27;户口所在地区（代码）&#x27;</span>].astype(<span class="hljs-built_in">str</span>)<br><span class="hljs-comment"># 提取省、市、县代码</span><br>df_result[<span class="hljs-string">&#x27;户口所在省份代码&#x27;</span>] = df_result[<span class="hljs-string">&#x27;户口所在地区（代码）&#x27;</span>].<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]<br>df_result[<span class="hljs-string">&#x27;户口所在城市代码&#x27;</span>] = df_result[<span class="hljs-string">&#x27;户口所在地区（代码）&#x27;</span>].<span class="hljs-built_in">str</span>[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>]<br>df_result[<span class="hljs-string">&#x27;户口所在县代码&#x27;</span>] = df_result[<span class="hljs-string">&#x27;户口所在地区（代码）&#x27;</span>].<span class="hljs-built_in">str</span>[<span class="hljs-number">4</span>:<span class="hljs-number">6</span>]<br><br><span class="hljs-comment"># 毕业学校</span><br>df_result[<span class="hljs-string">&#x27;毕业学校编码&#x27;</span>] = le.fit_transform(df_result[<span class="hljs-string">&#x27;毕业学校&#x27;</span>])<br><br><span class="hljs-comment"># 毕业日期</span><br><span class="hljs-comment"># 转换为 datetime 类型</span><br>df_result[<span class="hljs-string">&#x27;毕业日期&#x27;</span>] = pd.to_datetime(df_result[<span class="hljs-string">&#x27;毕业日期&#x27;</span>], errors=<span class="hljs-string">&#x27;coerce&#x27;</span>)<br><span class="hljs-comment"># 提取毕业年份</span><br>df_result[<span class="hljs-string">&#x27;毕业年份&#x27;</span>] = df_result[<span class="hljs-string">&#x27;毕业日期&#x27;</span>].dt.year<br><span class="hljs-comment"># 计算距今年数（以 2025 年为基准）</span><br>df_result[<span class="hljs-string">&#x27;毕业至今年数&#x27;</span>] = <span class="hljs-number">2025</span> - df_result[<span class="hljs-string">&#x27;毕业年份&#x27;</span>]<br><br><span class="hljs-comment"># 专业代码</span><br>le_major_code = LabelEncoder()<br>df_result[<span class="hljs-string">&#x27;所学专业代码编码&#x27;</span>] = le_major_code.fit_transform(df_result[<span class="hljs-string">&#x27;所学专业代码&#x27;</span>])<br><br><span class="hljs-comment"># 专业名称</span><br>le_major_name = LabelEncoder()<br>df_result[<span class="hljs-string">&#x27;所学专业名称编码&#x27;</span>] = le_major_name.fit_transform(df_result[<span class="hljs-string">&#x27;所学专业名称&#x27;</span>])<br><br><span class="hljs-comment"># 需要编码的类别型字段</span><br>cat_cols = [<br>    <span class="hljs-string">&#x27;性别&#x27;</span>, <span class="hljs-string">&#x27;民族&#x27;</span>, <span class="hljs-string">&#x27;婚姻状态&#x27;</span>, <span class="hljs-string">&#x27;教育程度&#x27;</span>,<br>    <span class="hljs-string">&#x27;政治面貌&#x27;</span>, <span class="hljs-string">&#x27;宗教信仰&#x27;</span>, <span class="hljs-string">&#x27;人口类型&#x27;</span>, <span class="hljs-string">&#x27;兵役状态&#x27;</span>,<br>    <span class="hljs-string">&#x27;是否残疾人&#x27;</span>, <span class="hljs-string">&#x27;是否青少年&#x27;</span>, <span class="hljs-string">&#x27;是否老年人&#x27;</span>,<br>    <span class="hljs-string">&#x27;是否独居&#x27;</span>, <span class="hljs-string">&#x27;变动类型&#x27;</span><br>]<br><br><span class="hljs-comment"># 对所有类别型列进行 LabelEncoding</span><br><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> cat_cols:<br>    le = LabelEncoder()<br>    df_result[col + <span class="hljs-string">&#x27;编码&#x27;</span>] = le.fit_transform(df_result[col].astype(<span class="hljs-built_in">str</span>))<br><br><span class="hljs-comment"># 处理地区生产总值列</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;地区生产总值&#x27;</span> <span class="hljs-keyword">in</span> df_result.columns:<br>    <span class="hljs-keyword">if</span> df_result[<span class="hljs-string">&#x27;地区生产总值&#x27;</span>].dtype == <span class="hljs-string">&#x27;object&#x27;</span>:<br>        <span class="hljs-comment"># 如果是类别型数据，进行 LabelEncoding</span><br>        le_gdp = LabelEncoder()<br>        df_result[<span class="hljs-string">&#x27;地区生产总值编码&#x27;</span>] = le_gdp.fit_transform(df_result[<span class="hljs-string">&#x27;地区生产总值&#x27;</span>])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 如果是数值型数据，进行标准化</span><br>        scaler_gdp = StandardScaler()<br>        df_result[<span class="hljs-string">&#x27;地区生产总值&#x27;</span>] = scaler_gdp.fit_transform(df_result[[<span class="hljs-string">&#x27;地区生产总值&#x27;</span>]])<br><br><span class="hljs-comment"># 选取最终用于建模的字段</span><br>final_features = [<br>    <span class="hljs-comment"># 数值型与衍生信息</span><br>    <span class="hljs-string">&#x27;年龄&#x27;</span>, <span class="hljs-string">&#x27;出生年份&#x27;</span>, <span class="hljs-string">&#x27;出生月份&#x27;</span>, <span class="hljs-string">&#x27;毕业年份&#x27;</span>, <span class="hljs-string">&#x27;毕业至今年数&#x27;</span>,<br>    <span class="hljs-comment"># 已编码的字段</span><br>    <span class="hljs-string">&#x27;户籍地址编码&#x27;</span>, <span class="hljs-string">&#x27;主专业编码&#x27;</span>, <span class="hljs-string">&#x27;毕业学校编码&#x27;</span>,<br>    <span class="hljs-string">&#x27;所学专业代码编码&#x27;</span>, <span class="hljs-string">&#x27;所学专业名称编码&#x27;</span>,<br>    <span class="hljs-comment"># 刚刚LabelEncode的类别变量</span><br>] + [col + <span class="hljs-string">&#x27;编码&#x27;</span> <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> cat_cols]<br><br><span class="hljs-comment"># 如果处理后有编码列，添加到最终特征</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;地区生产总值编码&#x27;</span> <span class="hljs-keyword">in</span> df_result.columns:<br>    final_features.append(<span class="hljs-string">&#x27;地区生产总值编码&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    final_features.append(<span class="hljs-string">&#x27;地区生产总值&#x27;</span>)<br><br><span class="hljs-comment"># 将年龄转为数值型（int）</span><br>df_result[<span class="hljs-string">&#x27;年龄&#x27;</span>] = pd.to_numeric(df_result[<span class="hljs-string">&#x27;年龄&#x27;</span>], errors=<span class="hljs-string">&#x27;coerce&#x27;</span>)<br><br><span class="hljs-comment"># 取建模用数据子集</span><br>df_model = df_result[final_features + [<span class="hljs-string">&#x27;label&#x27;</span>]].copy()<br><br><span class="hljs-comment"># 最终建模用的特征</span><br>X = df_model[final_features]<br><br><span class="hljs-comment"># 初始化标准化器</span><br>scaler = StandardScaler()<br><br><span class="hljs-comment"># 拟合并变换</span><br>X_scaled = scaler.fit_transform(X)<br><br><span class="hljs-comment"># 转换为DataFrame并保留列名</span><br>X_scaled_df = pd.DataFrame(X_scaled, columns=final_features)<br><br><span class="hljs-comment"># 添加标签（label）列</span><br>X_scaled_df[<span class="hljs-string">&#x27;label&#x27;</span>] = df_model[<span class="hljs-string">&#x27;label&#x27;</span>].values<br><br><span class="hljs-comment"># 查看标准化后的结果</span><br><span class="hljs-built_in">print</span>(X_scaled_df.head())<br><br><span class="hljs-comment"># 使用绝对路径保存文件</span><br>output_dir = <span class="hljs-string">&#x27;C:\\Users\\Desktop\\python\\数模\\processed_data&#x27;</span><br>output_file = os.path.join(output_dir, <span class="hljs-string">&#x27;standardized_data001.csv&#x27;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(output_dir):<br>    os.makedirs(output_dir)<br>X_scaled_df.to_csv(output_file, index=<span class="hljs-literal">False</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> statsmodels.stats.outliers_influence <span class="hljs-keyword">import</span> variance_inflation_factor<br><span class="hljs-keyword">from</span> statsmodels.tools.tools <span class="hljs-keyword">import</span> add_constant<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 使用绝对路径读取文件</span><br>file_path = <span class="hljs-string">&#x27;C:\\Users\\\\Desktop\\python\\数模\\processed_data\\standardized_data001.csv&#x27;</span><br>df = pd.read_csv(file_path)<br><br><span class="hljs-comment"># 统计就业状态：0为失业，1为就业</span><br>label_counts = df[<span class="hljs-string">&#x27;label&#x27;</span>].value_counts()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;就业状态分布：\n&quot;</span>, label_counts)<br><br><span class="hljs-comment"># 设置字体支持中文</span><br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>]<br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 创建保存图片的目录（如果不存在）</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;.\\figure&#x27;</span>):<br>    os.makedirs(<span class="hljs-string">&#x27;.\\figure&#x27;</span>)<br><br><span class="hljs-comment"># 绘制就业状态的饼图并保存</span><br>plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">8</span>))<br>labels = [<span class="hljs-string">&#x27;就业&#x27;</span>, <span class="hljs-string">&#x27;失业&#x27;</span>]<br>plt.pie(label_counts, labels=labels, autopct=<span class="hljs-string">&#x27;%1.1f%%&#x27;</span>, startangle=<span class="hljs-number">140</span>)<br>plt.title(<span class="hljs-string">&#x27;就业状态分布饼图&#x27;</span>)<br>plt.savefig(<span class="hljs-string">&#x27;.\\figure\\employment_status_pie001.jpg&#x27;</span>, dpi=<span class="hljs-number">500</span>)<br>plt.close()<br><br><span class="hljs-comment"># 绘制各特征与就业状态的箱线图并保存，包含地区生产总值</span><br>features = df.columns[:-<span class="hljs-number">1</span>].tolist()<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;地区生产总值&#x27;</span> <span class="hljs-keyword">in</span> df.columns:<br>    features.append(<span class="hljs-string">&#x27;地区生产总值&#x27;</span>)<br>num_cols = <span class="hljs-number">4</span><br>num_rows = (<span class="hljs-built_in">len</span>(features) + num_cols - <span class="hljs-number">1</span>) \\\\ num_cols<br>plt.figure(figsize=(<span class="hljs-number">15</span>, <span class="hljs-number">3</span> * num_rows))<br><span class="hljs-keyword">for</span> i, feature <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(features):<br>    plt.subplot(num_rows, num_cols, i + <span class="hljs-number">1</span>)<br>    sns.boxplot(x=<span class="hljs-string">&#x27;label&#x27;</span>, y=feature, data=df)<br>    plt.title(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;feature&#125;</span> 与就业状态的关系&#x27;</span>)<br>plt.tight_layout()<br>plt.savefig(<span class="hljs-string">&#x27;.\\figure\\boxplot_feature_employment001.jpg&#x27;</span>, dpi=<span class="hljs-number">500</span>)<br>plt.close()<br><br><span class="hljs-comment"># 计算各特征与就业状态的相关性并排序，包含地区生产总值</span><br>corr_with_label = df.corr()[<span class="hljs-string">&#x27;label&#x27;</span>].drop(<span class="hljs-string">&#x27;label&#x27;</span>).sort_values(ascending=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n各特征与就业状态的相关性：\n&quot;</span>, corr_with_label)<br><br><span class="hljs-comment"># 相关系数矩阵，包含地区生产总值</span><br>corr_matrix = df.corr(numeric_only=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 绘制热力图并保存</span><br>plt.figure(figsize=(<span class="hljs-number">14</span>, <span class="hljs-number">12</span>))<br>sns.heatmap(corr_matrix, annot=<span class="hljs-literal">True</span>, fmt=<span class="hljs-string">&#x27;.2f&#x27;</span>, cmap=<span class="hljs-string">&#x27;coolwarm&#x27;</span>, square=<span class="hljs-literal">True</span>)<br>plt.title(<span class="hljs-string">&quot;Feature Correlation Heatmap&quot;</span>)<br>plt.tight_layout()<br>plt.savefig(<span class="hljs-string">&#x27;.\\figure\\heatmap001.jpg&#x27;</span>, dpi=<span class="hljs-number">500</span>)<br>plt.close()<br><br><span class="hljs-comment"># 计算VIF，包含地区生产总值</span><br>X_features = df.drop(columns=[<span class="hljs-string">&#x27;label&#x27;</span>])<br>X_const = add_constant(X_features)<br>vif = pd.DataFrame()<br>vif[<span class="hljs-string">&quot;Variable&quot;</span>] = X_const.columns<br>vif[<span class="hljs-string">&quot;VIF&quot;</span>] = [variance_inflation_factor(X_const.values, i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(X_const.shape[<span class="hljs-number">1</span>])]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n特征的方差膨胀因子（VIF）：&quot;</span>)<br><span class="hljs-built_in">print</span>(vif)<br><br><span class="hljs-comment"># 保留的特征（排除多重共线性高的），包含地区生产总值</span><br>selected_columns = [<br>    <span class="hljs-string">&#x27;出生月份&#x27;</span>,<br>    <span class="hljs-string">&#x27;户籍地址编码&#x27;</span>,<br>    <span class="hljs-string">&#x27;主专业编码&#x27;</span>,<br>    <span class="hljs-string">&#x27;毕业学校编码&#x27;</span>,<br>    <span class="hljs-string">&#x27;所学专业代码编码&#x27;</span>,<br>    <span class="hljs-string">&#x27;所学专业名称编码&#x27;</span>,<br>    <span class="hljs-string">&#x27;性别编码&#x27;</span>,<br>    <span class="hljs-string">&#x27;民族编码&#x27;</span>,<br>    <span class="hljs-string">&#x27;婚姻状态编码&#x27;</span>,<br>    <span class="hljs-string">&#x27;教育程度编码&#x27;</span>,<br>    <span class="hljs-string">&#x27;政治面貌编码&#x27;</span>,<br>    <span class="hljs-string">&#x27;宗教信仰编码&#x27;</span>,<br>    <span class="hljs-string">&#x27;人口类型编码&#x27;</span>,<br>    <span class="hljs-string">&#x27;兵役状态编码&#x27;</span>,<br>    <span class="hljs-string">&#x27;是否残疾人编码&#x27;</span>,<br>    <span class="hljs-string">&#x27;是否老年人编码&#x27;</span>,<br>    <span class="hljs-string">&#x27;是否独居编码&#x27;</span>,<br>    <span class="hljs-string">&#x27;地区生产总值&#x27;</span>,<br>    <span class="hljs-string">&#x27;label&#x27;</span>,<br>]<br><br><span class="hljs-comment"># 选取最终保留的特征</span><br>df_final = df[selected_columns]<br><br><span class="hljs-comment"># 使用绝对路径保存文件</span><br>output_dir = <span class="hljs-string">&#x27;C:\\Users\\\\Desktop\\python\\数模\\processed_data&#x27;</span><br>output_file = os.path.join(output_dir, <span class="hljs-string">&#x27;final_processed_data001.csv&#x27;</span>)<br>df_final.to_csv(output_file, index=<span class="hljs-literal">False</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数据已保存为 final_processed_data001.csv&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> RandomForestClassifier<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score, precision_score, recall_score, f1_score<br><span class="hljs-keyword">from</span> joblib <span class="hljs-keyword">import</span> dump<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 设置字体支持中文</span><br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>]<br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 创建保存图片的目录（如果不存在）</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;.\\figure&#x27;</span>):<br>    os.makedirs(<span class="hljs-string">&#x27;.\\figure&#x27;</span>)<br><br><span class="hljs-comment"># 使用绝对路径读取预处理后的数据</span><br>data_file_path = <span class="hljs-string">&#x27;C:\\Users\\\\Desktop\\python\\数模\\processed_data\\final_processed_data001.csv&#x27;</span><br>df = pd.read_csv(data_file_path)<br><br><span class="hljs-comment"># 目标变量（label）和特征（features）</span><br>X = df.drop(columns=[<span class="hljs-string">&#x27;label&#x27;</span>])<br>y = df[<span class="hljs-string">&#x27;label&#x27;</span>]<br><br><span class="hljs-comment"># 分割数据为训练集和测试集（98% 训练，2% 测试）</span><br>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="hljs-number">0.02</span>, random_state=<span class="hljs-number">20</span>)<br><br><span class="hljs-comment"># 初始化随机森林模型</span><br>rf_model = RandomForestClassifier(n_estimators=<span class="hljs-number">100</span>, random_state=<span class="hljs-number">42</span>)<br><br><span class="hljs-comment"># 训练模型</span><br>rf_model.fit(X_train, y_train)<br><br><span class="hljs-comment"># 使用训练好的模型对测试集进行预测</span><br>y_pred = rf_model.predict(X_test)<br><br><span class="hljs-comment"># 计算评估指标</span><br>accuracy = accuracy_score(y_test, y_pred)<br>precision = precision_score(y_test, y_pred)<br>recall = recall_score(y_test, y_pred)<br>f1 = f1_score(y_test, y_pred)<br><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;准确率 (Accuracy): <span class="hljs-subst">&#123;accuracy:<span class="hljs-number">.4</span>f&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;查准率 (Precision): <span class="hljs-subst">&#123;precision:<span class="hljs-number">.4</span>f&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;召回率 (Recall): <span class="hljs-subst">&#123;recall:<span class="hljs-number">.4</span>f&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;F1 值: <span class="hljs-subst">&#123;f1:<span class="hljs-number">.4</span>f&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 使用绝对路径保存训练好的模型</span><br>model_output_dir = <span class="hljs-string">&#x27;C:\\Users\\\\Desktop\\python\\数模\\processed_data&#x27;</span><br>model_output_file = os.path.join(model_output_dir, <span class="hljs-string">&#x27;random_forest_model001.pkl&#x27;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(model_output_dir):<br>    os.makedirs(model_output_dir)<br>dump(rf_model, model_output_file)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;模型已保存为 &#x27;<span class="hljs-subst">&#123;model_output_file&#125;</span>&#x27;&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> LabelEncoder, StandardScaler<br><span class="hljs-keyword">from</span> statsmodels.stats.outliers_influence <span class="hljs-keyword">import</span> variance_inflation_factor<br><span class="hljs-keyword">from</span> statsmodels.tools.tools <span class="hljs-keyword">import</span> add_constant<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 定义匹配关键词列表</span><br>keywords = [<span class="hljs-string">&quot;宜都&quot;</span>, <span class="hljs-string">&quot;枝江&quot;</span>, <span class="hljs-string">&quot;当阳&quot;</span>, <span class="hljs-string">&quot;远安&quot;</span>, <span class="hljs-string">&quot;兴山&quot;</span>, <span class="hljs-string">&quot;秭归&quot;</span>, <span class="hljs-string">&quot;长阳&quot;</span>, <span class="hljs-string">&quot;五峰&quot;</span>, <span class="hljs-string">&quot;夷陵&quot;</span>, <span class="hljs-string">&quot;西陵&quot;</span>, <span class="hljs-string">&quot;伍家岗&quot;</span>, <span class="hljs-string">&quot;点军&quot;</span>, <span class="hljs-string">&quot;猇亭&quot;</span>,<br>            <span class="hljs-string">&quot;宜昌&quot;</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_match</span>(<span class="hljs-params">original_value, external_value</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    根据新规则检查是否匹配成功</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> keyword <span class="hljs-keyword">in</span> keywords:<br>        <span class="hljs-keyword">if</span> keyword <span class="hljs-keyword">in</span> original_value <span class="hljs-keyword">and</span> keyword <span class="hljs-keyword">in</span> external_value:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_mapping</span>(<span class="hljs-params">external_dfs</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    构建地区名到外部数据行的映射表</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    mapping = &#123;&#125;<br>    <span class="hljs-keyword">for</span> external_df <span class="hljs-keyword">in</span> external_dfs:<br>        <span class="hljs-keyword">for</span> _, row <span class="hljs-keyword">in</span> external_df.iterrows():<br>            area = row[<span class="hljs-string">&#x27;地区名&#x27;</span>]<br>            <span class="hljs-keyword">if</span> area <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> mapping:<br>                mapping[area] = []<br>            mapping[area].append(row)<br>    <span class="hljs-keyword">return</span> mapping<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge_tables</span>(<span class="hljs-params">original_df, external_dfs</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    合并原表格和多个外部表格</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    merged_df = original_df.copy()<br>    mapping = build_mapping(external_dfs)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_row</span>(<span class="hljs-params">row</span>):<br>        original_area = row[<span class="hljs-string">&#x27;户口所在地区（名称）&#x27;</span>]<br>        <span class="hljs-keyword">for</span> external_area, external_rows <span class="hljs-keyword">in</span> mapping.items():<br>            <span class="hljs-keyword">if</span> check_match(original_area, external_area):<br>                <span class="hljs-keyword">for</span> external_row <span class="hljs-keyword">in</span> external_rows:<br>                    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> external_row.index:<br>                        <span class="hljs-keyword">if</span> col != <span class="hljs-string">&#x27;地区名&#x27;</span>:<br>                            row[col] = external_row[col]<br>        <span class="hljs-keyword">return</span> row<br><br>    merged_df = merged_df.apply(update_row, axis=<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> merged_df<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># 读取原表格，指定第三行作为表头</span><br>df1 = pd.read_excel(<span class="hljs-string">r&#x27;C:\\Users\\Desktop\\C.xls&#x27;</span>, header=<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 读取外部表格</span><br>df2 = pd.read_excel(<span class="hljs-string">r&#x27;C:\\Users\\Desktop\\外部数据\\02.xlsx&#x27;</span>)<br><br><span class="hljs-comment"># 定义匹配函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">match_value</span>(<span class="hljs-params">row</span>):<br>    name = row[<span class="hljs-string">&#x27;户口所在地区（名称）&#x27;</span>]<br>    <span class="hljs-keyword">for</span> index, other_name <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(df2[<span class="hljs-string">&#x27;地区名&#x27;</span>]):<br>        <span class="hljs-keyword">if</span> other_name != <span class="hljs-string">&#x27;宜昌市&#x27;</span>:<br>            <span class="hljs-keyword">if</span> other_name[:<span class="hljs-number">2</span>] <span class="hljs-keyword">in</span> name:<br>                <span class="hljs-keyword">return</span> df2.loc[index, <span class="hljs-string">&#x27;地区生产总值&#x27;</span>]<br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;宜昌&#x27;</span> <span class="hljs-keyword">in</span> name:<br>            <span class="hljs-keyword">return</span> df2.loc[index, <span class="hljs-string">&#x27;地区生产总值&#x27;</span>]<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 应用匹配函数</span><br>df1[<span class="hljs-string">&#x27;地区生产总值&#x27;</span>] = df1.apply(match_value, axis=<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 保存合并后的表格</span><br>df1.to_excel(<span class="hljs-string">r&#x27;C:\\Users\\Desktop\\合并后的表格.xlsx&#x27;</span>, index=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>优化后的随机森林模型的各评估指标如下：</p><table><thead><tr><th>模型</th><th>准确率</th><th>查准率</th><th>召回率</th><th>F1</th></tr></thead><tbody><tr><td>随机森林模型</td><td>0.9147</td><td>0.9267</td><td>0.9859</td><td>0.9554</td></tr></tbody></table><h2 id="方案四：人岗精准匹配"><a href="#方案四：人岗精准匹配" class="headerlink" title="方案四：人岗精准匹配"></a>方案四：人岗精准匹配</h2><p>在问题四中，我们一方面要完成非线性模型的构造；另一方面应该提升建议与当地经济发展的契合度，做到地区的定制化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> LabelEncoder<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<br><br><span class="hljs-comment"># 提取特征变量和目标变量</span><br>X = df[[<span class="hljs-string">&#x27;个人基本信息_教育程度&#x27;</span>, <span class="hljs-string">&#x27;个人基本信息_政治面貌&#x27;</span>, <span class="hljs-string">&#x27;个人基本信息_兵役状态&#x27;</span>]]<br>y = df[<span class="hljs-string">&#x27;就业信息_行业代码&#x27;</span>]<br><br><span class="hljs-comment"># 对特征变量进行编码</span><br>label_encoders = &#123;&#125;<br><span class="hljs-keyword">for</span> column <span class="hljs-keyword">in</span> X.columns:<br>    le = LabelEncoder()<br>    X[column] = le.fit_transform(X[column])<br>    label_encoders[column] = le<br><br><span class="hljs-comment"># 对目标变量进行编码</span><br>le_y = LabelEncoder()<br>y = le_y.fit_transform(y)<br><br><span class="hljs-comment"># 划分训练集和测试集</span><br>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br><br><span class="hljs-comment"># 创建逻辑回归模型并训练</span><br>model = LogisticRegression(max_iter=<span class="hljs-number">1000</span>)<br>model.fit(X_train, y_train)<br><br><span class="hljs-comment"># 在测试集上进行预测</span><br>y_pred = model.predict(X_test)<br><br><span class="hljs-comment"># 计算模型的准确率</span><br>accuracy = accuracy_score(y_test, y_pred)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;模型准确率: <span class="hljs-subst">&#123;accuracy&#125;</span>&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>在尝试构建随机森林模型预测个人信息与就业类型的关系时，发现模型准确率仅约为 15.8%，处于较低水平。</p><p><del>（实话：本来应该再继续优化模型和代码的，但是没有时间了，就改成后面这种比较糊弄的形式了）</del></p><p>将赛题提供的数据与引入的外部数据进行整合后，构建了一个包含丰富特征的数据集。随后，基于整合后的数据和提取的特征，构建人岗匹配模型。在本研究中，考虑到问题的复杂性和数据的特点，选择集成学习算法，通过对于行业发展趋势与在当地产业的占比来推荐适合于当地人的个性化职业推荐，以提高模型的准确性，稳定性以及与当地经济情况的契合度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> random<br><br>EMPLOYED = <span class="hljs-number">1</span><br>UNEMPLOYED = <span class="hljs-number">0</span><br><br><span class="hljs-comment"># 读取 Excel 文件</span><br>excel_file = pd.ExcelFile(<span class="hljs-string">&#x27;data.xls&#x27;</span>)<br>df = excel_file.parse(<span class="hljs-string">&#x27;data&#x27;</span>, header=<span class="hljs-literal">None</span>)<br><br><span class="hljs-comment"># 设置列名</span><br>df.columns = [<br>    <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;person_id&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;sex&#x27;</span>, <span class="hljs-string">&#x27;birthday&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;nation&#x27;</span>, <span class="hljs-string">&#x27;marriage&#x27;</span>, <span class="hljs-string">&#x27;edu_level&#x27;</span>,<br>    <span class="hljs-string">&#x27;politic&#x27;</span>, <span class="hljs-string">&#x27;reg_address&#x27;</span>, <span class="hljs-string">&#x27;profession&#x27;</span>, <span class="hljs-string">&#x27;religion&#x27;</span>, <span class="hljs-string">&#x27;hukou_type&#x27;</span>, <span class="hljs-string">&#x27;hukou_code&#x27;</span>,<br>    <span class="hljs-string">&#x27;hukou_name&#x27;</span>, <span class="hljs-string">&#x27;culture_level&#x27;</span>, <span class="hljs-string">&#x27;grad_school&#x27;</span>, <span class="hljs-string">&#x27;grad_date&#x27;</span>, <span class="hljs-string">&#x27;major_code&#x27;</span>, <span class="hljs-string">&#x27;major_name&#x27;</span>,<br>    <span class="hljs-string">&#x27;person_type&#x27;</span>, <span class="hljs-string">&#x27;military_status&#x27;</span>, <span class="hljs-string">&#x27;is_disability&#x27;</span>, <span class="hljs-string">&#x27;is_teen&#x27;</span>, <span class="hljs-string">&#x27;is_elder&#x27;</span>, <span class="hljs-string">&#x27;change_type&#x27;</span>,<br>    <span class="hljs-string">&#x27;is_living_alone&#x27;</span>, <span class="hljs-string">&#x27;live_status&#x27;</span>, <span class="hljs-string">&#x27;remark&#x27;</span>, <span class="hljs-string">&#x27;employment_id&#x27;</span>, <span class="hljs-string">&#x27;employer_id&#x27;</span>, <span class="hljs-string">&#x27;employment_date&#x27;</span>,<br>    <span class="hljs-string">&#x27;is_contract&#x27;</span>, <span class="hljs-string">&#x27;is_social_insurance&#x27;</span>, <span class="hljs-string">&#x27;contract_start&#x27;</span>, <span class="hljs-string">&#x27;contract_end&#x27;</span>, <span class="hljs-string">&#x27;industry_code&#x27;</span>,<br>    <span class="hljs-string">&#x27;employer&#x27;</span>, <span class="hljs-string">&#x27;unemployment_audit_date&#x27;</span>, <span class="hljs-string">&#x27;unemployment_id&#x27;</span>, <span class="hljs-string">&#x27;unemployment_date&#x27;</span>,<br>    <span class="hljs-string">&#x27;unemployment_reason&#x27;</span>, <span class="hljs-string">&#x27;original_job_code&#x27;</span>, <span class="hljs-string">&#x27;original_job_name&#x27;</span>, <span class="hljs-string">&#x27;original_employment_form&#x27;</span>,<br>    <span class="hljs-string">&#x27;job_willingness&#x27;</span>, <span class="hljs-string">&#x27;training_willingness&#x27;</span>, <span class="hljs-string">&#x27;unemployment_register_date&#x27;</span>, <span class="hljs-string">&#x27;unemployment_cancel_date&#x27;</span>,<br>    <span class="hljs-string">&#x27;unemployment_status&#x27;</span>, <span class="hljs-string">&#x27;unemployment_type&#x27;</span>, <span class="hljs-string">&#x27;original_company&#x27;</span>, <span class="hljs-string">&#x27;is_unemployment_insurance&#x27;</span>,<br>    <span class="hljs-string">&#x27;employment_status&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span><br>]<br><br><span class="hljs-comment"># 跳过前两行</span><br>df = df[<span class="hljs-number">2</span>:]<br>df = df.reset_index(drop=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 移除无效值</span><br>invalid_value = <span class="hljs-string">&#x27;Employment status (1=employed, 0=unemployed)&#x27;</span><br>df = df[df[<span class="hljs-string">&#x27;employment_status&#x27;</span>] != invalid_value]<br><br><span class="hljs-comment"># 清理 employment_status 列</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Original data type of &#x27;employment_status&#x27; column:&quot;</span>, df[<span class="hljs-string">&#x27;employment_status&#x27;</span>].dtype)<br>df[<span class="hljs-string">&#x27;employment_status&#x27;</span>] = df[<span class="hljs-string">&#x27;employment_status&#x27;</span>].astype(<span class="hljs-built_in">str</span>).<span class="hljs-built_in">str</span>.strip()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Unique values of &#x27;employment_status&#x27; column after cleaning:&quot;</span>, df[<span class="hljs-string">&#x27;employment_status&#x27;</span>].unique())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Data type of &#x27;employment_status&#x27; column after cleaning:&quot;</span>, df[<span class="hljs-string">&#x27;employment_status&#x27;</span>].dtype)<br><br><span class="hljs-comment"># 删除 age 和 edu_level 列中的空值</span><br>df = df.dropna(subset=[<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;edu_level&#x27;</span>])<br><br><span class="hljs-comment"># 筛选出失业人员数据</span><br>unemployed_data = df[df[<span class="hljs-string">&#x27;employment_status&#x27;</span>] == <span class="hljs-string">&#x27;0&#x27;</span>].copy()<br><br><span class="hljs-comment"># 专业代码映射字典</span><br>MAJOR_MAPPING = &#123;<br>    <span class="hljs-string">&#x27;10000&#x27;</span>: <span class="hljs-string">&#x27;Philosophy&#x27;</span>, <span class="hljs-string">&#x27;100100&#x27;</span>: <span class="hljs-string">&#x27;Basic Medicine&#x27;</span>, <span class="hljs-string">&#x27;100400&#x27;</span>: <span class="hljs-string">&#x27;Stomatology&#x27;</span>, <span class="hljs-string">&#x27;100500&#x27;</span>: <span class="hljs-string">&#x27;Traditional Chinese Medicine&#x27;</span>,<br>    <span class="hljs-string">&#x27;100600&#x27;</span>: <span class="hljs-string">&#x27;Forensic Medicine&#x27;</span>, <span class="hljs-string">&#x27;100800&#x27;</span>: <span class="hljs-string">&#x27;Pharmacy&#x27;</span>, <span class="hljs-string">&#x27;100900&#x27;</span>: <span class="hljs-string">&#x27;Management&#x27;</span>, <span class="hljs-string">&#x27;110000&#x27;</span>: <span class="hljs-string">&#x27;Military Science&#x27;</span>,<br>    <span class="hljs-string">&#x27;20100&#x27;</span>: <span class="hljs-string">&#x27;Economics&#x27;</span>, <span class="hljs-string">&#x27;20200&#x27;</span>: <span class="hljs-string">&#x27;Business Administration&#x27;</span>, <span class="hljs-string">&#x27;40100&#x27;</span>: <span class="hljs-string">&#x27;Education&#x27;</span>, <span class="hljs-string">&#x27;40300&#x27;</span>: <span class="hljs-string">&#x27;Physical Education&#x27;</span>,<br>    <span class="hljs-string">&#x27;40400&#x27;</span>: <span class="hljs-string">&#x27;Vocational and Technical Education&#x27;</span>, <span class="hljs-string">&#x27;50200&#x27;</span>: <span class="hljs-string">&#x27;Foreign Languages and Literatures&#x27;</span>, <span class="hljs-string">&#x27;60100&#x27;</span>: <span class="hljs-string">&#x27;History&#x27;</span>, <span class="hljs-string">&#x27;70000&#x27;</span>: <span class="hljs-string">&#x27;Science&#x27;</span>,<br>    <span class="hljs-string">&#x27;70300&#x27;</span>: <span class="hljs-string">&#x27;Chemistry&#x27;</span>, <span class="hljs-string">&#x27;70400&#x27;</span>: <span class="hljs-string">&#x27;Biological Sciences&#x27;</span>, <span class="hljs-string">&#x27;70700&#x27;</span>: <span class="hljs-string">&#x27;Geographical Sciences&#x27;</span>, <span class="hljs-string">&#x27;71100&#x27;</span>: <span class="hljs-string">&#x27;Mechanics&#x27;</span>,<br>    <span class="hljs-string">&#x27;71200&#x27;</span>: <span class="hljs-string">&#x27;Information and Electronic Sciences&#x27;</span>, <span class="hljs-string">&#x27;71400&#x27;</span>: <span class="hljs-string">&#x27;Environmental Sciences&#x27;</span>, <span class="hljs-string">&#x27;71500&#x27;</span>: <span class="hljs-string">&#x27;Psychology&#x27;</span>, <span class="hljs-string">&#x27;80500&#x27;</span>: <span class="hljs-string">&#x27;Thermal Energy and Nuclear Energy&#x27;</span>,<br>    <span class="hljs-string">&#x27;80900&#x27;</span>: <span class="hljs-string">&#x27;Hydraulic Engineering&#x27;</span>, <span class="hljs-string">&#x27;81000&#x27;</span>: <span class="hljs-string">&#x27;Surveying and Mapping&#x27;</span>, <span class="hljs-string">&#x27;81500&#x27;</span>: <span class="hljs-string">&#x27;Forestry Engineering&#x27;</span>, <span class="hljs-string">&#x27;82100&#x27;</span>: <span class="hljs-string">&#x27;Engineering Mechanics&#x27;</span>,<br>    <span class="hljs-string">&#x27;90100&#x27;</span>: <span class="hljs-string">&#x27;Plant Production&#x27;</span>, <span class="hljs-string">&#x27;100300&#x27;</span>: <span class="hljs-string">&#x27;Clinical Medicine and Medical Technology&#x27;</span>, <span class="hljs-string">&#x27;100700&#x27;</span>: <span class="hljs-string">&#x27;Nursing&#x27;</span>, <span class="hljs-string">&#x27;10100&#x27;</span>: <span class="hljs-string">&#x27;Philosophy&#x27;</span>,<br>    <span class="hljs-string">&#x27;20000&#x27;</span>: <span class="hljs-string">&#x27;Economics&#x27;</span>, <span class="hljs-string">&#x27;30000&#x27;</span>: <span class="hljs-string">&#x27;Law&#x27;</span>, <span class="hljs-string">&#x27;30200&#x27;</span>: <span class="hljs-string">&#x27;Sociology&#x27;</span>, <span class="hljs-string">&#x27;30400&#x27;</span>: <span class="hljs-string">&#x27;Public Security&#x27;</span>,<br>    <span class="hljs-string">&#x27;40200&#x27;</span>: <span class="hljs-string">&#x27;Ideological and Political Education&#x27;</span>, <span class="hljs-string">&#x27;50000&#x27;</span>: <span class="hljs-string">&#x27;Literature&#x27;</span>, <span class="hljs-string">&#x27;50100&#x27;</span>: <span class="hljs-string">&#x27;Chinese Language and Literature&#x27;</span>, <span class="hljs-string">&#x27;50500&#x27;</span>: <span class="hljs-string">&#x27;Arts (II)&#x27;</span>,<br>    <span class="hljs-string">&#x27;60200&#x27;</span>: <span class="hljs-string">&#x27;Library, Information and Archives Science&#x27;</span>, <span class="hljs-string">&#x27;70200&#x27;</span>: <span class="hljs-string">&#x27;Physics&#x27;</span>, <span class="hljs-string">&#x27;70600&#x27;</span>: <span class="hljs-string">&#x27;Geology&#x27;</span>, <span class="hljs-string">&#x27;70800&#x27;</span>: <span class="hljs-string">&#x27;Geophysics&#x27;</span>,<br>    <span class="hljs-string">&#x27;71000&#x27;</span>: <span class="hljs-string">&#x27;Marine Sciences&#x27;</span>, <span class="hljs-string">&#x27;71300&#x27;</span>: <span class="hljs-string">&#x27;Materials Science&#x27;</span>, <span class="hljs-string">&#x27;80100&#x27;</span>: <span class="hljs-string">&#x27;Geology and Mining&#x27;</span>, <span class="hljs-string">&#x27;80200&#x27;</span>: <span class="hljs-string">&#x27;Materials&#x27;</span>,<br>    <span class="hljs-string">&#x27;80400&#x27;</span>: <span class="hljs-string">&#x27;Instrumentation&#x27;</span>, <span class="hljs-string">&#x27;81100&#x27;</span>: <span class="hljs-string">&#x27;Environment&#x27;</span>, <span class="hljs-string">&#x27;81600&#x27;</span>: <span class="hljs-string">&#x27;Textile&#x27;</span>, <span class="hljs-string">&#x27;81800&#x27;</span>: <span class="hljs-string">&#x27;Aeronautics and Astronautics&#x27;</span>,<br>    <span class="hljs-string">&#x27;82000&#x27;</span>: <span class="hljs-string">&#x27;Public Security Technology&#x27;</span>, <span class="hljs-string">&#x27;90400&#x27;</span>: <span class="hljs-string">&#x27;Animal Production and Veterinary Medicine&#x27;</span>, <span class="hljs-string">&#x27;90500&#x27;</span>: <span class="hljs-string">&#x27;Fisheries&#x27;</span>, <span class="hljs-string">&#x27;90600&#x27;</span>: <span class="hljs-string">&#x27;Management&#x27;</span>,<br>    <span class="hljs-string">&#x27;90700&#x27;</span>: <span class="hljs-string">&#x27;Agricultural Extension&#x27;</span>, <span class="hljs-string">&#x27;100000&#x27;</span>: <span class="hljs-string">&#x27;Medicine&#x27;</span>, <span class="hljs-string">&#x27;100200&#x27;</span>: <span class="hljs-string">&#x27;Preventive Medicine&#x27;</span>, <span class="hljs-string">&#x27;10200&#x27;</span>: <span class="hljs-string">&#x27;Marxist Theory&#x27;</span>,<br>    <span class="hljs-string">&#x27;30100&#x27;</span>: <span class="hljs-string">&#x27;Law&#x27;</span>, <span class="hljs-string">&#x27;30300&#x27;</span>: <span class="hljs-string">&#x27;Political Science&#x27;</span>, <span class="hljs-string">&#x27;40000&#x27;</span>: <span class="hljs-string">&#x27;Education&#x27;</span>, <span class="hljs-string">&#x27;50300&#x27;</span>: <span class="hljs-string">&#x27;Journalism&#x27;</span>,<br>    <span class="hljs-string">&#x27;50400&#x27;</span>: <span class="hljs-string">&#x27;Arts (I)&#x27;</span>, <span class="hljs-string">&#x27;60000&#x27;</span>: <span class="hljs-string">&#x27;History&#x27;</span>, <span class="hljs-string">&#x27;70100&#x27;</span>: <span class="hljs-string">&#x27;Mathematics&#x27;</span>, <span class="hljs-string">&#x27;70500&#x27;</span>: <span class="hljs-string">&#x27;Astronomy&#x27;</span>,<br>    <span class="hljs-string">&#x27;70900&#x27;</span>: <span class="hljs-string">&#x27;Atmospheric Sciences&#x27;</span>, <span class="hljs-string">&#x27;71600&#x27;</span>: <span class="hljs-string">&#x27;Science and Technology Information and Management&#x27;</span>, <span class="hljs-string">&#x27;80000&#x27;</span>: <span class="hljs-string">&#x27;Engineering&#x27;</span>, <span class="hljs-string">&#x27;80300&#x27;</span>: <span class="hljs-string">&#x27;Mechanical Engineering&#x27;</span>,<br>    <span class="hljs-string">&#x27;80600&#x27;</span>: <span class="hljs-string">&#x27;Electrical Engineering&#x27;</span>, <span class="hljs-string">&#x27;80700&#x27;</span>: <span class="hljs-string">&#x27;Electronics and Information&#x27;</span>, <span class="hljs-string">&#x27;80800&#x27;</span>: <span class="hljs-string">&#x27;Civil Engineering&#x27;</span>, <span class="hljs-string">&#x27;81200&#x27;</span>: <span class="hljs-string">&#x27;Chemical Engineering and Pharmacy&#x27;</span>,<br>    <span class="hljs-string">&#x27;81300&#x27;</span>: <span class="hljs-string">&#x27;Light Industry, Food and Grain&#x27;</span>, <span class="hljs-string">&#x27;81400&#x27;</span>: <span class="hljs-string">&#x27;Agricultural Engineering&#x27;</span>, <span class="hljs-string">&#x27;81700&#x27;</span>: <span class="hljs-string">&#x27;Transportation&#x27;</span>, <span class="hljs-string">&#x27;81900&#x27;</span>: <span class="hljs-string">&#x27;Weaponry&#x27;</span>,<br>    <span class="hljs-string">&#x27;82200&#x27;</span>: <span class="hljs-string">&#x27;Management Engineering&#x27;</span>, <span class="hljs-string">&#x27;90000&#x27;</span>: <span class="hljs-string">&#x27;Agriculture&#x27;</span>, <span class="hljs-string">&#x27;90200&#x27;</span>: <span class="hljs-string">&#x27;Forest Resources&#x27;</span>, <span class="hljs-string">&#x27;90300&#x27;</span>: <span class="hljs-string">&#x27;Environmental Protection&#x27;</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">give_employment_advice</span>(<span class="hljs-params">row</span>):<br>    advice = []<br>    <span class="hljs-keyword">try</span>:<br>        education = row[<span class="hljs-string">&#x27;edu_level&#x27;</span>]<br>        major_code = row[<span class="hljs-string">&#x27;major_code&#x27;</span>]<br>        major = MAJOR_MAPPING.get(major_code, <span class="hljs-string">&#x27;Other Disciplines&#x27;</span>) <span class="hljs-keyword">if</span> major_code != <span class="hljs-string">&#x27;990000&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;Other Disciplines&#x27;</span><br>        age = <span class="hljs-built_in">int</span>(row[<span class="hljs-string">&#x27;age&#x27;</span>])<br>        marriage = row[<span class="hljs-string">&#x27;marriage&#x27;</span>]<br>        is_disability = row[<span class="hljs-string">&#x27;is_disability&#x27;</span>]<br>        military_status = row[<span class="hljs-string">&#x27;military_status&#x27;</span>]<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(education) &lt; <span class="hljs-number">20</span>:<br>            <span class="hljs-keyword">if</span> age &lt; <span class="hljs-number">35</span>:<br>                <span class="hljs-keyword">if</span> is_disability == <span class="hljs-string">&#x27;0&#x27;</span>:<br>                    other_jobs = [<span class="hljs-string">&quot;Housekeeper&quot;</span>, <span class="hljs-string">&quot;Factory worker&quot;</span>, <span class="hljs-string">&quot;Warehouse laborer&quot;</span>, <span class="hljs-string">&quot;Agricultural worker&quot;</span>]<br>                    advice.append(random.choice(other_jobs))<br>                <span class="hljs-keyword">else</span>:<br>                    advice.append(<span class="hljs-string">&quot;Handicraft worker&quot;</span>)<br>            <span class="hljs-keyword">elif</span> <span class="hljs-number">35</span> &lt;= age &lt; <span class="hljs-number">50</span>:<br>                <span class="hljs-keyword">if</span> marriage <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;20&#x27;</span>, <span class="hljs-string">&#x27;40&#x27;</span>]:<br>                    advice.append(<span class="hljs-string">&quot;Farmer&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    advice.append(<span class="hljs-string">&quot;Factory worker&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> is_disability == <span class="hljs-string">&#x27;0&#x27;</span>:<br>                    advice.append(<span class="hljs-string">&quot;Community cleaner&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    advice.append(<span class="hljs-string">&quot;Handicraft sorter&quot;</span>)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-number">20</span> &lt;= <span class="hljs-built_in">int</span>(education) &lt; <span class="hljs-number">40</span>:<br>            <span class="hljs-keyword">if</span> age &lt; <span class="hljs-number">35</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Economics&#x27;</span> <span class="hljs-keyword">in</span> major:<br>                    other_jobs = [<span class="hljs-string">&quot;Marketer&quot;</span>, <span class="hljs-string">&quot;Salesperson&quot;</span>, <span class="hljs-string">&quot;Business analyst&quot;</span>, <span class="hljs-string">&quot;Financial analyst&quot;</span>]<br>                    advice.append(random.choice(other_jobs))<br>                <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;Chemistry&#x27;</span> <span class="hljs-keyword">in</span> major:<br>                    other_jobs = [<span class="hljs-string">&quot;Chemical process operator&quot;</span>, <span class="hljs-string">&quot;Chemical product analyst&quot;</span>]<br>                    advice.append(random.choice(other_jobs))<br>                <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;Engineering&#x27;</span> <span class="hljs-keyword">in</span> major:<br>                    other_jobs = [<span class="hljs-string">&quot;Mechanical technician&quot;</span>, <span class="hljs-string">&quot;Electrical technician&quot;</span>, <span class="hljs-string">&quot;Equipment maintenance technician&quot;</span>]<br>                    advice.append(random.choice(other_jobs))<br>                <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;Biological Sciences&#x27;</span> <span class="hljs-keyword">in</span> major:<br>                    other_jobs = [<span class="hljs-string">&quot;Food quality inspector&quot;</span>, <span class="hljs-string">&quot;Biomedical research assistant&quot;</span>]<br>                    advice.append(random.choice(other_jobs))<br>                <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;Languages&#x27;</span> <span class="hljs-keyword">in</span> major:<br>                    other_jobs = [<span class="hljs-string">&quot;Tour guide&quot;</span>, <span class="hljs-string">&quot;Tourism marketing specialist&quot;</span>]<br>                    advice.append(random.choice(other_jobs))<br>                <span class="hljs-keyword">else</span>:<br>                    other_jobs = [<span class="hljs-string">&quot;Content writer&quot;</span>, <span class="hljs-string">&quot;Graphic designer&quot;</span>, <span class="hljs-string">&quot;Data entry clerk&quot;</span>, <span class="hljs-string">&quot;Event planner&quot;</span>]<br>                    advice.append(random.choice(other_jobs))<br>            <span class="hljs-keyword">elif</span> <span class="hljs-number">35</span> &lt;= age &lt; <span class="hljs-number">50</span>:<br>                <span class="hljs-keyword">if</span> marriage <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;20&#x27;</span>, <span class="hljs-string">&#x27;40&#x27;</span>]:<br>                    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Agriculture&#x27;</span> <span class="hljs-keyword">in</span> major:<br>                        advice.append(<span class="hljs-string">&quot;Agricultural processor&quot;</span>)<br>                    <span class="hljs-keyword">else</span>:<br>                        advice.append(<span class="hljs-string">&quot;Warehouse manager&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Engineering&#x27;</span> <span class="hljs-keyword">in</span> major:<br>                        advice.append(<span class="hljs-string">&quot;Industrial operator&quot;</span>)<br>                    <span class="hljs-keyword">else</span>:<br>                        advice.append(<span class="hljs-string">&quot;Industrial operator&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> is_disability == <span class="hljs-string">&#x27;0&#x27;</span>:<br>                    advice.append(<span class="hljs-string">&quot;Elderly caregiver&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    advice.append(<span class="hljs-string">&quot;Handmade seller&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> age &lt; <span class="hljs-number">35</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Chemistry&#x27;</span> <span class="hljs-keyword">in</span> major:<br>                    other_jobs = [<span class="hljs-string">&quot;Chemical researcher&quot;</span>, <span class="hljs-string">&quot;Chemical process engineer&quot;</span>]<br>                    advice.append(random.choice(other_jobs))<br>                <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;Biological Sciences&#x27;</span> <span class="hljs-keyword">in</span> major:<br>                    other_jobs = [<span class="hljs-string">&quot;Biomedical researcher&quot;</span>, <span class="hljs-string">&quot;Drug development scientist&quot;</span>]<br>                    advice.append(random.choice(other_jobs))<br>                <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;Engineering&#x27;</span> <span class="hljs-keyword">in</span> major:<br>                    other_jobs = [<span class="hljs-string">&quot;Mechanical engineer&quot;</span>, <span class="hljs-string">&quot;Electrical engineer&quot;</span>, <span class="hljs-string">&quot;Equipment design engineer&quot;</span>]<br>                    advice.append(random.choice(other_jobs))<br>                <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;Management&#x27;</span> <span class="hljs-keyword">in</span> major:<br>                    other_jobs = [<span class="hljs-string">&quot;Production manager&quot;</span>, <span class="hljs-string">&quot;Project manager&quot;</span>, <span class="hljs-string">&quot;Business manager&quot;</span>]<br>                    advice.append(random.choice(other_jobs))<br>                <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;Languages&#x27;</span> <span class="hljs-keyword">in</span> major:<br>                    advice.append(<span class="hljs-string">&quot;Tourism marketing specialist&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    advice.append(<span class="hljs-string">&quot;Financial consultant&quot;</span>)<br>            <span class="hljs-keyword">elif</span> <span class="hljs-number">35</span> &lt;= age &lt; <span class="hljs-number">50</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Management&#x27;</span> <span class="hljs-keyword">in</span> major:<br>                    advice.append(<span class="hljs-string">&quot;Production manager&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    advice.append(<span class="hljs-string">&quot;Technical expert&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                advice.append(<span class="hljs-string">&quot;Part - time trainer&quot;</span>)<br><br>        <span class="hljs-keyword">if</span> military_status == <span class="hljs-string">&#x27;1&#x27;</span>:<br>            advice.append(<span class="hljs-string">&quot;Security guard&quot;</span>)<br>    <span class="hljs-keyword">except</span> ValueError:<br>        advice.append(<span class="hljs-string">&quot;Data error: unable to convert age or education level to integer.&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        advice.append(<span class="hljs-string">f&quot;Unexpected error: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span>.join(advice)<br><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> unemployed_data.empty:<br>    unemployed_data[<span class="hljs-string">&#x27;Employment Advice&#x27;</span>] = unemployed_data.apply(<span class="hljs-keyword">lambda</span> row: give_employment_advice(row), axis = <span class="hljs-number">1</span>)<br>    result = unemployed_data[[<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;Employment Advice&#x27;</span>]]<br>    <span class="hljs-built_in">print</span>(result)<br>    result.to_excel(<span class="hljs-string">&#x27;unemployed_advice.xlsx&#x27;</span>, index = <span class="hljs-literal">False</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No unemployed people data was filtered.&quot;</span>)<br>    <br></code></pre></td></tr></table></figure><p>写在最后：第一次打数模，不管咋样写完了（虽然知道自己写的依托）还是蛮有成就感的。因为建模大部分并不是我做的，所以公式直接pass掉吧，基本上就是一些代码。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/22/hello-world/"/>
    <url>/2025/04/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
